{
  "react-native": {
    "app-menu": {
      "app-menu/index.js": {
        "code": "import React from \"react\";\nimport { View, Text, StyleSheet, Pressable } from 'react-native';\nimport { useNavigationState } from \"@react-navigation/native\";\n\nconst title = \"App Menu\";\n\nfunction AppMenu({ navigation }) {\n  const routes = useNavigationState(\n    state => state.routeNames.filter(name => name !== title)\n  );\n  const links = routes.map(route => {\n    return (\n      <Pressable\n        onPress={() => navigation.navigate(route)}\n        style={pressed}\n        key={route}\n      >\n        <Text style={styles.buttonText}>{route}</Text>\n      </Pressable >\n    )\n  });\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>Routes available ({routes.length})</Text>\n      {links}\n    </View>\n  )\n}\n\nconst pressed = ({ pressed }) => [\n  pressed ? styles.buttonPressed : styles.buttonNotPressed,\n  styles.button\n];\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height: 100,\n    padding: 13\n  },\n  text: {\n    fontSize: 20\n  },\n  buttonPressed: {\n    backgroundColor: 'rgba(72, 61, 139, 0.75)'\n  },\n  buttonNotPressed: {\n    backgroundColor: 'rgba(72, 61, 139, 1)'\n  },\n  button: {\n    borderRadius: 4,\n    padding: 15,\n    marginTop: 10\n  },\n  buttonText: {\n    color: \"white\",\n    textAlign: \"center\",\n    fontSize: 16\n  }\n})\n\nexport default {\n  title: title,\n  navigator: AppMenu\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "app-menu/package.json": {
        "code": "{\n  \"name\": \"@modules/app-menu\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Module that shows available routes in a menu with links\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"author\": \"Crowdbotics\"\n}\n",
        "parentDir": "/modules",
        "newFile": true
      }
    },
    "articles": {
      "articles/README.md": {
        "code": "# Article List and Detail\n\n## Setup\n\nOpen `modules/articles/store/api.js` and update the `baseURL` with your application's URL followed by `/modules/articles` which is the endpoint (ie. demo0122202101-24002.botics.com/modules/articles). The initial piece is your project name and the numeric piece is your project number.\n\n## Manual Setup\n\nIf you want to use the module directly, or in other modules, you can do so by importing it and using the following properties.\n\n```javascript\nimport Articles from \"@modules/articles\";\n\nconst { title, navigator, slice } = Articles;\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "articles/article.js": {
        "code": "import React from \"react\"\nimport { Text, View, ImageBackground } from \"react-native\"\nimport { useSelector } from \"react-redux\"\nimport { styles } from \"./styles\"\n\nfunction Article({ route }) {\n  const id = route.params?.id\n  const article = useSelector(state =>\n    state.Articles.articles.find(record => record.id === id)\n  )\n\n  return (\n    <View>\n      {article && (\n        <View>\n          <ImageBackground source={{ uri: article.image }} style={styles.image}>\n            <View style={styles.card}>\n              <Text style={styles.text}>{article.title}</Text>\n              <Text style={styles.author}>{article.author}</Text>\n            </View>\n          </ImageBackground>\n          <Text style={styles.body}>{article.body}</Text>\n        </View>\n      )}\n    </View>\n  )\n}\n\nexport default Article\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "articles/index.js": {
        "code": "import React, { useEffect } from \"react\"\nimport {\n  Text,\n  FlatList,\n  View,\n  TouchableOpacity,\n  ImageBackground,\n  SafeAreaView\n} from \"react-native\"\nimport { styles } from \"./styles\"\nimport { slice, article_list } from \"./store\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { createStackNavigator } from \"@react-navigation/stack\"\nimport Article from \"./article\"\n\nconst ArticlesList = ({ route, navigation }) => {\n  const detail = route.params?.detail || \"Article\"\n  const { articles } = useSelector(state => state.Articles)\n  const dispatch = useDispatch()\n\n  useEffect(async () => {\n    dispatch(article_list()).catch(e => console.log(e.message))\n  }, [detail])\n\n  const renderItem = ({ item }) => (\n    <TouchableOpacity\n      onPress={() => {\n        navigation.navigate(detail, { id: item.id })\n      }}\n    >\n      <ImageBackground source={{ uri: item.image }} style={styles.image}>\n        <View style={styles.card}>\n          <Text style={styles.text}>{item.title}</Text>\n          <Text style={styles.author}>{item.author}</Text>\n        </View>\n      </ImageBackground>\n    </TouchableOpacity>\n  )\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        data={articles}\n        renderItem={renderItem}\n        keyExtractor={item => `${item.id}`}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst Stack = createStackNavigator()\n\nconst ArticlesNavigator = () => (\n  <Stack.Navigator headerMode=\"none\" initialRouteName=\"Articles\">\n    <Stack.Screen name=\"Articles\" component={ArticlesList} />\n    <Stack.Screen name=\"Article\" component={Article} />\n  </Stack.Navigator>\n)\n\nexport default {\n  title: \"Articles\",\n  navigator: ArticlesNavigator,\n  slice\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "articles/package.json": {
        "code": "{\n  \"name\": \"@modules/articles\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Module for articles lists and details pages.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"author\": \"Crowdbotics\"\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "articles/store/api.js": {
        "code": "import axios from \"axios\"\n\nconst articlesAPI = axios.create({\n  baseURL: \"https://app.botics.co/modules/articles\",\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }\n})\n\nexport function article_list() {\n  return articlesAPI.get(`/article/`)\n}\n\nexport function article_read(id) {\n  return articlesAPI.get(`/article/${id}/`)\n}\n\nexport const api = {\n  article_list,\n  article_read\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "articles/store/index.js": {
        "code": "import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { api } from \"./api\"\n\nexport const article_read = createAsyncThunk(\n  \"articles/article_read\",\n  async ({ id }) => {\n    const response = await api.article_read(id)\n    return response.data\n  }\n)\n\nexport const article_list = createAsyncThunk(\n  \"articles/article_list\",\n  async () => {\n    const response = await api.article_list()\n    return response.data\n  }\n)\n\nconst initialState = { articles: [], api: { loading: \"idle\", error: null } }\n\nexport const slice = createSlice({\n  name: \"articles\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: {\n    [article_list.pending]: state => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\"\n        state.api.error = null\n      }\n    },\n    [article_list.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.articles = action.payload\n        state.api.loading = \"idle\"\n      }\n    },\n    [article_list.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = action.error\n        state.api.loading = \"idle\"\n      }\n    },\n    [article_read.pending]: state => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\"\n      }\n    },\n    [article_read.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.articles = [\n          ...state.articles.filter(record => record.id !== action.payload.id),\n          action.payload\n        ]\n        state.api.loading = \"idle\"\n      }\n    },\n    [article_read.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = action.error\n        state.api.loading = \"idle\"\n      }\n    }\n  }\n})\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "articles/styles.js": {
        "code": "import { StyleSheet } from \"react-native\";\n\nexport const styles = StyleSheet.create({\n  card: {\n    padding: 10,\n  },\n  text: {\n    fontSize: 28,\n    color: '#ffffff',\n  },\n  author: {\n    fontSize: 18,\n    color: '#f2f2f2',\n  },\n  image: {\n    height: 250,\n    width: '100%',\n    justifyContent: 'flex-end',\n    backgroundColor: 'lightslategray',\n  },\n  body: {\n    padding: 10,\n    fontSize: 16\n  }\n});\n",
        "parentDir": "/modules",
        "newFile": true
      }
    },
    "chat": {
      "chat/README.md": {
        "code": "# Chat\n\n## Documentation\n\nBased on pubnub/tutorial-app-react-native\n\nhttps://github.com/pubnub/tutorial-app-react-native\n\n## Manual Setup\n\nIf you want to use the module directly, or in other modules, you can do so by importing it and using the following properties.\n\n```javascript\nimport Chat from \"@modules/chat\";\n\nconst { title, navigator } = Chat;\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "chat/chat.js": {
        "code": "import React, { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  Button,\n  SafeAreaView,\n  TextInput,\n  KeyboardAvoidingView,\n  Platform\n} from \"react-native\";\nimport { usePubNub } from \"pubnub-react\";\n\nconst Chat = ({ route }) => {\n  // The `route` prop will be passed to us thanks to React Navigation.\n  // It will contain our emoji in `route.params.emoji`.\n  const userEmoji = route.params.emoji;\n\n  // Here we obtain our PubNub instance thanks to using the provider\n  const pubnub = usePubNub();\n\n  // In next two statements we define the state needed for our chat\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  // First we need to set our PubNub UUID and subscribe to chat channel.\n  // We will use `useEffect` hook for that.\n  useEffect(() => {\n    // We need to make sure that PubNub is defined\n    if (pubnub) {\n      // Set the UUID of our user to their chosen emoji\n      pubnub.setUUID(userEmoji);\n\n      // Create a listener that will push new messages to our `messages` variable\n      // using the `setMessages` function.\n      const listener = {\n        message: envelope => {\n          setMessages(msgs => [\n            ...msgs,\n            {\n              id: envelope.message.id,\n              author: envelope.publisher,\n              content: envelope.message.content,\n              timetoken: envelope.timetoken\n            }\n          ]);\n        }\n      };\n\n      // Add the listener to pubnub instance and subscribe to `chat` channel.\n      pubnub.addListener(listener);\n      pubnub.subscribe({ channels: [\"chat\"] });\n\n      // We need to return a function that will handle unsubscription on unmount\n      return () => {\n        pubnub.removeListener(listener);\n        pubnub.unsubscribeAll();\n      };\n    }\n  }, [pubnub]);\n\n  // This function handles sending messages.\n  const handleSubmit = () => {\n    // Clear the input field.\n    setInput(\"\");\n\n    // Create the message with random `id`.\n    const message = {\n      content: input,\n      id: Math.random()\n        .toString(16)\n        .substr(2)\n    };\n\n    // Publish our message to the channel `chat`\n    pubnub.publish({ channel: \"chat\", message });\n  };\n\n  return (\n    <SafeAreaView style={styles.outerContainer}>\n      <KeyboardAvoidingView\n        style={styles.innerContainer}\n        behavior=\"height\"\n        keyboardVerticalOffset={Platform.select({\n          ios: 78,\n          android: 0\n        })}\n      >\n        <View style={styles.topContainer}>\n          {messages.map(message => (\n            <View key={message.timetoken} style={styles.messageContainer}>\n              <View style={styles.avatar}>\n                <Text style={styles.avatarContent}>{message.author}</Text>\n              </View>\n              <View style={styles.messageContent}>\n                <Text>{message.content}</Text>\n              </View>\n            </View>\n          ))}\n        </View>\n        <View style={styles.bottomContainer}>\n          <TextInput\n            style={styles.textInput}\n            value={input}\n            onChangeText={setInput}\n            onSubmitEditing={handleSubmit}\n            returnKeyType=\"send\"\n            enablesReturnKeyAutomatically={true}\n            placeholder=\"Type your message here...\"\n          />\n          <View style={styles.submitButton}>\n            {input !== \"\" && <Button title=\"Send\" onPress={handleSubmit} />}\n          </View>\n        </View>\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  outerContainer: {\n    width: \"100%\",\n    height: \"100%\"\n  },\n  innerContainer: {\n    width: \"100%\",\n    height: \"100%\"\n  },\n  topContainer: {\n    flex: 1,\n    width: \"100%\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-end\",\n    paddingHorizontal: 16\n  },\n  messageContainer: {\n    flexDirection: \"row\",\n    marginTop: 16,\n    alignItems: \"center\",\n    backgroundColor: \"#fff\",\n    padding: 8,\n    borderRadius: 4\n  },\n  avatar: {\n    width: 38,\n    height: 38,\n    borderRadius: 50,\n    overflow: \"hidden\",\n    marginRight: 16\n  },\n  avatarContent: {\n    fontSize: 30,\n    textAlign: \"center\",\n    textAlignVertical: \"center\"\n  },\n  messageContent: {\n    flex: 1\n  },\n  bottomContainer: {\n    width: \"100%\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    padding: 16\n  },\n  textInput: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    borderRadius: 4,\n    padding: 16,\n    elevation: 2\n  },\n  submitButton: {\n    position: \"absolute\",\n    right: 32\n  }\n});\n\nexport default Chat;\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "chat/index.js": {
        "code": "import React, { useState } from \"react\";\nimport { StyleSheet, Text, SafeAreaView, Button, View, LogBox } from \"react-native\";\nimport EmojiSelector from \"react-native-emoji-selector\";\nimport Chat from \"./chat\";\n\nimport { createStackNavigator } from '@react-navigation/stack';\nconst Stack = createStackNavigator();\n\nconst EmojiPicker = ({ navigation }) => {\n  // In here we are storing our currently picked emoji.\n  const [chosenEmoji, setEmoji] = useState(null);\n\n  // This method will be called when our user selects an emoji\n  const handleEmojiSelected = emoji => {\n    setEmoji(emoji);\n  };\n\n  // This method will be called when our user wants to continue with\n  // currently selected emoji - this method will do nothing if user\n  // didn't pick an emoji.\n  const handleContinueButton = () => {\n    if (chosenEmoji !== null) {\n      navigation.replace(\"Chat\", { emoji: chosenEmoji });\n    }\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.topContainer}>\n        <Text style={styles.hint}>\n          Pick an emoji that will represent you in the chat\n        </Text>\n        <View\n          style={{\n            ...styles.emojiContainer,\n            ...(chosenEmoji === null ? styles.empty : {})\n          }}\n        >\n          <Text style={styles.emoji}>{chosenEmoji || \"\"}</Text>\n        </View>\n        <Button\n          // If user haven't chosen an emoji, we disable the continue button\n          disabled={chosenEmoji === null}\n          style={styles.continueButton}\n          title=\"Continue\"\n          onPress={handleContinueButton}\n        />\n      </View>\n      <View style={{ height: \"50%\" }}>\n        <EmojiSelector onEmojiSelected={handleEmojiSelected} />\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  },\n  topContainer: {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"50%\"\n  },\n  hint: {\n    fontSize: 16,\n    textAlign: \"center\",\n    marginTop: 32\n  },\n  continueButton: {\n    marginVertical: 64,\n    width: 300\n  },\n  emojiContainer: {\n    width: 64,\n    height: 64,\n    marginVertical: 32\n  },\n  emoji: {\n    width: \"100%\",\n    height: \"100%\",\n    fontSize: 60,\n    textAlign: \"center\",\n    textAlignVertical: \"center\",\n    fontSize: 60\n  },\n  empty: {\n    borderWidth: 5,\n    borderStyle: \"dashed\",\n    borderColor: \"rgba(0, 0, 0, 0.2)\"\n  }\n});\n\nimport PubNub from \"pubnub\";\nimport { PubNubProvider } from \"pubnub-react\";\n\nconst pubnub = new PubNub({\n  subscribeKey: \"demo\",\n  publishKey: \"demo\",\n  uuid: \"0\"\n});\n\nLogBox.ignoreAllLogs(true);\n\nconst ChatNavigator = () => {\n  return (\n    <PubNubProvider client={pubnub}>\n      <Stack.Navigator headerMode=\"none\" initialRouteName=\"EmojiPicker\">\n        <Stack.Screen name=\"EmojiPicker\" component={EmojiPicker} />\n        <Stack.Screen name=\"Chat\" component={Chat} />\n      </Stack.Navigator>\n    </PubNubProvider>\n  )\n}\n\nexport default {\n  title: \"Chat\",\n  navigator: ChatNavigator,\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "chat/package.json": {
        "code": "{\n  \"name\": \"@modules/chat\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A set of screens to display chat conversations in a list and 1-to-1 messaging\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"pubnub\": \"^4.29.11\",\n    \"pubnub-react\": \"^2.1.0\",\n    \"react-native-emoji-selector\": \"^0.2.0\",\n    \"react-native-keyboard-aware-scroll-view\": \"^0.9.3\"\n  }\n}\n",
        "parentDir": "/modules",
        "newFile": true
      }
    },
    "login": {
      "login/README.md": {
        "code": "# Login Module\nThe Login Module is a React Native-based module that allows the user to login or signup within their app.\n\n## Installation\n\n#### Update api url\n\nUpdate the file `<module_directory>/auth/api.js`, replacing the value of `baseURL` with your own app's backend url. For example, if your app is called `my-app` and has a url of `https://my-app.botics.co`, update from\n`baseURL: \"https://your-app-backend.botics.co\"` to `baseURL: \"https://my-app.botics.co\"`\n\nNote for developers: you can access the user token through the reducer state (i.e. `state.login.token` and user auth information like email at `state.login.user`)\n\n### Change Login screen destination to your desired screen (likely Home screen).\n\nOpen the `screens/constants.js` file and edit the `HOME_SCREEN_NAME` value with desired destination screen (likely Home Screen). For example, if my home screen has a navigation name of `HomeScreen1234`, then I should change as follows: `export const HOME_SCREEN_NAME = 'HomeScreen1234'`. If you desire, you can also update your logo image URL (be mindful that the size of the image should match the original ones for ideal results).\n\n\n## Modify backend (optional)\nThe configuration steps below will allow your app to send emails like verification email and password reset emails. \nIf your app's backend does not have SENDGRID environmental variables available, _make changes to project backend files (in /backend/YOUR_PROJECT folder):_\n\n**MODIFY: /backend/YOUR_PROJECT_NAME/settings.py** version in your project backend folder\n\n**ADD** above AWS S3 Config lines:\n\n```sh\nEMAIL_HOST = env.str(\"EMAIL_HOST\", \"smtp.sendgrid.net\")\nEMAIL_HOST_USER = env.str(\"SENDGRID_USERNAME\", \"\")\nEMAIL_HOST_PASSWORD = env.str(\"SENDGRID_PASSWORD\", \"\")\n```\n\nIf this code already exists, you can just skip this step.\n\n### Setup SendGrid account and keep reference to username and password.\n\nReference website [Sendgrid](https://wwww.sendgrid.com)\n\n### Configure Environment Variables.\n\nUsing the Crowdbotics Dashboard, navigate to \"Settings\" and select the tab \"Environment Variables\", here you will add the following variables:\n\n```\nSENDGRID_USERNAME\nSENDGRID_PASSWORD\n```\n\n## Old Crowdbotics Scaffold (optional)\nIf your project does not use the latest version of Crowdbotics scaffold, you might need manually configure this module in order for it to work properly, including:\n- Adding the module to the main apps' navigation tree\n- Adding the redux-toolkit to your project and loading the proper middleware\n- Loading the module's reducer to the store\n\nTo verify if your project is on the latest version, look for a `.crowdbotics.json` file at the root of your project.\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.",
        "parentDir": "/modules",
        "newFile": true
      },
      "login/auth/api.js": {
        "code": "import axios from \"axios\";\n\nconst BASE_URL = \"https://your-app-backend.botics.co\"; // your app back-end url\n\nconst authAPI = axios.create({\n  baseURL: BASE_URL,\n  headers: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\n});\n\nfunction apiLoginRequest(payload) {\n  return authAPI.post(`/api/v1/login/`, payload);\n}\n\nfunction apiSignupRequest(payload) {\n  return authAPI.post(`/api/v1/signup/`, payload);\n}\n\nfunction apiLogoutRequest(payload) {\n  return authAPI.post(`/rest-auth/logout/`, null, {\n    headers: { Authorization: `Token ${payload.token}` },\n  });\n}\n\nfunction apiAuthUserRequest(payload) {\n  return authAPI.get(`/rest-auth/user/`, null, {\n    headers: { Authorization: `Token ${payload.token}` },\n  });\n}\n\nfunction apiResetPasswordRequest(payload) {\n  return authAPI.post(`/rest-auth/password/reset/`, payload);\n}\n\nexport const api = {\n  apiLoginRequest,\n  apiSignupRequest,\n  apiLogoutRequest,\n  apiResetPasswordRequest,\n  apiAuthUserRequest,\n};\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "login/auth/index.js": {
        "code": "import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { mapErrorMessage } from \"./utils\";\nimport { api } from \"./api\";\n\nexport const loginRequest = createAsyncThunk(\n  \"login/loginRequest\",\n  async (payload) => {\n    const response = await api.apiLoginRequest(payload);\n    return response.data;\n  }\n);\n\nexport const signupRequest = createAsyncThunk(\n  \"login/signupRequest\",\n  async (payload) => {\n    const response = await api.apiSignupRequest(payload);\n    return response.data;\n  }\n);\n\nexport const logoutRequest = createAsyncThunk(\n  \"login/logoutRequest\",\n  async (payload) => {\n    const response = await api.apiLogoutRequest(payload);\n    return response.data;\n  }\n);\n\nexport const getAuthUser = createAsyncThunk(\n  \"login/getAuthUser\",\n  async (payload) => {\n    const response = await api.apiAuthUserRequest(payload);\n    return response.data;\n  }\n);\nexport const resetPassword = createAsyncThunk(\n  \"login/resetPassword\",\n  async (payload) => {\n    const response = await api.apiResetPasswordRequest(payload);\n    return response.data;\n  }\n);\n\nconst initialState = {\n  token: null,\n  user: {},\n  api: { loading: \"idle\", error: null },\n};\nexport const slice = createSlice({\n  name: \"login\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: {\n    [loginRequest.pending]: (state) => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\";\n        state.api.error = null;\n      }\n    },\n    [loginRequest.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.token = action.payload.token;\n        state.user = action.payload.user;\n        state.api.loading = \"idle\";\n      }\n    },\n    [loginRequest.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error);\n        state.api.loading = \"idle\";\n      }\n    },\n\n    [signupRequest.pending]: (state) => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\";\n        state.api.error = null;\n        state.token = null;\n      }\n    },\n    [signupRequest.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.user = action.payload;\n        state.api.loading = \"idle\";\n      }\n    },\n    [signupRequest.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error);\n        state.api.loading = \"idle\";\n      }\n    },\n\n    [logoutRequest.pending]: (state) => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\";\n        state.api.error = null;\n      }\n    },\n    [logoutRequest.fulfilled]: (state) => {\n      if (state.api.loading === \"pending\") {\n        return initialState;\n      }\n    },\n    [logoutRequest.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error);\n        state.api.loading = \"idle\";\n      }\n    },\n    [getAuthUser.pending]: (state) => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\";\n        state.api.error = null;\n      }\n    },\n    [getAuthUser.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.user = action.payload;\n        state.api.loading = \"idle\";\n        state.api.error = null;\n      }\n    },\n    [getAuthUser.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error);\n        state.api.loading = \"idle\";\n      }\n    },\n\n    [resetPassword.pending]: (state) => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\";\n        state.api.error = null;\n      }\n    },\n    [resetPassword.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.user = action.payload;\n        state.api.loading = \"idle\";\n        state.api.error = null;\n      }\n    },\n    [resetPassword.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error);\n        state.api.loading = \"idle\";\n      }\n    },\n  },\n});\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "login/auth/utils.js": {
        "code": "const messageMap = {\n  \"Request failed with status code 400\": {\n    code: 400,\n    message: \"Invalid credentials.\",\n  },\n  \"Request failed with status code 403\": {\n    code: 403,\n    message: \"You do not have access to this resource.\",\n  },\n  \"Request failed with status code 500\": {\n    code: 500,\n    message: \"Unexpected Server Error.\",\n  },\n  \"Network Error\": {\n    code: null,\n    message:\n      \"Network Error: It was not possible to establish a connection with the server.\",\n  },\n};\n\nexport const mapErrorMessage = (error) => {\n  const message = error.message;\n  return messageMap[message]\n    ? { ...messageMap[message] }\n    : { code: null, message };\n};\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "login/index.js": {
        "code": "import React from \"react\";\nimport {\n  View,\n  ImageBackground,\n  Image,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n} from \"react-native\";\nimport {\n  NavigationHelpersContext,\n  useNavigationBuilder,\n  TabRouter,\n  TabActions,\n  createNavigatorFactory,\n} from \"@react-navigation/native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { BACKGROUND_URL, LOGO_URL } from \"./screens/constants.js\";\nimport { slice } from \"./auth\";\nimport { styles } from \"./screens/styles\";\nimport { SignInTab, SignupTab } from \"./screens/loginsignup\";\nimport PasswordReset from \"./screens/reset\";\n\nconst LoginTabBar = ({ navigation, state, descriptors }) => {\n  const currentTab = state.routes[state.index];\n  return (\n    <View style={styles.tabStyle}>\n      {state.routes.map((route) => (\n        <View\n          key={route.key}\n          style={route.key == currentTab.key ? styles.activeTabStyle : null}\n        >\n          <TouchableOpacity\n            onPress={() => {\n              const event = navigation.emit({\n                type: \"tabPress\",\n                target: route.key,\n                canPreventDefault: true,\n              });\n              if (!event.defaultPrevented) {\n                navigation.dispatch({\n                  ...TabActions.jumpTo(route.name),\n                  target: state.key,\n                });\n              }\n            }}\n          >\n            <Text style={styles.tabStyle}>\n              {descriptors[route.key].options.title || route.name}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      ))}\n    </View>\n  );\n};\n\nfunction LoginSignupTabs({ initialRouteName, children, screenOptions }) {\n  const { state, navigation, descriptors } = useNavigationBuilder(TabRouter, {\n    children,\n    screenOptions,\n    initialRouteName,\n  });\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <KeyboardAwareScrollView contentContainerStyle={{ flex: 1 }}>\n        <ScrollView style={[styles.container]}>\n          <View style={{ flex: 1 }}>\n            <View style={styles.imageContainer}>\n              <ImageBackground\n                source={{\n                  uri: BACKGROUND_URL,\n                }}\n                style={{\n                  flex: 1,\n                  justifyContent: \"center\",\n                  resizeMode: \"cover\",\n                  height: \"100%\",\n                  width: \"100%\",\n                }}\n              >\n                <Image\n                  source={{\n                    uri: LOGO_URL,\n                  }}\n                  style={{\n                    width: 155,\n                    height: 155,\n                    alignSelf: \"center\",\n                    resizeMode: \"contain\",\n                  }}\n                />\n              </ImageBackground>\n            </View>\n          </View>\n          <View style={[styles.cardView]}>\n            <LoginTabBar\n              navigation={navigation}\n              state={state}\n              descriptors={descriptors}\n            />\n            <View style={styles.tabContainerStyle}>\n              {descriptors[state.routes[state.index].key].render()}\n            </View>\n          </View>\n        </ScrollView>\n      </KeyboardAwareScrollView>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst createLoginNavigator = createNavigatorFactory(LoginSignupTabs);\n\nconst LoginStack = createLoginNavigator();\n\nconst LoginScreen = () => {\n  return (\n    <LoginStack.Navigator>\n      <LoginStack.Screen\n        name=\"SignIn\"\n        component={SignInTab}\n        options={{ title: \"Sign In\" }}\n      />\n      <LoginStack.Screen\n        name=\"SignUp\"\n        component={SignupTab}\n        options={{ title: \"Sign Up\" }}\n      />\n    </LoginStack.Navigator>\n  );\n};\n\nconst Stack = createStackNavigator();\n\nconst LoginSignup = () => {\n  return (\n    <Stack.Navigator headerMode=\"none\">\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"PasswordReset\" component={PasswordReset} />\n    </Stack.Navigator>\n  );\n};\n\nexport default {\n  title: \"login\",\n  navigator: LoginSignup,\n  slice: slice,\n};\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "login/package.json": {
        "code": "{\n  \"name\": \"@modules/login\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple login and signup screen with email and password.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {},\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"react-native-keyboard-aware-scroll-view\": \"^0.9.3\",\n    \"@react-navigation/native\": \"^5.9.2\",\n    \"@react-navigation/stack\": \"^5.14.2\"\n  }\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "login/screens/constants.js": {
        "code": "export const LOGO_URL =\n  \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/cb-icon.png\";\nexport const BACKGROUND_URL =\n  \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/halfbg.png\";\nexport const validateEmail = /^[^\\s]+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n// Change here the  name of the screen you want to redirect after Login\nexport const HOME_SCREEN_NAME = \"Onboarding\";\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "login/screens/loginsignup.js": {
        "code": "import React, { useState } from \"react\";\nimport {\n  View,\n  Text,\n  KeyboardAvoidingView,\n  TouchableOpacity,\n  TextInput,\n  ActivityIndicator,\n  Alert,\n} from \"react-native\";\nimport { buttonStyles, textInputStyles, Color } from \"./styles\";\nimport { HOME_SCREEN_NAME, validateEmail } from \"./constants.js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { loginRequest, signupRequest } from \"../auth\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\n\n// Custom Text Input\nexport const TextInputField = (props) => (\n  <View>\n    <Text style={[textInputStyles.label, props.labelStyle]}>{props.label}</Text>\n    <TextInput\n      autoCapitalize=\"none\"\n      style={[textInputStyles.textInput, props.textInputStyle]}\n      placeholderTextColor={Color.steel}\n      underlineColorAndroid={\"transparent\"}\n      {...props}\n    />\n    {!!props.error && <Text style={textInputStyles.error}>{props.error}</Text>}\n  </View>\n);\n\n// Custom Button\nexport const Button = (props) => (\n  <TouchableOpacity onPress={props.onPress} disabled={props.loading}>\n    <View style={[buttonStyles.viewStyle, props.viewStyle]}>\n      {props.loading ? (\n        <ActivityIndicator\n          color={props.loadingColor ? props.loadingColor : Color.white}\n          style={props.loadingStyle}\n        />\n      ) : (\n        <Text style={[buttonStyles.textStyle, props.textStyle]}>\n          {props.title}\n        </Text>\n      )}\n    </View>\n  </TouchableOpacity>\n);\n\n// Signup Component Tab\n\nexport const SignupTab = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [validationError, setValidationError] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const { api } = useSelector((state) => state.login);\n  const dispatch = useDispatch();\n\n  const onSignupPress = async () => {\n    setValidationError({ email: \"\", password: \"\" });\n    if (!validateEmail.test(email))\n      return setValidationError({\n        email: \"Please enter a valid email address.\",\n        password: \"\",\n      });\n\n    if (!password)\n      return setValidationError({\n        email: \"\",\n        password: \"Please enter a valid password\",\n      });\n\n    if (password !== confirmPassword)\n      return setValidationError({\n        email: \"\",\n        password: \"Confirm password and password do not match.\",\n      });\n    dispatch(signupRequest({ email, password }))\n      .then(unwrapResult)\n      .then(() => {\n        Alert.alert(\n          \"Signup Success\",\n          \"Registration Successful. A confirmation will be sent to your e-mail address.\"\n        );\n      })\n      .catch((err) => console.log(err.message));\n  };\n\n  return (\n    <KeyboardAvoidingView>\n      <View style={{ marginVertical: 10, marginHorizontal: 15 }}>\n        <TextInputField\n          keyboardType=\"email-address\"\n          label=\"Email address\"\n          placeholder=\"Email address\"\n          onChangeText={(value) => setEmail(value)}\n          value={email}\n          error={validationError.email}\n        />\n        <TextInputField\n          label=\"Password\"\n          placeholder=\"Password\"\n          secureTextEntry={true}\n          onChangeText={(value) => setPassword(value)}\n          value={password}\n          error={validationError.password}\n        />\n        <TextInputField\n          label=\"Confirm Password\"\n          placeholder=\"Confirm Password\"\n          secureTextEntry={true}\n          onChangeText={(value) => setConfirmPassword(value)}\n          value={confirmPassword}\n        />\n      </View>\n      <Button\n        title=\"Sign Up\"\n        loading={api.loading === \"pending\"}\n        onPress={onSignupPress}\n      />\n      {!!api.error && (\n        <Text style={textInputStyles.error}>{api.error.message}</Text>\n      )}\n    </KeyboardAvoidingView>\n  );\n};\n\nexport const SignInTab = ({ navigation }) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [validationError, setValidationError] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const { api } = useSelector((state) => state.login);\n  const dispatch = useDispatch();\n\n  const onSigninPress = async () => {\n    if (!validateEmail.test(email))\n      return setValidationError({\n        email: \"Please enter a valid email address.\",\n        password: \"\",\n      });\n\n    if (!password)\n      return setValidationError({\n        email: \"\",\n        password: \"Please enter a valid password\",\n      });\n\n    dispatch(loginRequest({ username: email, password }))\n      .then(unwrapResult)\n      .then((res) => {\n        if (res.token) navigation.navigate(HOME_SCREEN_NAME);\n      })\n      .catch((err) => console.log(err.message));\n  };\n\n  return (\n    <KeyboardAvoidingView>\n      <View style={{ marginVertical: 10, marginHorizontal: 15 }}>\n        <TextInputField\n          keyboardType=\"email-address\"\n          label=\"Email address\"\n          placeholder=\"Email address\"\n          onChangeText={(value) => setEmail(value)}\n          value={email}\n          error={validationError.email}\n        />\n        <TextInputField\n          label=\"Password\"\n          placeholder=\"Password\"\n          secureTextEntry={true}\n          onChangeText={(value) => setPassword(value)}\n          value={password}\n          error={validationError.password}\n        />\n      </View>\n\n      <Button\n        title=\"Login\"\n        loading={api.loading === \"pending\"}\n        onPress={onSigninPress}\n      />\n      {!!api.error && (\n        <Text style={textInputStyles.error}>{api.error.message}</Text>\n      )}\n      <View\n        style={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          marginTop: 10,\n        }}\n      >\n        <TouchableOpacity\n          activeOpacity={0.7}\n          onPress={() => {\n            navigation.navigate(\"PasswordReset\");\n          }}\n        >\n          <Text>Forgot your password?</Text>\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n};\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "login/screens/reset.js": {
        "code": "import React, { useState } from \"react\";\nimport {\n  Image,\n  Alert,\n  View,\n  TouchableOpacity,\n  TextInput,\n  Text,\n} from \"react-native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { styles, textInputStyles } from \"./styles\";\nimport { validateEmail, LOGO_URL } from \"./constants.js\";\nimport { resetPassword } from \"../auth\";\n\nconst PasswordRecover = ({ navigation }) => {\n  const [email, setEmail] = useState(\"\");\n  const { api } = useSelector((state) => state.login);\n  const dispatch = useDispatch();\n\n  const handlePasswordReset = () => {\n    if (!validateEmail.test(email))\n      return Alert.alert(\"Error\", \"Please enter a valid email address.\");\n\n    dispatch(resetPassword({ email }))\n      .then(unwrapResult)\n      .then(() => {\n        Alert.alert(\n          \"Password Reset\",\n          \"Password reset link has been sent to your email address\"\n        );\n        navigation.goBack();\n      })\n      .catch((err) => console.log(err.message));\n  };\n\n  const renderImage = () => {\n    const imageSize = {\n      width: 365,\n      height: 161,\n    };\n    return (\n      <Image\n        style={[styles.image, imageSize]}\n        source={{\n          uri: LOGO_URL,\n        }}\n      />\n    );\n  };\n\n  return (\n    <View style={{ flex: 1 }}>\n      <KeyboardAwareScrollView contentContainerStyle={styles.screen}>\n        {renderImage()}\n        <Text style={styles.heading}>{\"Password Recovery\"}</Text>\n        <View style={styles.fieldContainer}>\n          <Text style={styles.label}>Email Address</Text>\n          <TextInput\n            value={email}\n            onChangeText={(value) => setEmail(value)}\n            placeholder=\"eg: yourname@gmail.com\"\n            size=\"small\"\n            style={styles.input}\n            keyboardType=\"email-address\"\n            textStyle={styles.text}\n            autoCapitalize=\"none\"\n          />\n        </View>\n        {!!api.error && (\n          <Text\n            style={[textInputStyles.error, { marginBottom: 10, fontSize: 12 }]}\n          >\n            {api.error.message}\n          </Text>\n        )}\n        <TouchableOpacity\n          disabled={api.loading === \"pending\"}\n          activeOpacity={0.7}\n          style={[styles.actionButon]}\n          onPress={handlePasswordReset}\n        >\n          <Text\n            style={{\n              color: \"#fff\",\n              fontSize: 15,\n            }}\n          >\n            Reset Password\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          activeOpacity={0.7}\n          onPress={() => {\n            navigation.goBack();\n          }}\n        >\n          <Text style={[styles.textRow]}>Back to login?</Text>\n        </TouchableOpacity>\n      </KeyboardAwareScrollView>\n    </View>\n  );\n};\n\nexport default PasswordRecover;\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "login/screens/styles.js": {
        "code": "import { StyleSheet, Dimensions } from \"react-native\";\n\nconst { width, height } = Dimensions.get(\"window\");\n\nconst guidelineBaseWidth = 350;\nconst guidelineBaseHeight = 680;\n\nconst scale = (size) => (width / guidelineBaseWidth) * size;\nconst scaleVertical = (size) => (height / guidelineBaseHeight) * size;\n\nexport const Color = {\n  malibu: \"#46E1FD\",\n  white: \"#fff\",\n  whiteOff: \"#F4F5F9\",\n  steel: \"#CCCCCC\",\n  black: \"#000\",\n  facebook: \"#3b5998\",\n  google: \"#4285F4\",\n  red: \"red\",\n};\n\nexport const styles = StyleSheet.create({\n  screen: {\n    flexDirection: \"column\",\n    backgroundColor: \"white\",\n    justifyContent: \"flex-start\",\n    paddingHorizontal: 26,\n    alignItems: \"center\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    //marginLeft: scale(10), marginRight: scale(10),\n    marginTop: scaleVertical(5),\n    marginBottom: scaleVertical(5),\n    borderRadius: 5,\n    borderColor: \"#95989A\",\n    padding: 5,\n    height: 40,\n    borderWidth: 1,\n    width: \"100%\",\n  },\n  label: {\n    fontWeight: \"bold\",\n    color: \"#979797\",\n  },\n  fieldContainer: {\n    alignItems: \"flex-start\",\n    width: \"100%\",\n    marginTop: scaleVertical(8),\n  },\n  heading: {\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    marginVertical: scaleVertical(25),\n    fontSize: 20,\n    fontFamily: \"Roboto-Bold\",\n    color: \"#707070\",\n  },\n  actionButon: {\n    backgroundColor: Color.malibu,\n    borderWidth: 0,\n    marginLeft: scale(10),\n    marginRight: scale(10),\n    marginTop: scaleVertical(10),\n    marginBottom: scaleVertical(10),\n    borderRadius: 5,\n    height: 44,\n    width: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"row\",\n  },\n  image: {\n    resizeMode: \"contain\",\n    marginBottom: scale(10),\n    marginTop: scaleVertical(63),\n  },\n  textRow: {\n    textAlign: \"center\",\n    color: \"#707070\",\n    fontSize: 14,\n    marginVertical: scaleVertical(5),\n    fontFamily: \"Roboto-Regular\",\n  },\n  boldText: {\n    fontWeight: \"bold\",\n  },\n  text: {\n    color: \"black\",\n    fontSize: 14,\n    paddingVertical: scaleVertical(5),\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: Color.malibu,\n    padding: 10,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: Color.whiteOff,\n  },\n  imageContainer: { marginTop: -20, width: width, height: height / 2 },\n  cardView: {\n    marginTop: -90,\n    marginBottom: 20,\n    marginHorizontal: 20,\n    backgroundColor: Color.white,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    borderRadius: 10,\n    elevation: 3,\n    shadowOffset: { height: 10, width: 10 },\n    shadowOpacity: 0.3,\n    shadowColor: Color.steel,\n  },\n  tabContainerStyle: {\n    marginTop: 5,\n    marginHorizontal: 10,\n    width: \"100%\",\n    elevation: 0,\n    paddingBottom: 20,\n    backgroundColor: Color.white,\n  },\n  activeTabStyle: {\n    borderBottomWidth: 5,\n    borderBottomColor: Color.malibu,\n    paddingBottom: 5,\n  },\n  tabStyle: {\n    width: \"100%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    margin: 10,\n    fontSize: 18,\n  },\n});\n\nexport const buttonStyles = {\n  viewStyle: {\n    backgroundColor: Color.malibu,\n    borderRadius: 5,\n    borderColor: Color.black,\n    justifyContent: \"center\",\n    marginHorizontal: 10,\n    marginBottom: 10,\n    height: 40,\n  },\n  textStyle: {\n    fontSize: 16,\n    textAlign: \"center\",\n    color: Color.white,\n    marginHorizontal: 20,\n    marginVertical: 10,\n  },\n};\n\nexport const textInputStyles = {\n  textInput: {\n    borderColor: Color.steel,\n    borderWidth: 0.5,\n    borderRadius: 5,\n    fontSize: 18,\n    marginVertical: 10,\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    color: Color.black,\n  },\n  label: { color: \"#6A6A6A\", fontSize: 12 },\n  error: { color: Color.red, fontSize: 9, marginLeft: 12 },\n};\n",
        "parentDir": "/modules",
        "newFile": true
      }
    },
    "maps": {
      "maps/README.md": {
        "code": "# Maps\n\n## Setup\n\nUpdate the map's initial location in:\n`modules/maps/index.js`\n\nThis is the default value (San Francisco):\n\n```javascript\nconst region = {\n  latitude: 37.78825,\n  longitude: -122.4324,\n  latitudeDelta: 0.0922,\n  longitudeDelta: 0.0421,\n};\n```\n\n## Android\n\n### Add Google Maps Key\n\nUpdate `android/app/src/main/AndroidManifest.xml` with the following XML meta tags:\n\n```xml\n    <application>\n        <!-- You will only need to add this meta-data tag, but make sure it's a child of application -->\n        <meta-data\n            android:name=\"com.google.android.geo.API_KEY\"\n            android:value=\"Your Google maps API Key Here\"/>\n\n        <!-- You will also only need to add this uses-library tag -->\n        <uses-library android:name=\"org.apache.http.legacy\" android:required=\"false\"/>\n    </application>\n```\n\n## iOS\n\n### Build configuration on iOS\n\n```sh\ncd ios\npod install\n```\n\n### App Store Submission\n\n> The app's Info.plist file must contain a NSLocationWhenInUseUsageDescription with a user-facing purpose string explaining clearly and completely why your app needs the location, otherwise Apple will reject your app submission.\n\n### Enabling Google Maps on iOS\n\nhttps://github.com/react-native-maps/react-native-maps/blob/master/docs/installation.md#enabling-google-maps-on-ios-react-native-all-versions\n\n## Manual Setup\n\nIf you want to use the module directly, or in other modules, you can do so by importing it and using the following properties.\n\n```javascript\nimport Maps from \"@modules/maps\";\n\nconst { title, navigator } = Maps;\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "maps/index.js": {
        "code": "import React from \"react\";\nimport { View } from \"react-native\";\nimport { styles } from './styles'\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\n\nconst Maps = () => {\n  const region = {\n    latitude: 37.78825,\n    longitude: -122.4324,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  }\n\n  return (\n    <View style={styles.view}>\n      <MapView\n        provider={PROVIDER_GOOGLE}\n        style={styles.map}\n        initialRegion={region}\n      />\n    </View>\n  );\n}\n\nexport default {\n  title: \"Maps\",\n  navigator: Maps\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "maps/navigator.js": {
        "code": "import React from 'react';\nimport { SlideMenuIcon } from '../../navigator/slideMenuIcon';\nimport { createStackNavigator } from \"react-navigation-stack\";\n\nimport Maps from \"./index\";\n\nexport default MapsNavigator = createStackNavigator({\n  Maps: {\n    screen: Maps.screen,\n    navigationOptions: ({ navigation }) => ({\n      title: \"Maps\",\n      headerLeft: <SlideMenuIcon navigationProps={navigation} />,\n    }),\n  }\n});\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "maps/package.json": {
        "code": "{\n  \"name\": \"@modules/maps\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Add interactive maps to your mobile app to make it easier for users to find your locations.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {\n    \"react-native-maps\": \"0.27.1\"\n  },\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\"\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "maps/styles.js": {
        "code": "import { StyleSheet } from 'react-native'\n\nimport { Dimensions } from 'react-native';\n\nconst { width, height } = Dimensions.get('window');\n\n// Guideline sizes are based on standard ~5\" screen mobile device\nconst guidelineBaseWidth = 350;\nconst guidelineBaseHeight = 680;\n\nconst scale = size => (width / guidelineBaseWidth) * size;\nconst scaleVertical = size => (height / guidelineBaseHeight) * size;\nconst scaleModerate = (size, factor = 0.5) => size + ((scale(size) - size) * factor);\n\nexport const styles = StyleSheet.create({\n  view: {\n    height: \"100%\"\n  },\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    height: 400,\n    width: 400,\n    justifyContent: \"flex-end\",\n    alignItems: \"center\"\n  },\n  map: {\n    ...StyleSheet.absoluteFillObject\n  },\n  searchbar: {\n    backgroundColor: 'white',\n    marginLeft: scale(10),\n    marginRight: scale(10),\n    marginTop: scaleVertical(5),\n    marginBottom: scaleVertical(5),\n    borderRadius: 12,\n    borderColor: '#E5E5E5',\n  },\n});\n",
        "parentDir": "/modules",
        "newFile": true
      }
    },
    "onboarding": {
      "onboarding/README.md": {
        "code": "# Onboarding Tutorial Screen\n\nThe Onboarding Tutorial Screen is a ReactNative based onboarding screen. It can be configured to have 1 or many\nslide screens with content and expansion detailed in the file.\n\n## Manual Setup\n\nIf you want to use the module directly, or in other modules, you can do so by importing it and using the following properties.\n\n```javascript\nimport Onboarding from \"@modules/onboarding\";\n\nconst { title, navigator } = Maps;\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "onboarding/index.js": {
        "code": "import React from \"react\";\nimport {\n  View,\n  Image,\n  Text,\n  StyleSheet,\n} from \"react-native\";\nimport { slides } from \"./slides\";\nimport AppIntroSlider from 'react-native-app-intro-slider';\n\nconst REDIRECT_SCREEN_NAME = 'LoginAndSignup177769'\n\n\nconst Onboarding = ({ navigation }) =>  {\n\n  const renderItem = ({ item }) => {\n    return (\n      <View style={[styles.slide, { backgroundColor: item.backgroundColor }]}>\n        <Text style={styles.title}>{item.title}</Text>\n        <Image style={styles.image} source={item.image} />\n        <Text style={styles.text}>{item.text}</Text>\n      </View>\n    );\n  }\n\n  const onDone = () => {\n    navigation.navigate(REDIRECT_SCREEN_NAME)\n  }\n\n\n  return (\n    <View style={{ flex: 1, }}>\n      <AppIntroSlider renderItem={renderItem} data={slides} onDone={onDone} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 16,\n  },\n  slide: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 320,\n    height: 320,\n    marginVertical: 32,\n  },\n  text: {\n    color: 'rgba(255, 255, 255, 0.8)',\n    textAlign: 'center',\n  },\n  title: {\n    fontSize: 22,\n    color: 'white',\n    textAlign: 'center',\n  },\n});\n\nexport default {\n  title: 'Onboarding',\n  navigator: Onboarding\n}",
        "parentDir": "/modules",
        "newFile": true
      },
      "onboarding/package.json": {
        "code": "{\n  \"name\": \"@modules/onboarding\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Help your users get started with an onboarding tutorial welcome set of screens.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {},\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"react-native-app-intro-slider\": \"^4.0.4\"\n  }\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "onboarding/slides.js": {
        "code": "export const slides = [\n  {\n    key: 'one',\n    title: 'Title 1',\n    text: 'Description.\\nSay something cool',\n    image: {\n      uri:\n        'https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/cb-icon.png',\n    },\n    backgroundColor: '#59b2ab',\n  },\n  {\n    key: 'two',\n    title: 'Title 2',\n    text: 'Other cool stuff',\n    image: {\n      uri:\n        'https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/cb-icon.png',\n    },\n    backgroundColor: '#febe29',\n  },\n  // {\n  //   key: 'three',\n  //   title: 'Rocket guy',\n  //   text: 'I\\'m already out of descriptions\\n\\nLorem ipsum bla bla bla',\n  //   image: require('./assets/3.jpg'),\n  //   backgroundColor: '#22bcb5',\n  // }\n];\n",
        "parentDir": "/modules",
        "newFile": true
      }
    },
    "privacy-policy": {
      "privacy-policy/README.md": {
        "code": "# Privacy Policy\n\nThe Privacy Policy is a ReactNative based screen that leverages the parallax with a custom header.\n\n### Set the left arrow screen redirect and website link.\n\n`modules/privacy-policy/index.js`\n\nUpdate the value of `PRIVACY_WEBSITE_URL` in `index.js` with the desired website you would like to redirect users to:\n\n```js\nconst PRIVACY_WEBSITE_URL = \"https://www.crowdbotics.com/privacy-policy\";\n```\n\n## Manual Setup\n\nIf you want to use the module directly, or in other modules, you can do so by importing it and using the following properties.\n\n```javascript\nimport PrivacyPolicy from \"@modules/privacy-policy\";\n\nconst { title, navigator } = PrivacyPolicy;\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "privacy-policy/index.js": {
        "code": "import Icon from 'react-native-vector-icons/FontAwesome';\nimport React from 'react';\nimport {\n  View,\n  Image,\n  Text,\n  ImageBackground,\n  TouchableOpacity,\n} from 'react-native';\nimport ParallaxScrollView from 'react-native-parallax-scroll-view';\nimport {styles} from './styles';\nimport {Linking} from 'react-native';\n\nconst PRIVACY_WEBSITE_URL = 'https://www.crowdbotics.com/privacy-policy'\n\nconst PrivacyPolicy = ({ navigation }) => {\n  const privacyText =\n    'PRIVACY POLICY - SAMPLE\\nLast updated November 30, 2020\\n\\n\\nThank you for choosing to be' +\n    ' part of our community at Crowdbotics (“Company”, “we”, “us”' +\n    ', or “our”). We are committed to protecting your personal information and your r' +\n    'ight to privacy. If you have any questions or concerns about our policy, or our ' +\n    'practices with regards to your personal information, please contact us at info' +\n    '@crowdbotics.com.\\n\\n\\nWhen you visit our mobile application, and use our ser' +\n    'vices, you trust us with your personal information. We take your privacy very se' +\n    'riously. In this privacy policy, we seek to explain to you in the clearest way p' +\n    'ossible what information we collect, how we use it and what rights you have in r' +\n    'elation to it. We hope you take some time to read through it carefully, as it is' +\n    ' important. If there are any terms in this privacy policy that you do not agree ' +\n    'with, please discontinue use of our Apps and our services.\\n\\nThis privacy polic' +\n    'y applies to all information collected through our mobile application, (“Apps”),' +\n    ' and/or any related services, sales, marketing or events (we refer to them colle' +\n    'ctively in this privacy policy as the “Services”).\\n\\nPlease read this privacy p' +\n    'olicy carefully as it will help you make informed decisions about sharing your p' +\n    'ersonal information with us.';\n\n  return (\n    <ParallaxScrollView\n      contentBackgroundColor={'#F3F3F3'}\n      renderBackground={() => (\n        <View\n          key=\"background\"\n          style={{\n            paddingBottom: 30,\n            height: 257,\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n          }}>\n          <Image\n            resizeMode={'contain'}\n            style={{\n              height: 115,\n              width: 125,\n            }}\n            source={{\n              uri:\n                'https://d3tklmlrp1a8c2.cloudfront.net/media/project_component_resources/cb-icon.png',\n            }}\n          />\n        </View>\n      )}\n      renderForeground={() => (\n        <ImageBackground\n          source={{\n            uri:\n              'https://d3tklmlrp1a8c2.cloudfront.net/media/project_component_resources/halfbg.png',\n          }}\n          resizeMode={'contain'}\n          style={styles.header}>\n          <TouchableOpacity\n            onPress={() => {\n              navigation.goBack();\n            }}>\n            <Icon\n              style={styles.icon}\n              name={'arrow-left'}\n              size={18}\n              color=\"#fff\"\n            />\n          </TouchableOpacity>\n          <Text style={styles.headerText}>Privacy Policy</Text>\n        </ImageBackground>\n      )}\n      parallaxHeaderHeight={257}>\n      <View style={styles.parallaxHeader}>\n        <View\n          style={{\n            paddingHorizontal: 16,\n          }}>\n          <Text style={styles.parallaxText}>{privacyText}</Text>\n        </View>\n\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity\n            style={styles.button}\n            onPress={() =>\n              Linking.openURL(PRIVACY_WEBSITE_URL)\n            }>\n            <Text style={styles.buttonText}>READ FULL PRIVACY POLICY</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </ParallaxScrollView>\n  );\n};\n\nexport default {\n  title: 'Privacy Policy',\n  navigator: PrivacyPolicy,\n};\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "privacy-policy/package.json": {
        "code": "{\n  \"name\": \"@modules/privacy-policy\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Privacy Policy Screen\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"react-native-parallax-scroll-view\": \"^0.21.3\",\n    \"react-native-cardview\": \"^2.0.5\"\n  },\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\"\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "privacy-policy/styles.js": {
        "code": "import { StyleSheet } from \"react-native\";\n\nimport { DimensionsStyle } from \"./utils\";\n\nexport const styles = StyleSheet.create({\n  parallaxHeader: {\n    flex: 1,\n    flexDirection: \"column\",\n    paddingTop: 15,\n    backgroundColor: \"#F3F3F3\",\n    borderRadius: 30,\n  },\n  parallaxText: {\n    fontFamily: \"Avenir-Medium\",\n    fontSize: 16,\n    textAlign: \"center\",\n    color: \"#8D8D8D\",\n  },\n  header: {\n    height: 290,\n    flex: 1,\n    alignItems: \"flex-start\",\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    paddingHorizontal: 20,\n    position: \"relative\",\n    paddingTop: DimensionsStyle.safeAreaTopHeight + 20,\n  },\n  headerText: {\n    fontSize: 27,\n    color: \"#fff\",\n    fontFamily: \"Avenir-Medium\",\n  },\n  icon: {\n    width: 18,\n    height: 16,\n  },\n  buttonContainer: {\n    paddingHorizontal: 16,\n    alignItems: \"center\",\n    paddingBottom: 50,\n    paddingTop: 60,\n  },\n  button: {\n    borderRadius: 23,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#7AA741\",\n    height: 46,\n    width: 293,\n    marginTop: 10,\n    marginBottom: 50,\n  },\n  buttonText: {\n    fontSize: 15,\n    color: \"#fff\",\n    fontFamily: \"Avenir Heavy\",\n  },\n});\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "privacy-policy/utils.js": {
        "code": "import { Platform } from 'react-native'\n\nexport const DimensionsStyle = {\n  safeAreaTopHeight: Platform.OS === 'ios' ? (isIphoneX() ? 44 : 20) : 0,\n  safeAreaBottomHeight: Platform.OS === 'ios' && isIphoneX() ? 20 : 0,\n  tabBarHeight: Platform.OS === 'ios' ? 17 : 20,\n  bottomAreaHeight: Platform.OS === 'ios' && isIphoneX() ? 34 : 0\n}\n",
        "parentDir": "/modules",
        "newFile": true
      }
    },
    "push-notifications": {
      "push-notifications/README.md": {
        "code": "# Push Notifications\n\n## Introduction\n\nThis modules uses the [OneSignal](https://onesignal.com) service to provide push notifications capabilities to your Android or iOS app.\n\nIt includes the OneSignal SDK for React Native: [`react-native-onesignal`](https://www.npmjs.com/package/react-native-onesignal).\n\n## Gradle setup\n\nAdd the following buildscript at the top of `android/app/build.gradle` file:\n\n```\nbuildscript {\n    repositories {\n        maven { url 'https://plugins.gradle.org/m2/' } // Gradle Plugin Portal\n    }\n    dependencies {\n        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.12.9, 0.99.99]'\n    }\n}\n\napply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'\n```\n\n## Setup\n\n[Requirements](https://documentation.onesignal.com/docs/react-native-sdk-setup#step-1---requirements) overview:\n\n- OneSignal account\n- iOS Push Certificate - for iOS\n- Firebase project - for Android\n\nSetup steps:\n\n1. Create a [OneSignal account](https://onesignal.com) and create a new [One Signal application](https://app.onesignal.com/apps/new).\n\n2. Follow and complete the [Step 4 of the OneSignal documentation](https://documentation.onesignal.com/docs/react-native-sdk-setup#step-4---install-for-ios-using-cocoapods-for-ios-apps). Don't forget to commit and push the changes.\n\n3. Generate an [iOS Push Certificate](https://documentation.onesignal.com/docs/generate-an-ios-push-certificate).\n\n4. Generate a [Firebase Server Key](https://documentation.onesignal.com/docs/generate-a-google-server-api-key).\n\n5. Issue a new test push notification, with immediate delivery, from the [OneSignal Dashboard](https://app.onesignal.com/apps/). Verify it works on your running Android simulator or on a real iOS Device (iOS push notifications can't be tested in a simulator). You will have to provide the `ONE_SIGNAL_APP_ID` env var in your `.env` file with the App ID key obtained from [Keys & IDs](https://documentation.onesignal.com/docs/accounts-and-keys#section-app-id) if you're testing locally in the Android simulator.\n\n6. Add the `ONE_SIGNAL_APP_ID` env var value in your App's [Crowdbotics Dashboard](https://app.crowdbotics.com/dashboard/).\n\n7. Deploy your app.\n\n## Manual Setup\n\nIf you want to use the module directly, or in other modules, you can do so by importing it and using the following properties.\n\n```javascript\nimport PushNotifications from \"@modules/push-notifications\";\n\nconst { title, hook } = PushNotifications;\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "push-notifications/index.js": {
        "code": "import OneSignal from 'react-native-onesignal';\nimport { Platform, Alert } from \"react-native\";\nimport { useState, useEffect } from \"react\";\nimport { ONE_SIGNAL_APP_ID } from \"@env\";\n\nconst useOneSignal = () => {\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  useEffect(() => {\n    async function getDeviceState() {\n      const deviceState = await OneSignal.getDeviceState();\n      setIsSubscribed(deviceState.isSubscribed);\n    }\n    /* O N E S I G N A L   S E T U P */\n    OneSignal.setAppId(ONE_SIGNAL_APP_ID);\n    OneSignal.setLogLevel(6, 0);\n    OneSignal.setRequiresUserPrivacyConsent(false);\n    if (Platform.OS === \"ios\") {\n      OneSignal.promptForPushNotificationsWithUserResponse(response => {\n        console.log(\"Prompt response:\", response);\n      });\n    }\n    /* O N E S I G N A L  H A N D L E R S */\n    OneSignal.setNotificationWillShowInForegroundHandler(notifReceivedEvent => {\n      console.log(\n        \"OneSignal: notification will show in foreground:\",\n        notifReceivedEvent\n      );\n      let notif = notifReceivedEvent.getNotification();\n      const button1 = {\n        text: \"Cancel\",\n        onPress: () => { notifReceivedEvent.complete(); },\n        style: \"cancel\"\n      };\n      const button2 = {\n        text: \"Complete\",\n        onPress: () => {\n          notifReceivedEvent.complete(notif);\n        }\n      };\n      Alert.alert(\n        \"Complete notification?\",\n        \"Test\",\n        [button1, button2],\n        { cancelable: true }\n      );\n    });\n    OneSignal.setNotificationOpenedHandler(notification => {\n      console.log(\"OneSignal: notification opened:\", notification);\n    });\n    OneSignal.setInAppMessageClickHandler(event => {\n      console.log(\"OneSignal IAM clicked:\", event);\n    });\n    OneSignal.addEmailSubscriptionObserver((event) => {\n      console.log(\"OneSignal: email subscription changed: \", event);\n    });\n    OneSignal.addSubscriptionObserver(event => {\n      console.log(\"OneSignal: subscription changed:\", event);\n      setIsSubscribed(event.to.isSubscribed);\n    });\n    OneSignal.addPermissionObserver(event => {\n      console.log(\"OneSignal: permission changed:\", event);\n    });\n    getDeviceState();\n  });\n\n  return isSubscribed;\n}\n\nexport default {\n  title: \"Push Notifications\",\n  hook: useOneSignal\n};\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "push-notifications/package.json": {
        "code": "{\n  \"name\": \"@modules/push-notifications\",\n  \"version\": \"1.0.0\",\n  \"description\": \"TODO\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"x-dependencies\": {\n    \"react-native-onesignal\": \"^4.0.3\"\n  }\n}\n",
        "parentDir": "/modules",
        "newFile": true
      }
    },
    "social-login": {
      "social-login/README.md": {
        "code": "# Social Login - Frontend Module\n\nThis is React Native code for social login feature. For this feature to be fully functional, you will need to install and configure Social Login - Backend module.\n\n## Initial Setup\n\nIn this section, for every mention of `<module_directory>`, consider the directory name of this module installed in your app. For example, if the SocialLogin module has a folder/directory with name `SocialLogin12345`, then that's what you should use to replace `<module_directory>`.\n\nWhen you are finished with the setup, do not forget to commit all changed and created files to the GitHub project, so the module can be successfully deployed on Crowdbotics platform.\n\n#### Install dependencies and setup native files\n\nThis is a summary of the native changes required, but you can explore more details in the Facebook, Google and Apple sections at the end of this documentation.\n\nInstall the dependencies (check the list in the package.json of this directory):\n\n```sh\nyarn add @react-native-google-signin/google-signin react-native-fbsdk@1.1.2 @invertase/react-native-apple-authentication react-native-get-random-values\n```\n\nAdd the plugin on `android/app/build.gradle` (at the end of the file):\n\n```\napply plugin: 'com.google.gms.google-services'\n\n```\n\nAdd the tag on `android/app/src/main/AndroidManifest.xml`:\n\n```\n    <meta-data android:name=\"com.facebook.sdk.ApplicationId\" android:value=\"@string/facebook_app_id\"/>\n```\n\nOn the `android/build.gradle` file:\n\nAdd the following to the `ext` section:\n\n```\n        googlePlayServicesAuthVersion = \"16.0.1\"\n```\n\nAdd the following to the `dependencies` section:\n\n```\n        classpath ('com.google.gms:google-services:4.1.0')\n```\n\nUpdate the file `android/app/src/main/res/values/strings.xml` with the follow string (the value might need to be replaced later): \n\n```\n<string name=\"facebook_app_id\">Your_facebook_id_here</string>\n```\n\n#### Update api url\n\nUpdate the file `<module_directory>/auth/services.js`, replacing the value of `baseURL` with your own app's backend url. For example, if your app is called `my-app` and has a url of `https://my-app.botics.co`, update from\n`baseURL: \"https://your-app-backend.botics.co\"` to `baseURL: \"https://my-app.botics.co\"`\n\nNote for developers: you can access the user token through the reducer state (i.e. `state.login.token` and user auth information like email at `state.login.user`)\n\n\n#### Change the login screen destination to your desired screen/module (likely Home screen).\n\nTo do that, open the `screens/constants.js` file and edit the `HOME_SCREEN_NAME` value with the desired destination module. For example, if my home screen is called `HomeScreen1234535`, then I should change as follows: `export const HOME_SCREEN_NAME = 'HomeScreen1234535'`. If you desire, you can also update your logo image URL (be mindful that the size of the image should match the original ones for ideal results).\n\n#### Make sure your backend support SENDGRID for emailing (optional)\n\nIf your app's backend does not have SENDGRID environmental variables available, make changes to project backend settings (in `/backend/YOUR_PROJECT_NAME/settings.py` file) like below:\n\n```python\nEMAIL_HOST = env.str(\"EMAIL_HOST\", \"smtp.sendgrid.net\")\nEMAIL_HOST_USER = env.str(\"SENDGRID_USERNAME\", \"\")\nEMAIL_HOST_PASSWORD = env.str(\"SENDGRID_PASSWORD\", \"\")\n```\n\nIf this code already exists, you can just skip this step.\n\nNext, you need to configure your own sendgrid credentials. Reference website: [Sendgrid](https://wwww.sendgrid.com)\nOnce configured, add the sendgrid credential information to your project's environment variables.\n\nUsing the Crowdbotics Dashboard, navigate to \"Settings\" and select the tab \"Environment Variables\", here you will add the following variables:\n\n```\nSENDGRID_USERNAME\nSENDGRID_PASSWORD\n```\n\n\n## Old Crowdbotics Scaffold (optional)\nIf your project does not use the latest version of Crowdbotics scaffold 1.0, you might need to consider these manual steps.\nTo verify if your project is on the latest version, look for a `.crowdbotics.json` file at the root of your project. If it does not exist, follow the steps below. If it already exists, you can skip to the `Configuring Facebook` section.\n#### Open the `/src/navigator/mainNavigator.js` file and import the login navigator in the import section as shown:\nIf this module code is at the `modules/` and you are going to move this code to another place within the app, replace the filepath below `\"../../modules/<module_directory>/\"` with desired location:\n\n```js\nimport SocialLogin from \"../../modules/<module_directory>/\";\n```\n\nThen, add it to the AppNavigator, as follows:\n\n```js\nconst AppNavigator = {\n SocialLogin: { screen: SocialLogin.navigator },\n //@BlueprintNavigationInsertion\n...\n```\n\n#### Add reducers to the store. Open `/src/store/index.js` file and add the following imports:\n\n```js\nimport socialLoginSaga from \"../features/<module_directory>/auth/sagas\";\nimport socialLoginReducer from \"../features/<module_directory>/auth/reducers\";\n```\n\nLocate the store creation with `createStore`, add comma at end of the last reducer (possibly `customReducer`) and **ADD** below the following code `socialLogin: socialLoginReducer`.\n\nThis is how your createStore should look like after modifications:\n\n```js\nconst store = createStore(\n  combineReducers({\n    apiReducer: apiReducer,\n    customReducer: customReducer,\n    login: socialLoginReducer,\n  }),\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n```\n\nNear the end, before the `export { store }` line, register the new sagas `sagaMiddleware` like this:\n\n```js\nsagaMiddleware.run(socialLoginSaga);\n```\n\n## Configuring Facebook\n\nYou need to set up Facebook SDK to get social login properly configured in your app. Ideally, these steps should be done by the project owner or with an project owner account, as it needs to be properly configured for app store release, but it can be done with debug configuration during the development phase.\n\nUltimately, you need to follow the [react-native-fbsdk instructions](https://github.com/facebook/react-native-fbsdk#3-configure-projects) to configure your app, but it will be provided steps in this README to accomplish this configuration for a Crowdbotics app.\n\n1. First, access Facebook for developers at https://developers.facebook.com and register for a developer account, if you do not already have one.\n\n2. After that, access the [your facebook apps page](https://developers.facebook.com/apps/) and choose to create a Facebook app. For the purpose of social login, you could choose the `build connected experiences` upon facing the question \"What do you need your app to do?\" and click continue (as shown below). In the next page, type in the name of your app, contact email and, if existing, business manager account for the app and click `Create App`:\n\n![facebook-create-app](https://crowdbotics-slack-dev.s3.amazonaws.com/media/resources/project/18906/15c9063c-6f5d-4afa-a77f-76f75c15e062.png)\n![](https://crowdbotics-slack-dev.s3.amazonaws.com/media/resources/project/18906/ff97ef37-8535-4f4b-958f-def310bf110d.png)\n\n3. After creation, go to your app's dashboard and look for an option to set up a social login product to your app. The url should look like this: `https://developers.facebook.com/apps/<your_facebook_app_id>/fb-login/quickstart/`. There, choose the Android option (for your Android app) and iOS option (for your iOS app configuration).\n\n### Android Configuration\n\nUpon entering the `Android` page on the Facebook login configuration, you can click next/continue for most steps. But you will need to pay attention to the following steps:\n\n- _3. Tell Us about Your Android Project_\n  Here, they will ask for two things: `Package Name` and `Default Activity Class Name`. Your package name is located on `<your_project_name>/android/app/src/main/AndroidManifest.xml` file, at the first and second line of code as `<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"<your_package_name>\">`. For my test app, this name is: `com.social_login_1234`.\n\nFor activity class name, just add a `.MainApplication` to your package name. For example, the tutorial application will have the follwing values:\n\n- Package Name: com.social_login_1234\n- Default Activity Class Name: com.social_login_1234.MainApplication\n\n![](https://crowdbotics-slack-dev.s3.amazonaws.com/media/resources/project/18906/606769e1-f8ac-4712-92e9-ef92455db6ae.png)\n\n- _4. Add Your Development and Release Key Hashes_\n  At this step, you need to generate the key hash for your app. Consult the official documentation for more information on how to create a [development](https://developers.facebook.com/docs/android/getting-started/#create_hash) or [production key hash](https://developers.facebook.com/docs/android/getting-started/#release-key-hash) and insert the appropriate value for your Key Hashes and save.\n\n- _6. Edit Your Resources and Android Manifest_\n  This step will tell you which files in your project to edit. `/app/res/values/strings.xml` is equivalent to `<your_project_name>/android/app/src/main/res/values/strings.xml`\n\nUpdate your Android manifest file (`/android/app/src/main/AndroidManifest.xml`) and add `<meta-data android:name=\"com.facebook.sdk.ApplicationId\" android:value=\"@string/facebook_app_id\"/>` code to the metadata section (if it doesn't already exists). It should look like this:\n\n```xml\n<meta-data\n android:name=\"com.google.android.geo.API_KEY\"\n android:value=\"XXXXXXX\"/>\n <!-- Add this line below:  -->\n<meta-data android:name=\"com.facebook.sdk.ApplicationId\" android:value=\"@string/facebook_app_id\"/>\n\n```\n\nAfter everything, open the file `<your_project_name>/android/app/build.gradle` look for `defaultConfig` object and add `multiDexEnabled true` (if you are on a React Native version older than 0.64). It will look something like this:\n\n```js\n...\n   defaultConfig {\n       applicationId \"com.social_login_test_0_18906\"\n       minSdkVersion rootProject.ext.minSdkVersion\n       targetSdkVersion rootProject.ext.targetSdkVersion\n       versionCode 1\n       versionName \"1.0\"\n       multiDexEnabled true // <- add this here, if it doesnt already exists\n   }\n...\n```\n\n### iOS Configuration (Mac and access to XCode Required)\n\nUpon entering the `Android` page on the Facebook login configuration, there will be a question `Set up your development environment before using Facebook Login for iOS.`. Answer this by picking the dropdown option for `SDK: Cocoapods`. From there, follow the provided instructions. At this step, you should basically change the file `<your_project_name>/ios/Podfile` and add `pod 'FBSDKLoginKit'` and `pod 'FBSDKCoreKit'` after the last pod command and save. It should look like this:\n\n```pod\n...\n pod 'Folly', :podspec => '../node_modules/react-native/third-party-podspecs/Folly.podspec'\n\n pod 'RNVectorIcons', :path => '../node_modules/react-native-vector-icons'\n pod 'FBSDKCoreKit' # <- Add this line HERE\n pod 'FBSDKLoginKit' # <- Add this line HERE\n...\n```\n\nThen, on terminal, navigate to `<your_project_name>/ios/` folder and run:\n\n```sh\npod install\n```\n\nMake sure that you have all the package.json dependencies installed before running the command above (consult the main README.md for the project for more information).\n\nIn the next step `2. Add your Bundle Identifier`, open your project on xcode.\n\n> 1. Go to xcode and choose to open a project\n> 2. Open the `<your-Project_name>/ios/<your_project_name>.xcworkspace` file.\n> 3. Click on your project's name on the left side bar and look for `Bundle identifier`. You can update it to something like com.crowdbotics.<your_app_name>. In this tutorial, our app is named social-login-1234, so our identifier would be com.crowdbotics.social-login-1234. You can update this later.\n\nCopy this value and paste in the Facebook configuration field for bundle ID.\n\nGo to step `4. Configure Your Info.plist` and follow all the instructions.\n\nFinally, open your project again on XCode, find the root folder of the XCode project, click on the right button of your mouse and select to create a `New File`. Choose it to be a `Swift` file and click create, as shown in the images below:\n\n![](https://crowdbotics-slack-dev.s3.amazonaws.com/media/resources/project/19926/da0aa8c8-1779-46d9-8a2e-5e5665d6d15d.png)\n\nXCode will ask about Bridging Folder, just choose the option `Create Bridging Folder`.\nYou are all set up for iOS deployment now!\n\n## Configuring Google Login\n\nSimilarly to Facebook, Google login should ideally be configured in the Google account that is going to manage everything related to this project (usually, the project owner). But for development purposes, it can temporarily be configured by anyone.\n\nBefore anything, open this file in your social login module `/src/features/<your_social_login_module_name>/auth/utils.js` and locate the variable `GOOGLE_WEB_CLIENT_ID` and update its value with the proper backend client id that you previously used to configure your `SocialLogin - Backend` module (Go to admin panel > Social Accounts > Social Applications, choose the Google application and copy the code in the `Client Id` field).\n\nUltimately, you need to follow the [react-native/google-signin instructions](https://github.com/react-native-google-signin/google-signin#project-setup-and-initialization) to configure your app, but it will be provided steps in this README to accomplish this configuration for a Crowdbotics app.\n\n1. Configure your Google Cloud account to access the [console](https://console.developers.google.com/), and to start a quick setup of an API project, visit https://developers.google.com/identity/sign-in/android/start#configure-a-google-api-project and click on `Configure a Project`. Then follow the instructions for each application type below.\n\n### Android Configuration\n\n2. There, you will choose to create a new project (or use an existing one, if desired). Follow the instructions, filling out the product name, choosing `Android` as your OAuth client and filling out the form. There are two values to fill out here: One is your `Package Name` which can be found in your AndroidManifest, as described in the Facebook step; the other is `SHA-1 signing certificate`: to get a debug/development key store, type on your app console:\n\n```\nkeytool -list -v -keystore android/app/debug.keystore -alias androiddebugkey -storepass android -keypass android\n```\n\nRead the [documentation](https://support.google.com/googleapi/answer/6158849?hl=en#installedapplications&android) for more information.\n\n![](https://crowdbotics-slack-dev.s3.amazonaws.com/media/resources/project/18906/2b572e69-9c1d-4fd4-abc0-25a33c6d5ff1.png)\n\nFinish up and `Download Client Configuration` (you will need this information later).\n\n3. Open the file `<your_project_name>/android/app/src/main/res/values/strings.xml` and insert the string with the generated client ID. For example, if the generated client ID on Google is `XXXXX-XXXXXXXX.apps.googleusercontent.com`, then you should add the string and save:\n\n```xml\n<string name=\"server_client_id\">XXXXX-XXXXXXXX.apps.googleusercontent.com</string>\n```\n\n4. Open the `<your_project_name>/android/app/build.gradle` file and find the line of code with `implementation \"com.facebook.react:react-native:+\"`. Below this line, if it doesn't already exist, add the Google signing implementation `implementation(project(\":react-native-community_google-signin\"))` and save. It should look like this:\n\n```js\n...\n   implementation \"com.facebook.react:react-native:+\"\n   implementation(project(\":react-native-community_google-signin\"))\n...\n\n```\n\nAt the very end of the same file, add the line `apply plugin: 'com.google.gms.google-services'`.\n\n5. Now open the file `<your_project_name>/android/build.gradle`, find the `buildscript` object: you will add at the end of the `ext` value a `googlePlayServicesAuthVersion = \"16.0.1\"` and at the end of `dependencies` the value `classpath ('com.google.gms:google-services:4.1.0')`. It should look like this:\n\n```js\nbuildscript {\n   ext {\n       buildToolsVersion = \"29.0.2\"\n       minSdkVersion = 16\n       compileSdkVersion = 29\n       targetSdkVersion = 29\n       googlePlayServicesAuthVersion = \"16.0.1\" // <- For Google Login\n   }\n   repositories {\n       google()\n       jcenter()\n   }\n   dependencies {\n       classpath(\"com.android.tools.build:gradle:3.5.3\")\n       classpath ('com.google.gms:google-services:4.1.0') // <- For Google Login\n   }\n}\n...\n```\n\n### iOS Configuration (Mac and access to XCode Required)\n\nYou can follow the [official documentation](https://github.com/react-native-google-signin/google-signin/blob/master/docs/ios-guide.md#install-google-sign-in-sdk) to configure this, but below, brief steps will be provided.\n\n1. At The google console (as explained in previous steps), create or use an existing Google Project. At the window `Configure your OAuth client`, choose the `iOS` option. Visit XCode and find your Bundle Identifier (as explained at the iOS Facebook tutorial) and click Create. Download your client configuration and save the Client ID for later.\n\n2. Open your project on XCode, double-click in the project name in the left tree view. Select your app from the TARGETS section, then select the `Info` tab, and expand the `URL Types` section. Locate the `+` button and add the REVERSED CLIENT ID as your URL scheme. The reversed client ID is your client ID with the order of the dot-delimited fields reversed. [From the documentation](https://developers.google.com/identity/sign-in/ios/start-integrating#add_a_url_scheme_to_your_project), as an example, if you have a client id as `1234567890-abcdefg.apps.googleusercontent.com`, you should enter in your URL Schemes as `com.googleusercontent.apps.1234567890-abcdefg`.\n\n3. Similarly to Facebook, you will need to add google services to your project's Podfile at `<your_project_name>/ios/Podfile`. You should add the following ` pod 'GoogleSignIn', '~> 5.0.2'`:\n\n```pod\n...\n pod 'Folly', :podspec => '../node_modules/react-native/third-party-podspecs/Folly.podspec'\n\n pod 'RNVectorIcons', :path => '../node_modules/react-native-vector-icons'\n\n  pod 'GoogleSignIn', '~> 5.0.2'# ,_ Add this line HERE\n...\n```\n\nThen, on terminal, navigate to `<your_project_name>/ios/` folder and run:\n\n```sh\npod install\n```\n\n4. Lastly, open the file `src/features/<your_module_folder>/auth/utils.js` inside your installed module and change the value for the variable `GOOGLE_IOS_CLIENT_ID` with your own ios client id.\n\n## Configuring Apple Signin (Apple Developer account, iOS and Xcode required)\n\nTo be able to user signing with apple feature, it is required that you have access to a developer account with access for creating [certificates, identifiers and keys](https://developer.apple.com/support/certificates/). If you already have a Service Identifier, make sure to update your identifier with `Signin with Apple` capability (point e-g below). If you already completed the backend configuration, you can skip steps 1-3 and just make sure to get access to those values (bundle ID, service ID, Key Secret, etc).\n\n1. First, create a app ID at `https://developer.apple.com/account/resources/certificates/list`. Go to `Identifiers`, click on the `+` sign beside Identifiers or click on this page: [Register new identifier](https://developer.apple.com/account/resources/identifiers/add/bundleId).\n   a) Choose App id and click Continue\n   b) Choose App option and continue\n   c) Add your app's name in the `description` field. Add your bundle ID ([bundle identifier](https://developer.apple.com/documentation/appstoreconnectapi/bundle_ids)) that can be found on the XCode page.\n   d) Go to Capabilities and enable.\n   e) Click in the edit button, select `Enable as a primary App ID` and save\n   f) Click continue. Verify all the input information and if everything is correct, click `Register`\n\n2. Now, register for a Service ID.\n   a) Go to the same page as before, but now choose `Service IDs` option.\n   b) Insert your desired description and create an identifier (it could be your bundle ID)\n   c) Enable `Signin with apple` and on clicking `Configure`, choose your Primary App ID.\n   d) There, you will be asked to select your primary App ID (select the one created earlier). Then, add your app's domain to the `Website Urls` section available. Your domain should be the same that you use to access your web app (as was described before). For this tutorial, we have `social-login-1234.botics.co`. Also add a url that looks like `<your_app_domain_url>/accounts/apple/login/callback/`. In the tutorial, we have `https://social-login-1234.botics.co/accounts/apple/login/callback/`.\n   e) Save everything\n   f) Verify if information is correct and click Register.\n\n3. Now go to `Keys` tab and click on `+` to add a new key (or navigate to [Register a New Key](https://developer.apple.com/account/resources/authkeys/add) page).\n   a) Add a name for your key (choose some unique name)\n   b) Enable `Signin with Apple` and click in `Configure` button\n   c) If asked about domains, insert the same values that you did for Service IDs website urls.\n   d) Save everything and **download the generated certificate**.\n\n4. Open your project on XCode, double-click in the project name in the left tree view. Select your app from the TARGETS section, then choose the `Singin & Capabilities` tab. Enable `Automatically manage signing`. For a more visual explanation, visit the [official library tutorial](https://github.com/invertase/react-native-apple-authentication/blob/master/docs/INITIAL_SETUP.md) with screenshots.\n\n### Apple Signin for Android\n\nOpen your the file `src/features/<your_module_name>/auth/utils.js` and update the following constant values:\n\n```js\n// Add the service ID you just created on Apple. e.g.:\nexport const APPLE_SERVICE_ID = \"com.crowdbotics.social-login-1234\";\n// Add below the callback url as <your_app_domain_url>/apple/login/callback/. e.g.:\nexport const APPLE_REDIRECT_CALLBACK =\n  \"https://social-login-1234.botics.co/accounts/apple/login/callback/\";\n```\n\n### Apple Singin for iOS\n\nIf you enabled Signin with Apple on XCode, you are mostly done with Apple signing. Verify if your app is in a iOS version of 13.0 or higher, since this is the version where Apple Singin was introduced. You can do that by both checking your project on XCode in the `General` tab, under `Deployment Info` and searching across your code for `IPHONEOS_DEPLOYMENT_TARGET`, which should be targeted to 13.0 or higher.\n\nHowever, there could be a variety of issues during iOS deployment. Below you will see a list of helpful links to debug possible deployment issues on iOS.\n\n## Acknowledgements\n\nNote that the majority of the configuration here is to help you get started with all social login apps. You will need to properly configure your app further by checking the official documentation for all providers (Google, Facebook and Apple) in order to get your app ready for release and accepted by the app store. Such configurations include:\n\n- Explicitly activating or deacativating Facebook tracking and other Facebook features to be compliant with iOS App Store\n- Changing Facebook app and Google Credentials for release, by updating the SHA-1 key from debug to release and including privacy policy according to their guidelines\n\n## References and Troubleshooting\n\n1. Error when building: [FBSDKCoreKit/FBSDKCoreKit.modulemap' not found](https://github.com/facebook/react-native-fbsdk/issues/780#issuecomment-672754083)\n2. [Official docs for Facebook and iOS](https://developers.facebook.com/docs/facebook-login/ios)\n3. [Official docs for Google and iOS](https://developers.google.com/identity/sign-in/ios)\n4. [Official docs for signin with Apple](https://developer.apple.com/documentation/authenticationservices/implementing_user_authentication_with_sign_in_with_apple)\n5. [AutheorizationError error 1000 when testing on iOS simulator](https://github.com/invertase/react-native-apple-authentication/issues/9#issuecomment-614439405) 6.[Issues with architecture when building on simulator](https://stackoverflow.com/questions/63607158/xcode-12-building-for-ios-simulator-but-linking-in-object-file-built-for-ios)\n6. [React-Native signin with apple library & tutorial](https://github.com/invertase/react-native-apple-authentication/blob/master/docs/INITIAL_SETUP.md)\n7. [iOS Simulator stuck on password input](https://github.com/invertase/react-native-apple-authentication/issues/141)\n8. [DEVELOPER_ERROR when trying to login on appetize, but working locally](https://github.com/react-native-google-signin/google-signin/issues/949#issuecomment-778070056)\n\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.",
        "parentDir": "/modules",
        "newFile": true
      },
      "social-login/auth/api.js": {
        "code": "import axios from \"axios\"\n\nconst BASE_URL = \"https://your-app-backend.botics.co\" // your app back-end url\n\nconst authAPI = axios.create({\n  baseURL: BASE_URL,\n  headers: { Accept: \"application/json\", \"Content-Type\": \"application/json\" }\n})\n\nfunction apiLoginRequest(payload) {\n  return authAPI.post(`/api/v1/login/`, payload)\n}\n\nfunction apiSignupRequest(payload) {\n  return authAPI.post(`/api/v1/signup/`, payload)\n}\n\nfunction apiLogoutRequest(payload) {\n  return authAPI.post(`/rest-auth/logout/`, null, {\n    headers: { Authorization: `Token ${payload.token}` }\n  })\n}\n\nfunction apiAuthUserRequest(payload) {\n  return authAPI.get(`/rest-auth/user/`, null, {\n    headers: { Authorization: `Token ${payload.token}` }\n  })\n}\n\nfunction apiResetPasswordRequest(payload) {\n  return authAPI.post(`/rest-auth/password/reset/`, payload)\n}\n\nfunction apiFacebookLogin(payload) {\n  return authAPI.post(`/modules/social-auth/facebook/login/`, payload)\n}\n\nfunction apiGoogleLogin(payload) {\n  return authAPI.post(`/modules/social-auth/google/login/`, payload)\n}\n\nfunction apiAppleLogin(payload) {\n  return authAPI.post(`/modules/social-auth/apple/login/`, payload)\n}\n\nexport const api = {\n  apiLoginRequest,\n  apiSignupRequest,\n  apiLogoutRequest,\n  apiResetPasswordRequest,\n  apiAuthUserRequest,\n  apiFacebookLogin,\n  apiGoogleLogin,\n  apiAppleLogin\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "social-login/auth/apple.js": {
        "code": "import \"react-native-get-random-values\"\nimport { v4 as uuid } from \"uuid\"\nimport {\n  appleAuthAndroid,\n  appleAuth\n} from \"@invertase/react-native-apple-authentication\"\nimport { APPLE_SERVICE_ID, APPLE_REDIRECT_CALLBACK } from \"./utils\"\n\nexport async function appleForAndroid() {\n  // Generate secure, random values for state and nonce\n  const rawNonce = uuid()\n  const state = uuid()\n\n  // Configure the request\n  appleAuthAndroid.configure({\n    // The Service ID you registered with Apple\n    clientId: APPLE_SERVICE_ID,\n\n    // Return URL added to your Apple dev console. We intercept this redirect, but it must still match\n    // the URL you provided to Apple. It can be an empty route on your backend as it's never called.\n    redirectUri: APPLE_REDIRECT_CALLBACK,\n\n    // The type of response requested - code, id_token, or both.\n    responseType: appleAuthAndroid.ResponseType.ALL,\n\n    // The amount of user information requested from Apple.\n    scope: appleAuthAndroid.Scope.ALL,\n\n    // Random nonce value that will be SHA256 hashed before sending to Apple.\n    nonce: rawNonce,\n\n    // Unique state value used to prevent CSRF attacks. A UUID will be generated if nothing is provided.\n    state\n  })\n\n  // Open the browser window for user sign in\n  try {\n    return await appleAuthAndroid.signIn()\n  } catch (error) {\n    if (error && error.message) {\n      switch (error.message) {\n        // Insert other error treatments here, if necessary\n        case appleAuthAndroid.Error.SIGNIN_CANCELLED:\n          throw new Error(\"The user canceled the signin request.\")\n        default:\n          throw error\n      }\n    }\n  }\n}\n\nexport async function appleForiOS() {\n  try {\n    const appleAuthRequestResponse = await appleAuth.performRequest({\n      requestedOperation: appleAuth.Operation.LOGIN,\n      requestedScopes: [appleAuth.Scope.EMAIL, appleAuth.Scope.FULL_NAME]\n    })\n    // make response return an id_token to match the android version.\n    const response = ({\n      user: newUser,\n      email,\n      nonce,\n      id_token: identityToken,\n      code: authorizationCode\n    } = appleAuthRequestResponse)\n    return response\n  } catch (error) {\n    if (error && error.code === appleAuth.Error.CANCELED) {\n      throw new Error(\"The user canceled the signin request.\")\n    }\n    throw error\n  }\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "social-login/auth/index.js": {
        "code": "import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { mapErrorMessage } from \"./utils\"\nimport { api } from \"./api\"\n\nexport const loginRequest = createAsyncThunk(\n  \"login/loginRequest\",\n  async payload => {\n    const response = await api.apiLoginRequest(payload)\n    return response.data\n  }\n)\n\nexport const signupRequest = createAsyncThunk(\n  \"login/signupRequest\",\n  async payload => {\n    const response = await api.apiSignupRequest(payload)\n    return response.data\n  }\n)\n\nexport const logoutRequest = createAsyncThunk(\n  \"login/logoutRequest\",\n  async payload => {\n    const response = await api.apiLogoutRequest(payload)\n    return response.data\n  }\n)\n\nexport const getAuthUser = createAsyncThunk(\n  \"login/getAuthUser\",\n  async payload => {\n    const response = await api.apiAuthUserRequest(payload)\n    return response.data\n  }\n)\nexport const resetPassword = createAsyncThunk(\n  \"login/resetPassword\",\n  async payload => {\n    const response = await api.apiResetPasswordRequest(payload)\n    return response.data\n  }\n)\n\nexport const facebookLogin = createAsyncThunk(\n  \"login/facebookLogin\",\n  async payload => {\n    const response = await api.apiFacebookLogin(payload)\n    return response.data\n  }\n)\n\nexport const googleLogin = createAsyncThunk(\n  \"login/googleLogin\",\n  async payload => {\n    const response = await api.apiGoogleLogin(payload)\n    return response.data\n  }\n)\nexport const appleLogin = createAsyncThunk(\n  \"login/appleLogin\",\n  async payload => {\n    const response = await api.apiAppleLogin(payload)\n    return response.data\n  }\n)\n\nconst initialState = {\n  token: null,\n  user: {},\n  api: { loading: \"idle\", error: null }\n}\nexport const slice = createSlice({\n  name: \"login\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: {\n    [loginRequest.pending]: state => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\"\n        state.api.error = null\n      }\n    },\n    [loginRequest.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.token = action.payload.token\n        state.user = action.payload.user\n        state.api.loading = \"idle\"\n      }\n    },\n    [loginRequest.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error)\n        state.api.loading = \"idle\"\n      }\n    },\n\n    [signupRequest.pending]: state => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\"\n        state.api.error = null\n        state.token = null\n      }\n    },\n    [signupRequest.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.user = action.payload\n        state.api.loading = \"idle\"\n      }\n    },\n    [signupRequest.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error)\n        state.api.loading = \"idle\"\n      }\n    },\n\n    [logoutRequest.pending]: state => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\"\n        state.api.error = null\n      }\n    },\n    [logoutRequest.fulfilled]: state => {\n      if (state.api.loading === \"pending\") {\n        return initialState\n      }\n    },\n    [logoutRequest.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error)\n        state.api.loading = \"idle\"\n      }\n    },\n    [getAuthUser.pending]: state => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\"\n        state.api.error = null\n      }\n    },\n    [getAuthUser.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.user = action.payload\n        state.api.loading = \"idle\"\n        state.api.error = null\n      }\n    },\n    [getAuthUser.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error)\n        state.api.loading = \"idle\"\n      }\n    },\n\n    [resetPassword.pending]: state => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\"\n        state.api.error = null\n      }\n    },\n    [resetPassword.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.user = action.payload\n        state.api.loading = \"idle\"\n        state.api.error = null\n      }\n    },\n    [resetPassword.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error)\n        state.api.loading = \"idle\"\n      }\n    },\n    [facebookLogin.pending]: state => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\"\n        state.api.error = null\n      }\n    },\n    [facebookLogin.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.user = action.payload.user\n        state.token = actoon.payload.key\n        state.api.error = null\n      }\n    },\n    [facebookLogin.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error)\n        state.api.loading = \"idle\"\n      }\n    },\n    [googleLogin.pending]: state => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\"\n        state.api.error = null\n      }\n    },\n    [googleLogin.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.user = action.payload.user\n        state.token = actoon.payload.key\n        state.api.error = null\n      }\n    },\n    [googleLogin.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error)\n        state.api.loading = \"idle\"\n      }\n    },\n    [appleLogin.pending]: state => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\"\n        state.api.error = null\n      }\n    },\n    [appleLogin.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.user = action.payload.user\n        state.token = actoon.payload.key\n        state.api.error = null\n      }\n    },\n    [appleLogin.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = mapErrorMessage(action.error)\n        state.api.loading = \"idle\"\n      }\n    }\n  }\n})\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "social-login/auth/utils.js": {
        "code": "// Please, update the values below as instructed in the README.md file.\nexport const GOOGLE_WEB_CLIENT_ID = \"XXXXXX.apps.googleusercontent.com\"\nexport const GOOGLE_IOS_CLIENT_ID = \"YYYYYY.apps.googleusercontent.com\"\nexport const APPLE_SERVICE_ID = \"com.crowdbotics.APP_NAME\"\nexport const APPLE_REDIRECT_CALLBACK =\n  \"https://yur-app-here.com/accounts/apple/login/callback/\"\n\n// -----------------------------------------------------\nconst messageMap = {\n  \"Request failed with status code 400\": {\n    code: 400,\n    message: \"Invalid credentials.\"\n  },\n  \"Request failed with status code 403\": {\n    code: 403,\n    message: \"You do not have access to this resource.\"\n  },\n  \"Request failed with status code 500\": {\n    code: 500,\n    message: \"Unexpected Server Error.\"\n  },\n  \"Network Error\": {\n    code: null,\n    message:\n      \"Network Error: It was not possible to establish a connection with the server.\"\n  }\n}\n\nexport const mapErrorMessage = error => {\n  const message = error.message\n  return messageMap[message]\n    ? { ...messageMap[message] }\n    : { code: null, message }\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "social-login/index.js": {
        "code": "import React from \"react\";\nimport {\n  View,\n  ImageBackground,\n  Image,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n} from \"react-native\";\nimport {\n  NavigationHelpersContext,\n  useNavigationBuilder,\n  TabRouter,\n  TabActions,\n  createNavigatorFactory,\n} from \"@react-navigation/native\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { BACKGROUND_URL, LOGO_URL } from \"./screens/constants.js\";\nimport { slice } from \"./auth\";\nimport { styles } from \"./screens/styles\";\nimport { SignInTab, SignupTab } from \"./screens/loginsignup\";\nimport PasswordReset from \"./screens/reset\";\n\nconst LoginTabBar = ({ navigation, state, descriptors }) => {\n  const currentTab = state.routes[state.index];\n  return (\n    <View style={styles.tabStyle}>\n      {state.routes.map((route) => (\n        <View\n          key={route.key}\n          style={route.key == currentTab.key ? styles.activeTabStyle : null}\n        >\n          <TouchableOpacity\n            onPress={() => {\n              const event = navigation.emit({\n                type: \"tabPress\",\n                target: route.key,\n                canPreventDefault: true,\n              });\n              if (!event.defaultPrevented) {\n                navigation.dispatch({\n                  ...TabActions.jumpTo(route.name),\n                  target: state.key,\n                });\n              }\n            }}\n          >\n            <Text style={styles.tabStyle}>\n              {descriptors[route.key].options.title || route.name}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      ))}\n    </View>\n  );\n};\n\nfunction LoginSignupTabs({ initialRouteName, children, screenOptions }) {\n  const { state, navigation, descriptors } = useNavigationBuilder(TabRouter, {\n    children,\n    screenOptions,\n    initialRouteName,\n  });\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <KeyboardAwareScrollView contentContainerStyle={{ flex: 1 }}>\n        <ScrollView style={[styles.container]}>\n          <View style={{ flex: 1 }}>\n            <View style={styles.imageContainer}>\n              <ImageBackground\n                source={{\n                  uri: BACKGROUND_URL,\n                }}\n                style={{\n                  flex: 1,\n                  justifyContent: \"center\",\n                  resizeMode: \"cover\",\n                  height: \"100%\",\n                  width: \"100%\",\n                }}\n              >\n                <Image\n                  source={{\n                    uri: LOGO_URL,\n                  }}\n                  style={{\n                    width: 155,\n                    height: 155,\n                    alignSelf: \"center\",\n                    resizeMode: \"contain\",\n                  }}\n                />\n              </ImageBackground>\n            </View>\n          </View>\n          <View style={[styles.cardView]}>\n            <LoginTabBar\n              navigation={navigation}\n              state={state}\n              descriptors={descriptors}\n            />\n            <View style={styles.tabContainerStyle}>\n              {descriptors[state.routes[state.index].key].render()}\n            </View>\n          </View>\n        </ScrollView>\n      </KeyboardAwareScrollView>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst createLoginNavigator = createNavigatorFactory(LoginSignupTabs);\n\nconst LoginStack = createLoginNavigator();\n\nconst LoginScreen = () => {\n  return (\n    <LoginStack.Navigator>\n      <LoginStack.Screen\n        name=\"SignIn\"\n        component={SignInTab}\n        options={{ title: \"Sign In\" }}\n      />\n      <LoginStack.Screen\n        name=\"SignUp\"\n        component={SignupTab}\n        options={{ title: \"Sign Up\" }}\n      />\n    </LoginStack.Navigator>\n  );\n};\n\nconst Stack = createStackNavigator();\n\nconst LoginSignup = () => {\n  return (\n    <Stack.Navigator headerMode=\"none\">\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"PasswordReset\" component={PasswordReset} />\n    </Stack.Navigator>\n  );\n};\n\nexport default {\n  title: \"login\",\n  navigator: LoginSignup,\n  slice: slice,\n};\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "social-login/package.json": {
        "code": "{\n  \"name\": \"@modules/social-login\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A login and signup screen with options to connect to social accounts.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {},\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@react-native-google-signin/google-signin\": \"^6.0.0\",\n    \"react-native-fbsdk\": \"1.1.2\",\n    \"react-native-keyboard-aware-scroll-view\": \"^0.9.3\",\n    \"@invertase/react-native-apple-authentication\": \"^2.1.0\",\n    \"@react-navigation/native\": \"^5.9.2\",\n    \"@react-navigation/stack\": \"^5.14.2\",\n    \"uuid\": \"^8.3.2\",\n    \"react-native-get-random-values\": \"^1.6.0\"\n\n  }\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "social-login/screens/constants.js": {
        "code": "export const LOGO_URL =\n  \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/cb-icon.png\"\nexport const BACKGROUND_URL =\n  \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/halfbg.png\"\nexport const validateEmail = /^[^\\s]+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\n\n// Change here the  name of the screen on navigator you want to redirect after Login\nexport const HOME_SCREEN_NAME = \"Onboarding\"\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "social-login/screens/loginsignup.js": {
        "code": "import React, { useState } from \"react\"\nimport {\n  View,\n  Text,\n  KeyboardAvoidingView,\n  TouchableOpacity,\n  TextInput,\n  ActivityIndicator,\n  Alert,\n  Platform\n} from \"react-native\"\nimport {\n  AppleButton,\n  appleAuthAndroid\n} from \"@invertase/react-native-apple-authentication\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { HOME_SCREEN_NAME, validateEmail } from \"./constants\"\nimport { buttonStyles, textInputStyles, Color } from \"./styles\"\nimport {\n  GoogleSigninButton,\n  GoogleSignin,\n  statusCodes\n} from \"@react-native-google-signin/google-signin\"\nimport { LoginManager, AccessToken } from \"react-native-fbsdk\"\nimport { GOOGLE_WEB_CLIENT_ID, GOOGLE_IOS_CLIENT_ID } from \"../auth/utils\"\nimport { appleForAndroid, appleForiOS } from \"../auth/apple\"\nimport {\n  loginRequest,\n  signupRequest,\n  facebookLogin,\n  googleLogin,\n  appleLogin\n} from \"../auth\"\nimport { unwrapResult } from \"@reduxjs/toolkit\"\n\n// Custom Text Input\nexport const TextInputField = props => (\n  <View>\n    <Text style={[textInputStyles.label, props.labelStyle]}>{props.label}</Text>\n    <TextInput\n      autoCapitalize=\"none\"\n      style={[textInputStyles.textInput, props.textInputStyle]}\n      placeholderTextColor={Color.steel}\n      underlineColorAndroid={\"transparent\"}\n      {...props}\n    />\n    {!!props.error && <Text style={textInputStyles.error}>{props.error}</Text>}\n  </View>\n)\n\n// Custom Button\nexport const Button = props => (\n  <TouchableOpacity onPress={props.onPress} disabled={props.loading}>\n    <View style={[buttonStyles.viewStyle, props.viewStyle]}>\n      {props.loading ? (\n        <ActivityIndicator\n          color={props.loadingColor ? props.loadingColor : Color.white}\n          style={props.loadingStyle}\n        />\n      ) : (\n        <Text style={[buttonStyles.textStyle, props.textStyle]}>\n          {props.title}\n        </Text>\n      )}\n    </View>\n  </TouchableOpacity>\n)\n\n// Grouped Social Buttons View\nconst SocialButtonsView = props => (\n  <View>\n    <Text style={{ textAlign: \"center\", width: \"100%\", marginVertical: 5 }}>\n      - or -\n    </Text>\n    <Button\n      title=\"Signin with Facebook\"\n      viewStyle={{\n        backgroundColor: Color.facebook,\n        borderColor: Color.facebook,\n        marginHorizontal: 5,\n        marginBottom: 2\n      }}\n      textStyle={{ color: Color.white }}\n      loading={props.loading}\n      onPress={props.onFacebookConnect}\n    />\n    <GoogleSigninButton\n      onPress={props.onGoogleConnect}\n      size={GoogleSigninButton.Size.Wide}\n      color={GoogleSigninButton.Color.Dark}\n      disabled={props.loading}\n      style={{ width: \"99%\", height: 48, marginHorizontal: 2 }}\n    />\n    {(Platform.OS === \"ios\" || appleAuthAndroid.isSupported) && (\n      <AppleButton\n        onPress={props.onAppleConnect}\n        buttonStyle={AppleButton.Style.WHITE_OUTLINE}\n        buttonType={AppleButton.Type.SIGN_IN}\n        style={{\n          width: \"97%\", // You must specify a width\n          height: 44, // You must specify a height\n          marginHorizontal: 5,\n          marginTop: 2\n        }}\n      />\n    )}\n  </View>\n)\n\nconst onFacebookConnect = async dispatch => {\n  try {\n    const fb_result = await LoginManager.logInWithPermissions([\n      \"public_profile\",\n      \"email\"\n    ])\n    if (!fb_result.isCancelled) {\n      const data = await AccessToken.getCurrentAccessToken()\n      dispatch(facebookLogin({ access_token: data.accessToken }))\n        .then(unwrapResult)\n        .then(res => {\n          if (res.key) navigation.navigate(HOME_SCREEN_NAME)\n        })\n    }\n  } catch (err) {\n    console.log(\"Facebook Login Failed: \", JSON.stringify(err))\n  }\n}\n\nconst onGoogleConnect = async dispatch => {\n  GoogleSignin.configure({\n    webClientId: GOOGLE_WEB_CLIENT_ID, // client ID of type WEB for your server\n    offlineAccess: true, // if you want to access Google API on behalf of the user FROM YOUR SERVER\n    forceCodeForRefreshToken: false,\n    iosClientId: GOOGLE_IOS_CLIENT_ID\n  })\n  try {\n    await GoogleSignin.hasPlayServices()\n    await GoogleSignin.signIn()\n    const tokens = await GoogleSignin.getTokens()\n    dispatch(googleLogin({ access_token: tokens.accessToken }))\n      .then(unwrapResult)\n      .then(res => {\n        if (res.key) navigation.navigate(HOME_SCREEN_NAME)\n      })\n  } catch (err) {\n    if (err.code === statusCodes.SIGN_IN_CANCELLED) {\n      Alert.alert(\"Error\", \"The user canceled the signin request.\")\n    }\n  }\n}\n\nconst onAppleConnect = async dispatch => {\n  try {\n    const signinFunction = Platform.select({\n      ios: appleForiOS,\n      android: appleForAndroid\n    })\n    const result = await signinFunction()\n    dispatch(\n      appleLogin({ id_token: result.id_token, access_token: result.code })\n    )\n      .then(unwrapResult)\n      .then(res => {\n        if (res.key) navigation.navigate(HOME_SCREEN_NAME)\n      })\n  } catch (err) {\n    console.log(JSON.stringify(err))\n  }\n}\n\nexport const SignupTab = () => {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\n  const [validationError, setValidationError] = useState({\n    email: \"\",\n    password: \"\"\n  })\n\n  const { api } = useSelector(state => state.login)\n  const dispatch = useDispatch()\n\n  const onSignupPress = async () => {\n    setValidationError({ email: \"\", password: \"\" })\n    if (!validateEmail.test(email))\n      return setValidationError({\n        email: \"Please enter a valid email address.\",\n        password: \"\"\n      })\n\n    if (!password)\n      return setValidationError({\n        email: \"\",\n        password: \"Please enter a valid password\"\n      })\n\n    if (password !== confirmPassword)\n      return setValidationError({\n        email: \"\",\n        password: \"Confirm password and password do not match.\"\n      })\n    dispatch(signupRequest({ email, password }))\n      .then(unwrapResult)\n      .then(() => {\n        Alert.alert(\n          \"Signup Success\",\n          \"Registration Successful. A confirmation will be sent to your e-mail address.\"\n        )\n      })\n      .catch(err => console.log(err.message))\n  }\n\n  return (\n    <KeyboardAvoidingView>\n      <View style={{ marginVertical: 10, marginHorizontal: 15 }}>\n        <TextInputField\n          keyboardType=\"email-address\"\n          label=\"Email address\"\n          placeholder=\"Email address\"\n          onChangeText={value => setEmail(value)}\n          value={email}\n          error={validationError.email}\n        />\n        <TextInputField\n          label=\"Password\"\n          placeholder=\"Password\"\n          secureTextEntry={true}\n          onChangeText={value => setPassword(value)}\n          value={password}\n          error={validationError.password}\n        />\n        <TextInputField\n          label=\"Confirm Password\"\n          placeholder=\"Confirm Password\"\n          secureTextEntry={true}\n          onChangeText={value => setConfirmPassword(value)}\n          value={confirmPassword}\n        />\n      </View>\n      <Button\n        title=\"Sign Up\"\n        loading={api.loading === \"pending\"}\n        onPress={onSignupPress}\n      />\n      <SocialButtonsView\n        loading={api.loading === \"pending\"}\n        onFacebookConnect={() => onFacebookConnect(dispatch)}\n        onGoogleConnect={() => onGoogleConnect(dispatch)}\n        onAppleConnect={() => onAppleConnect(dispatch)}\n      />\n      {!!api.error && (\n        <Text style={textInputStyles.error}>{api.error.message}</Text>\n      )}\n    </KeyboardAvoidingView>\n  )\n}\n\nexport const SignInTab = ({ navigation }) => {\n  const [email, setEmail] = useState(\"\")\n  const [password, setPassword] = useState(\"\")\n  const [validationError, setValidationError] = useState({\n    email: \"\",\n    password: \"\"\n  })\n\n  const { api } = useSelector(state => state.login)\n  const dispatch = useDispatch()\n\n  const onSigninPress = async () => {\n    if (!validateEmail.test(email))\n      return setValidationError({\n        email: \"Please enter a valid email address.\",\n        password: \"\"\n      })\n\n    if (!password)\n      return setValidationError({\n        email: \"\",\n        password: \"Please enter a valid password\"\n      })\n\n    dispatch(loginRequest({ username: email, password }))\n      .then(unwrapResult)\n      .then(res => {\n        if (res.token) navigation.navigate(HOME_SCREEN_NAME)\n      })\n      .catch(err => console.log(err.message))\n  }\n\n  return (\n    <KeyboardAvoidingView>\n      <View style={{ marginVertical: 10, marginHorizontal: 15 }}>\n        <TextInputField\n          keyboardType=\"email-address\"\n          label=\"Email address\"\n          placeholder=\"Email address\"\n          onChangeText={value => setEmail(value)}\n          value={email}\n          error={validationError.email}\n        />\n        <TextInputField\n          label=\"Password\"\n          placeholder=\"Password\"\n          secureTextEntry={true}\n          onChangeText={value => setPassword(value)}\n          value={password}\n          error={validationError.password}\n        />\n      </View>\n\n      <Button\n        title=\"Login\"\n        loading={api.loading === \"pending\"}\n        onPress={onSigninPress}\n      />\n\n      {!!api.error && (\n        <Text style={textInputStyles.error}>{api.error.message}</Text>\n      )}\n      <View\n        style={{\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          marginTop: 10\n        }}\n      >\n        <TouchableOpacity\n          activeOpacity={0.7}\n          onPress={() => {\n            navigation.navigate(\"PasswordReset\")\n          }}\n        >\n          <Text>Forgot your password?</Text>\n        </TouchableOpacity>\n      </View>\n      <SocialButtonsView\n        loading={api.loading === \"pending\"}\n        onFacebookConnect={() => onFacebookConnect(dispatch)}\n        onGoogleConnect={() => onGoogleConnect(dispatch)}\n        onAppleConnect={() => onAppleConnect(dispatch)}\n      />\n    </KeyboardAvoidingView>\n  )\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "social-login/screens/reset.js": {
        "code": "import React, { useState } from \"react\"\nimport {\n  Image,\n  Alert,\n  View,\n  TouchableOpacity,\n  TextInput,\n  Text\n} from \"react-native\"\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { unwrapResult } from \"@reduxjs/toolkit\"\nimport { styles, textInputStyles } from \"./styles\"\nimport { validateEmail, LOGO_URL } from \"./constants.js\"\nimport { resetPassword } from \"../auth\"\n\nconst PasswordRecover = ({ navigation }) => {\n  const [email, setEmail] = useState(\"\")\n  const { api } = useSelector(state => state.login)\n  const dispatch = useDispatch()\n\n  const handlePasswordReset = () => {\n    if (!validateEmail.test(email))\n      return Alert.alert(\"Error\", \"Please enter a valid email address.\")\n\n    dispatch(resetPassword({ email }))\n      .then(unwrapResult)\n      .then(() => {\n        Alert.alert(\n          \"Password Reset\",\n          \"Password reset link has been sent to your email address\"\n        )\n        navigation.goBack()\n      })\n      .catch(err => console.log(err.message))\n  }\n\n  const renderImage = () => {\n    const imageSize = {\n      width: 365,\n      height: 161\n    }\n    return (\n      <Image\n        style={[styles.image, imageSize]}\n        source={{\n          uri: LOGO_URL\n        }}\n      />\n    )\n  }\n\n  return (\n    <View style={{ flex: 1 }}>\n      <KeyboardAwareScrollView contentContainerStyle={styles.screen}>\n        {renderImage()}\n        <Text style={styles.heading}>{\"Password Recovery\"}</Text>\n        <View style={styles.fieldContainer}>\n          <Text style={styles.label}>Email Address</Text>\n          <TextInput\n            value={email}\n            onChangeText={value => setEmail(value)}\n            placeholder=\"eg: yourname@gmail.com\"\n            size=\"small\"\n            style={styles.input}\n            keyboardType=\"email-address\"\n            textStyle={styles.text}\n            autoCapitalize=\"none\"\n          />\n        </View>\n        {!!api.error && (\n          <Text\n            style={[textInputStyles.error, { marginBottom: 10, fontSize: 12 }]}\n          >\n            {api.error.message}\n          </Text>\n        )}\n        <TouchableOpacity\n          disabled={api.loading === \"pending\"}\n          activeOpacity={0.7}\n          style={[styles.actionButon]}\n          onPress={handlePasswordReset}\n        >\n          <Text\n            style={{\n              color: \"#fff\",\n              fontSize: 15\n            }}\n          >\n            Reset Password\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          activeOpacity={0.7}\n          onPress={() => {\n            navigation.goBack()\n          }}\n        >\n          <Text style={[styles.textRow]}>Back to login?</Text>\n        </TouchableOpacity>\n      </KeyboardAwareScrollView>\n    </View>\n  )\n}\n\nexport default PasswordRecover\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "social-login/screens/styles.js": {
        "code": "import { StyleSheet, Dimensions } from \"react-native\"\n\nconst { width, height } = Dimensions.get(\"window\")\n\nconst guidelineBaseWidth = 350\nconst guidelineBaseHeight = 680\n\nconst scale = size => (width / guidelineBaseWidth) * size\nconst scaleVertical = size => (height / guidelineBaseHeight) * size\n\nexport const Color = {\n  malibu: \"#46E1FD\",\n  white: \"#fff\",\n  whiteOff: \"#F4F5F9\",\n  steel: \"#CCCCCC\",\n  black: \"#000\",\n  facebook: \"#3b5998\",\n  google: \"#4285F4\",\n  red: \"red\"\n}\n\nexport const styles = StyleSheet.create({\n  screen: {\n    flexDirection: \"column\",\n    backgroundColor: \"white\",\n    justifyContent: \"flex-start\",\n    paddingHorizontal: 26,\n    alignItems: \"center\"\n  },\n  input: {\n    backgroundColor: \"white\",\n    //marginLeft: scale(10), marginRight: scale(10),\n    marginTop: scaleVertical(5),\n    marginBottom: scaleVertical(5),\n    borderRadius: 5,\n    borderColor: \"#95989A\",\n    padding: 5,\n    height: 40,\n    borderWidth: 1,\n    width: \"100%\"\n  },\n  label: {\n    fontWeight: \"bold\",\n    color: \"#979797\"\n  },\n  fieldContainer: {\n    alignItems: \"flex-start\",\n    width: \"100%\",\n    marginTop: scaleVertical(8)\n  },\n  heading: {\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    marginVertical: scaleVertical(25),\n    fontSize: 20,\n    fontFamily: \"Roboto-Bold\",\n    color: \"#707070\"\n  },\n  actionButon: {\n    backgroundColor: Color.malibu,\n    borderWidth: 0,\n    marginLeft: scale(10),\n    marginRight: scale(10),\n    marginTop: scaleVertical(10),\n    marginBottom: scaleVertical(10),\n    borderRadius: 5,\n    height: 44,\n    width: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"row\"\n  },\n  image: {\n    resizeMode: \"contain\",\n    marginBottom: scale(10),\n    marginTop: scaleVertical(63)\n  },\n  logo: {\n    width: 155,\n    height: 155,\n    alignSelf: \"center\",\n    resizeMode: \"contain\"\n  },\n  imageBackground: {\n    flex: 1,\n    justifyContent: \"center\",\n    resizeMode: \"cover\",\n    height: \"100%\",\n    width: \"100%\"\n  },\n  textRow: {\n    textAlign: \"center\",\n    color: \"#707070\",\n    fontSize: 14,\n    marginVertical: scaleVertical(5),\n    fontFamily: \"Roboto-Regular\"\n  },\n  boldText: {\n    fontWeight: \"bold\"\n  },\n  text: {\n    color: \"black\",\n    fontSize: 14,\n    paddingVertical: scaleVertical(5)\n  },\n  button: {\n    alignItems: \"center\",\n    backgroundColor: Color.malibu,\n    padding: 10\n  },\n  container: {\n    flex: 1,\n    backgroundColor: Color.whiteOff\n  },\n  imageContainer: { marginTop: -20, width: width, height: height / 2 },\n  cardView: {\n    marginTop: -90,\n    marginBottom: 20,\n    marginHorizontal: 20,\n    backgroundColor: Color.white,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    borderRadius: 10,\n    elevation: 3,\n    shadowOffset: { height: 10, width: 10 },\n    shadowOpacity: 0.3,\n    shadowColor: Color.steel\n  },\n  tabContainerStyle: {\n    marginTop: 5,\n    marginHorizontal: 10,\n    width: \"100%\",\n    elevation: 0,\n    paddingBottom: 20,\n    backgroundColor: Color.white\n  },\n  activeTabStyle: {\n    borderBottomWidth: 5,\n    borderBottomColor: Color.malibu,\n    paddingBottom: 5\n  },\n  tabStyle: {\n    width: \"100%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    margin: 10,\n    fontSize: 18\n  }\n})\n\nexport const buttonStyles = {\n  viewStyle: {\n    backgroundColor: Color.malibu,\n    borderRadius: 5,\n    borderColor: Color.black,\n    justifyContent: \"center\",\n    marginHorizontal: 10,\n    marginBottom: 10,\n    height: 40\n  },\n  textStyle: {\n    fontSize: 16,\n    textAlign: \"center\",\n    color: Color.white,\n    marginHorizontal: 20,\n    marginVertical: 10\n  }\n}\n\nexport const textInputStyles = {\n  textInput: {\n    borderColor: Color.steel,\n    borderWidth: 0.5,\n    borderRadius: 5,\n    fontSize: 18,\n    marginVertical: 10,\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    color: Color.black\n  },\n  label: { color: \"#6A6A6A\", fontSize: 12 },\n  error: { color: Color.red, fontSize: 9, marginLeft: 12 }\n}\n",
        "parentDir": "/modules",
        "newFile": true
      }
    },
    "splash": {
      "splash/README.md": {
        "code": "# Splash Screen\n\nThe Splash Screen is a React Native based splash screen, by that means, it truly isn't executed until after the app\nis fully loaded. If it's desired to appear during load, you will need to build a native screen in both Android and iOS directories of the project.\n\n## Manual Setup\n\nIf you want to use the module directly, or in other modules, you can do so by importing it and using the following properties.\n\n```javascript\nimport Splash from \"@modules/splash\";\n\nconst { title, navigator } = Splash;\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "splash/index.js": {
        "code": "import React, { useEffect } from \"react\"\nimport { View, StyleSheet, Image } from \"react-native\"\n\nconst NEXT_SCREEN_NAME = \"TermsAndConditions\"\n\nconst Splash = ({ navigation }) => {\n  useEffect(() => {\n    setTimeout(() => {\n      navigation.navigate(NEXT_SCREEN_NAME)\n    }, 3000)\n  }, [])\n\n  return (\n    <View style={styles.container}>\n      <Image\n        resizeMode=\"cover\"\n        style={styles.image}\n        source={{\n          uri:\n            \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/resources/project/20577/3d82cb85-9133-48e4-bb4a-a1c8dd140bc4.png\"\n        }}\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#FFF\"\n  },\n  image: { width: \"100%\", height: '100%' }\n})\n\nexport default {\n  title: \"SplashScreen\",\n  navigator: Splash\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "splash/package.json": {
        "code": "{\n  \"name\": \"@modules/splash\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Greet your users with an image or logo.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {},\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {}\n}\n",
        "parentDir": "/modules",
        "newFile": true
      }
    },
    "terms-and-conditions": {
      "terms-and-conditions/README.md": {
        "code": "# Terms & Conditions Screen\n\nThe Terms and Conditions Screen is a React Native based screen that renders terms and conditions with a simple header.\n\n## Manual Setup\n\nIf you want to use the module directly, or in other modules, you can do so by importing it and using the following properties.\n\n```javascript\nimport TermsAndConditions from \"@modules/terms-and-conditions\";\n\nconst { title, navigator } = TermsAndConditions;\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "terms-and-conditions/content.js": {
        "code": "export const htmlContent = `TERMS & CONDITIONS - SAMPLE\nCROWDBOTICS CORPORATION SOFTWARE AND SERVICES TERMS OF USE\nLast updated June 12, 2020\n\nBY ACCEPTING THESE TERMS, BY (1) CLICKING A BOX OR BUTTON INDICATING ACCEPTANCE, (2) EXECUTING AN ORDER FORM THAT REFERENCES THESE TERMS, OR (3) USING A FREE PRODUCT, YOU AGREE TO THESE TERMS. IF YOU REGISTER FOR CROWDBOTICS’ FREE PRODUCT, THE APPLICABLE PROVISIONS OF THESE TERMS WILL ALSO GOVERN THAT FREE PRODUCT.  IF THE INDIVIDUAL ACCEPTING THESE TERMS IS ACCEPTING ON BEHALF OF A COMPANY OR OTHER LEGAL ENTITY, SUCH INDIVIDUAL REPRESENTS THAT THEY HAVE THE AUTHORITY TO BIND SUCH ENTITY AND ITS AFFILIATES TO THESE TERMS, IN WHICH CASE THE TERM “YOU” REFERS TO SUCH ENTITY AND ITS AFFILIATES. IF THE INDIVIDUAL ACCEPTING THESE TERMS DOES NOT HAVE SUCH AUTHORITY, OR DOES NOT AGREE WITH THESE TERMS, SUCH INDIVIDUAL MUST NOT ACCEPT THESE TERMS AND MAY NOT USE THE PLATFORM.\n\n1. PLATFORM.\n\nSubject to the terms and conditions of these Terms, Crowdbotics grants you during the Term (defined below) a limited, non-exclusive, non-transferable, non-sublicenseable right to access and use the Crowdbotics website, software development platform, engineering workforce and module library (collectively, the “Platform”) for the purpose of managing, hosting, developing, launching, and analyzing your proprietary software applications (“Apps”).\n\n\n2. PROFESSIONAL SERVICES.\n\nSubject to the terms and conditions of these Terms, Crowdbotics will perform the professional engineering, design, or product management services set forth on an Order Form or as otherwise requested through the Platform, which may include managed use of the Platform by Crowdbotics on your behalf (“Services”).  The manner and means by which Crowdbotics chooses to complete the Services are in Crowdbotics’ sole discretion and control. Crowdbotics’ obligations to provide the Services are conditioned upon receiving such information and cooperation from you as may be reasonably necessary to perform the Services.\n\n\n3. RESTRICTIONS.\n\nThe rights granted to you in these Terms are subject to the following restrictions: (a) you may not license, sell, rent, lease, transfer, assign, distribute, host, or otherwise commercially exploit the Platform, whether in whole or in part, or any content displayed on the Platform; (b) you may not modify, make derivative works of, disassemble, reverse compile or reverse engineer any part of the Platform; and (c) except as expressly stated herein, no part of the Platform may be copied, reproduced, distributed, republished, downloaded, displayed, posted or transmitted in any form or by any means.  Unless otherwise indicated, any future release, update, or other addition to functionality of the Platform is subject to these Terms.  Unless otherwise specified on the Platform, all copyright and other proprietary notices on the Platform (or on any content displayed on the Platform) must be retained on all copies thereof.\n\n\n4. YOUR RESPONSIBILITIES.\n\nYou will (a) be responsible for your authorized users’ (“Users”) compliance with these Terms and Order Forms, (b) be responsible for the accuracy, quality and legality of User Content (defined below), (c) be responsible for your use of your Apps (including any Invention and any Prior Invention or Reusable Module (each defined below) incorporated into an Invention) and the interoperation of your App with any third party application, (d) use commercially reasonable efforts to prevent unauthorized access to or use of Platform, and notify Crowdbotics promptly of any such unauthorized access or use, and (e) use the Platform and Services only in accordance with these Terms and applicable laws and government regulations. Any use of the Platform in breach of the foregoing by you or Users that in Crowdbotics’ judgment threatens the security, integrity or availability of Crowdbotics’ services, may result in Crowdbotics’ immediate suspension of the Platform, however Crowdbotics will use commercially reasonable efforts under the circumstances to provide you with notice and an opportunity to remedy such violation or threat prior to any such suspension.\n\n\n5. ACCOUNTS.\n\na. Registration. In order to use certain features of the Platform, you must register for an account (“Account”) and provide certain information about yourself as prompted by the account registration form.  You represent and warrant that: (i) all required registration information you submit is truthful and accurate; (ii) you will maintain the accuracy of such information. You may delete your Account at any time, for any reason, by following the instructions on the Platform.  Crowdbotics may suspend or terminate your Account in accordance with Section 9.\nb. Responsibilities. You are responsible for maintaining the confidentiality of your Account login information and are fully responsible for all activities that occur under your Account.  You agree to immediately notify Crowdbotics of any unauthorized use, or suspected unauthorized use of your Account or any other breach of security.  Crowdbotics cannot and will not be liable for any loss or damage arising from your failure to comply with the above requirements.\n\n\n6. USER CONTENT.\n\n“User Content” means any and all information and content that you submit to the Platform (e.g., Materials (defined below) that you submit to the Platform).  You are solely responsible for your User Content.  You assume all risks associated with use of your User Content, including any reliance on its accuracy, completeness or usefulness by others, or any disclosure of your User Content that personally identifies you or any third party.  You represent and warrant that your User Content does not violate Crowdbotics’ Acceptable Use Policy (set forth below).  You may not represent or imply to others that your User Content is in any way provided, sponsored or endorsed by Crowdbotics.  Because you alone are responsible for your User Content, you may expose yourself to liability if, for example, your User Content violates the Acceptable Use Policy.\n\n\n7. OWNERSHIP.\n\na. Platform. Crowdbotics retains all rights in the Platform, except as expressly set forth in these Terms.\nb. Apps. You own your Apps, subject to the terms and conditions of these Terms.\nc. Inventions.  All rights in and to any copyrightable software, algorithm, code, material, notes, records, drawings, designs, inventions, improvements, developments, discoveries and trade secrets (“Materials”) conceived, discovered, authored, invented, developed or reduced to practice by Crowdbotics, solely or in collaboration with others, during the Term and arising out of, or in connection with, performing the Services under these Terms and any copyrights, patents, trade secrets, mask work rights or other intellectual property rights relating to the foregoing (collectively, but excluding Prior Inventions and Reusable Modules “Inventions”), are your sole property. Crowdbotics will promptly disclose any Invention to you in writing and will deliver and assign (or cause to be assigned) and hereby assigns fully to you all right, title and interest in and to the Inventions. Crowdbotics will reasonably assist you to further evidence, record and perfect such assignments, and to perfect, obtain, maintain, enforce and defend any rights assigned.  Notwithstanding the foregoing, Crowdbotics reserves the right to use and re-use any generalized knowledge it gains arising from the performance of Services in its business without liability to you.\nd. Prior Inventions.  If, in the course of performing Services, Crowdbotics incorporates into any Invention or uses any pre-existing Materials owned by Crowdbotics or in which Crowdbotics has an interest (“Prior Inventions”), then Crowdbotics grants you a non-exclusive, royalty-free, perpetual, irrevocable, transferable, worldwide, sublicenseable license to make, have made, use, import, offer for sale, sell, reproduce, distribute, modify, adapt, prepare derivative works of, display, perform, and otherwise exploit such Prior Inventions solely as incorporated into Inventions.\ne. Reusable Modules. Any open-source components Crowdbotics uses in performing the Services, whether pre-existing or created by Crowdbotics (“Reusable Modules”) are licensed to you pursuant to the terms of the applicable open source license.  For clarity, and notwithstanding anything to the contrary in these Terms, Crowdbotics may develop new Reusable Modules based on your requests in connection with the Services. Crowdbotics will not incorporate any of your User Content into a Reusable Module without your prior consent.\n\n\n8. RELATIOINSHIP OF PARTIES.\n\nCrowdbotics and you are independent contractors.  You understand that Crowdbotics is not an employee, and that the performance of Services requires a collaborative, professional relationship of equals where mutual professional respect, courtesy and consideration are expected. Due to the virtual nature of the relationship, you understand the importance of communication, and agree to respond to questions, requests and communications from Crowdbotics in a timely manner. You understand that Crowdbotics is a business with other clients, and requires fair, realistic notice in order to attend to requests and projects. You understand that Crowdbotics may require detailed clarification of tasks in order to meet expectations and provide the best support and highest quality work, and agrees to provide specifications at the level of detail required by Crowdbotics.\n\n\n9. TERM;TERMINATION.\n\na. The term of these Terms begins on the date you accept these Terms and continues until all subscriptions have expired or been terminated, unless otherwise set forth on an Order Form (the “Term”).  Unless otherwise specified on an Order Form, subscriptions will automatically renew for additional periods equal to the expiring subscription term, unless either party gives the other notice of non-renewal at least 30 days before the end of the relevant subscription term, by cancelling the user’s subscription via the Crowdbotics web product.\nb. Effect of Termination.  Upon termination of these Terms, your right to use the Platform will immediately cease and any fees you owe to Crowdbotics will become immediately due.  Sections 3, 4, 7, 8b, 10 – 14, 15.b, and 16 – 23 will survive any termination or expiration of these Terms. Crowdbotics may delete any User Content hosted on the Platform.\n\n\n10. FEES.\n\nThe fees for the Platform and any Services are as set forth on the Order Form, or, if you do not have an Order Form, the Platform. You will provide Crowdbotics with valid and updated credit card information, and you authorize Crowdbotics to charge such credit card for the fees for the initial subscription term, hourly or milestone-based service fees, any renewal subscription term, in advance, in accordance with the billing frequency set forth on the Order Form, or if there is no Order Form, the Platform. Subscriptions, hourly fees, and milestone-based fees are non-refundable once hours are worked and charged (for hourly fees) or when milestones are funded for work (for milestone fees).\n\n\n11. NO SUPPORT OR MAINTENANCE.\n\nUnless you have a subscription that provides for support, you acknowledge and agree that Crowdbotics will have no obligation to provide you with any support or maintenance in connection with the Platform except as part of the Services.\n\n\n12. ACCEPTABLE USE POLICY.\n\nThe following terms constitute Crowdbotics’ “Acceptable Use Policy”:\n\na. You will not use the Platform to collect, upload, transmit, display, or distribute any User Content (i) that violates any third-party right, including any copyright, trademark, patent, trade secret, moral right, privacy right, right of publicity, or any other intellectual property or proprietary right; (ii) that is unlawful, harassing, abusive, tortious, threatening, harmful, invasive of another’s privacy, vulgar, defamatory, false, intentionally misleading, trade libelous, pornographic, obscene, patently offensive, promotes racism, bigotry, hatred, or physical harm of any kind against any group or individual or is otherwise objectionable; (iii) that is harmful to minors in any way; or (iv) that is in violation of any law, regulation, or obligations or restrictions imposed by any third party.\nb. In addition, you will not: (i) upload, transmit, or distribute to or through the Platform any computer viruses, worms, or any software intended to damage or alter a computer system or data; (ii) send through the Platform unsolicited or unauthorized advertising, promotional materials, junk mail, spam, chain letters, pyramid schemes, or any other form of duplicative or unsolicited messages, whether commercial or otherwise; (iii)  use the Platform to harvest, collect, gather or assemble information or data regarding other users, including e-mail addresses, without their consent; (iv) interfere with, disrupt, or create an undue burden on servers or networks connected to the Platform, or violate the regulations, policies or procedures of such networks; (v) attempt to gain unauthorized access to the Platform (or to other computer systems or networks connected to or used together with the Platform), whether through password mining or any other means; (vi) harass or interfere with any other user’s use and enjoyment of the Platform; or (vi) use software or automated agents or scripts to produce multiple accounts on the Platform, or to generate automated searches, requests, or queries to (or to strip, scrape, or mine data from) the Platform (provided, however, that we conditionally grant to the operators of public search engines revocable permission to use spiders to copy materials from the Platform for the sole purpose of and solely to the extent necessary for creating publicly available searchable indices of the materials, but not caches or archives of such materials, subject to the parameters set forth in our robots.txt file).\nc. Enforcement. We reserve the right (but have no obligation) to review any User Content, and to investigate and/or take appropriate action against you in our sole discretion if you violate this Acceptable Use Policy or any other provision of these Terms or otherwise create liability for us or any other person. Such action may include removing or modifying your User Content, terminating your Account in accordance with Section 9, and/or reporting you to law enforcement authorities.\n\n\n13. FEEDBACK; NAME.\n\nIf you provide Crowdbotics with any feedback or suggestions regarding the Platform or Services (“Feedback”), then you grant Crowdbotics a perpetual, irrevocable, non-exclusive, transferable, sublicensable, worldwide license to use such Feedback in any manner it deems appropriate.  Crowdbotics will treat any Feedback as non-confidential and non-proprietary.  Unless you provide Crowdbotics with an opt-out notice, you grant Crowdbotics a right to use your name, logo, and application screenshots in Crowdbotics’ marketing materials.  Any such opt-out notice will not apply to use by Crowdbotics in accordance with this Section prior to Crowdbotics’ receipt of notice.\n\n\n14. REPRESENTATIONS AND WARRANTIES.\n\nYou represent and warrant that you have the full right and authority to enter into and perform these Terms, and that entering into these Terms does not violate any outstanding assignments, grants, licenses, encumbrances, obligations, agreements or understanding to which you are a party.  Crowdbotics warrants that during an applicable subscription term Crowdbotics will not materially decrease the overall functionality of the Platform. For any breach of that warranty, your exclusive remedies are those described in Section 9.\n\n\n15. FREE SERVICES.\n\na. Crowdbotics may make certain parts of the Platform available for free (“Free Products”).  Use of Free Products is subject to the terms and conditions of these Terms. In the event of a conflict between this section and any other portion of these Terms, this section controls. Free Products are provided to you without charge as described on the Platform. You agree that Crowdbotics, in its sole discretion and for any or no reason, may terminate your access to the Free Products or any part thereof, with or without prior notice.  Crowdbotics will not be liable to you or any third party for such termination. You are solely responsible for exporting your User Content and any Apps from the Free Products prior to termination of your access to the Free Products for any reason, provided that if Crowdbotics terminates your account, except as required by law, Crowdbotics will provide you a reasonable opportunity to retrieve your Apps.\nb. NOTWITHSTANDING SECTIONS 14, 16, AND 18.b, THE FREE PRODUCTS ARE PROVIDED “AS-IS” AND WITHOUT ANY WARRANTY, AND CROWDBOTICS HAS NO INDEMNIFICATION OBLIGATIONS NOR LIABILITY OF ANY TYPE WITH RESPECT TO THE FREE PRODUCTS UNLESS SUCH EXCLUSION OF LIABILITY IS NOT ENFORCEABLE UNDER APPLICABLE LAW IN WHICH CASE CROWDBOTICS’ LIABILITY WITH RESPECT TO THE FREE PRODUCTS WILL NOT EXCEED US$100. WITHOUT LIMITING THE FOREGOING, CROWDBOTICS AND ITS SUPPLIERS DO NOT REPRESENT OR WARRANT TO YOU THAT: (I) YOUR USE OF THE FREE PRODUCTS WILL MEET YOUR REQUIREMENTS, (II) YOUR USE OF THE FREE PRODUCTS WILL BE UNINTERRUPTED, TIMELY, SECURE OR FREE FROM ERROR, AND (III) ANY DATA PROVIDED THROUGH THE FREE PRODUCTS WILL BE ACCURATE. NOTWITHSTANDING ANYTHING TO THE CONTRARY IN SECTION 17, YOU ARE FULLY LIABLE UNDER THESE TERMS TO CROWDBOTICS FOR ANY DAMAGES ARISING OUT OF YOUR USE OF THE FREE PRODUCTS, ANY BREACH BY YOU OF THESE TERMS AND ANY OF YOUR INDEMNIFICATION OBLIGATIONS HEREUNDER.\n\n\n16. DISCLAIMERS.\n\nEXCEPT AS EXPRESSLY PROVIDED IN THESE TERMS, NEITHER PARTY MAKES ANY WARRANTY OF ANY KIND, WHETHER EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, AND EACH PARTY SPECIFICALLY DISCLAIMS ALL IMPLIED WARRANTIES, INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT, TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW.\n\n\n17. LIMITATION OF LIABILITY.\n\na. TO THE FULLEST EXTENT PERMITTED BY LAW, IN NO EVENT WILL CROWDBOTICS (OR ITS SUPPLIERS) BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY LOST PROFITS, LOST DATA, COSTS OF PROCUREMENT OF SUBSTITUTE PRODUCTS, OR ANY INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL OR PUNITIVE DAMAGES ARISING FROM OR RELATING TO THESE TERMS OR YOUR USE OF, OR INABILITY TO USE, THE PLATFORM OR SERVICES, EVEN IF CROWDBOTICS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.  ACCESS TO, AND USE OF, THE PLATFORM AND SERVICES IS AT YOUR OWN DISCRETION AND RISK, AND YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR DEVICE OR COMPUTER SYSTEM, OR LOSS OF DATA RESULTING THEREFROM.\nb. TO THE FULLEST EXTENT PERMITTED BY LAW, NOTWITHSTANDING ANYTHING TO THE CONTRARY, CROWDBOTICS’ LIABILITY TO YOU FOR ANY DAMAGES ARISING FROM OR RELATED TO THESE TERMS (FOR ANY CAUSE WHATSOEVER AND REGARDLESS OF THE FORM OF THE ACTION), WILL AT ALL TIMES BE LIMITED TO THE GREATER OF (I) THE FEES YOU HAVE PAID CROWDBOTICS IN THE 12 MONTHS PRIOR TO THE EVENT GIVING RISE TO LIABILITY AND (II) US$50. THE EXISTENCE OF MORE THAN ONE CLAIM WILL NOT ENLARGE THIS LIMIT.  YOU AGREE THAT OUR SUPPLIERS WILL HAVE NO LIABILITY OF ANY KIND ARISING FROM OR RELATING TO THESE TERMS.\n\n\n18. INDEMNIFICATION.\n\na. By You. To The fullest extent permitted by law, you will indemnify Crowdbotics from and against any and all liabilities, suits, losses, damages and judgments, costs and expenses (including reasonable outside counsel's fees and expenses) in connection with (i) your use of the Platform or Services in a manner not authorized under these Terms, (ii) any other breach of these Terms by you, and (iii) your use of Prior Inventions or Reusable Modules in a manner not authorized under these Terms.\nb. By Crowdbotics. Unless you are using a Free Product, Crowdbotics will indemnify and defend you against any claim, demand, suit or proceeding made or brought against you by a third party alleging that the Platform or any Prior Invention infringes or misappropriates such third party’s intellectual property rights (an “IP Claim”), provided that you (i) promptly give Crowdbotics written notice of the IP Claim, (ii) give Crowdbotics sole control of the defense and settlement of the IP Claim, and (iii) give Crowdbotics all reasonable assistance, at Crowdbotics’ expense. The foregoing obligations do not apply if (1) the allegation does not state with specificity that the Platform or a Prior Invention are the basis of the IP Claim; (2) an IP Claim arises from the use or combination of the Platform or Prior Invention (other than as incorporated into an Invention) with software, hardware, data, or processes not provided by Crowdbotics, if the Platform, Prior Invention or use thereof would not infringe without such combination; (3) an IP Claim arises from Services for which there is no charge; or (4) an IP Claim arises from User Content or your breach of these Terms.  If Crowdbotics believes an infringement or misappropriation claim related to the Platform or a Prior Invention is likely, then Crowdbotics may: (A) modify the Platform or Prior Invention to be non-infringing, (B) obtain a license for your continued use of the Platform or Prior Invention, or (C) terminate your subscription for the Platform upon 30 days’ written notice and refund you any prepaid fees covering the remainder of the term of the terminated subscriptions.\n\n\n19. CONFIDENTIALITY.\n\na. Definition. “Confidential Information” means all information disclosed by a party (“Disclosing Party”) to the other party (“Receiving Party”), whether orally or in writing, that is designated as confidential or that reasonably should be understood to be confidential given the nature of the information and the circumstances of disclosure. Crowdbotics’ Confidential Information includes the Platform and any Prior Inventions, and the terms and conditions of all Order Forms (including pricing). Confidential Information of each party includes business and marketing plans, technology and technical information, product plans and designs, and business processes disclosed by such party. However, Confidential Information does not include any information that (i) is or becomes generally known to the public without breach of any obligation owed to the Disclosing Party, (ii) was known to the Receiving Party prior to its disclosure by the Disclosing Party without breach of any obligation owed to the Disclosing Party, (iii) is received from a third party without breach of any obligation owed to the Disclosing Party, or (iv) was independently developed by the Receiving Party.\nb. Non-Use and Non-Disclosure. As between the parties, each party retains all ownership rights in and to its Confidential Information. The Receiving Party will use the same degree of care that it uses to protect the confidentiality of its own confidential information of like kind (but not less than reasonable care) to (i) not use any Confidential Information of the Disclosing Party for any purpose outside the scope of these Terms and (ii) except as otherwise authorized by the Disclosing Party in writing, limit access to Confidential Information of the Disclosing Party to those of its employees and contractors who need that access for purposes consistent with these Terms and who have signed confidentiality agreements with the Receiving Party containing protections not materially less protective of the Confidential Information than those in these Terms. Neither party will disclose the terms of these Terms or any Order Form to any third party other than its affiliates, legal counsel and accountants without the other party’s prior written consent.\nc. Compelled Disclosure. The Receiving Party may disclose Confidential Information of the Disclosing Party to the extent compelled by law to do so, provided the Receiving Party gives the Disclosing Party prior notice of the compelled disclosure (to the extent legally permitted) and reasonable assistance, at the Disclosing Party's cost, if the Disclosing Party wishes to contest the disclosure. If the Receiving Party is compelled by law to disclose the Disclosing Party’s Confidential Information as part of a civil proceeding to which the Disclosing Party is a party, and the Disclosing Party is not contesting the disclosure, the Disclosing Party will reimburse the Receiving Party for its reasonable cost of compiling and providing secure access to that Confidential Information.\n\n\n20. ELECTRONIC COMMUNICATIONS.\n\nBy using the Platform, you consent to receiving electronic communications from Crowdbotics (either by posting notices on the Platform or via email).  You agree that any notices Crowdbotics is required to provide you may be provided electronically.\n\n\n21. EXPORT.\n\nThe Platform and any Inventions, Prior Inventions and Reusable Modules may be subject to U.S. export control laws and may be subject to export or import regulations in other countries. You agree not to export, reexport, or transfer, directly or indirectly, any U.S. technical data acquired from Crowdbotics, or any products utilizing such data, in violation of the United States export laws or regulations.\n\n\n22. ARBITRATION.\n\na. We Both Agree To Arbitrate. You and Crowdbotics agree to resolve any claims relating to these Terms, the Platform or any Services through final and binding arbitration by a single arbitrator, except as set forth under Section 22.e. This includes disputes arising out of or relating to interpretation or application of this “Arbitration” section, including its enforceability, revocability, or validity.\nb. Informal Resolution. Before filing a claim, each party agrees to try to resolve the dispute by contacting the other party. If a dispute is not resolved within thirty days of notice, either party may bring a formal proceeding.\nc. Arbitration. The American Arbitration Association (AAA) will administer the arbitration under its Commercial Arbitration Rules. The arbitration will be held in San Francisco (CA), or any other location both parties agree to in writing.\nd. Exception to Arbitration. Either Party may bring a lawsuit in the federal or state courts of Alameda County, California solely for injunctive relief to stop unauthorized use or abuse of the Platform or infringement of intellectual property rights without first engaging in the informal dispute notice process described above. Both you and Crowdbotics consent to venue and personal jurisdiction there.\ne. NO CLASS ACTIONS. You may only resolve disputes with Crowdbotics on an individual basis and will not bring a claim in a class, consolidated or representative action. Class arbitrations, class actions, private attorney general actions and consolidation with other arbitrations are not allowed.\n\n\n23. MISCELLANEOUS.\n\nNo failure or delay by either party in exercising any right under these Terms will constitute a waiver of that right. If any term or provision of these Terms is determined to be illegal or invalid, such illegality or invalidity will not affect the validity of the remainder of these Terms.  These Terms are governed by California law. These Terms, which include any Order Form, are the entire agreement between the parties hereto with respect to the subject matter hereof. Neither party may assign these Terms without the other party’s consent, except that Crowdbotics may assign these Terms without consent in connection with any merger where Crowdbotics is not the surviving entity, reorganization, or sale of all or substantially all of its assets.  These Terms will be binding upon each party’s successors and permitted assigns.\\n\\n\\n`\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "terms-and-conditions/index.js": {
        "code": "import Icon from 'react-native-vector-icons/FontAwesome';\nimport React from 'react';\nimport { Text, View, ScrollView, TouchableOpacity } from 'react-native';\nimport { htmlContent } from './content';\nimport { styles } from './styles';\n\nconst TermsAndConditions = ({ navigation }) => {\n  return (\n    <View\n      style={{\n        flex: 1,\n      }}>\n      <View style={styles.heading}>\n        <TouchableOpacity\n          style={{ padding: 5 }}\n          onPress={() => {\n            navigation.goBack();\n          }}>\n          <Icon\n            style={styles.icon}\n            name={'arrow-left'}\n            size={18}\n            color=\"#FFFFFF\"\n          />\n        </TouchableOpacity>\n        <Text style={styles.header}>TERMS AND CONDITIONS</Text>\n        <View></View>\n      </View>\n\n      <ScrollView style={styles.scrollview}>\n        <Text style={styles.text}>{htmlContent}</Text>\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default {\n  title: \"Terms and Conditions\",\n  navigator: TermsAndConditions\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "terms-and-conditions/package.json": {
        "code": "{\n  \"name\": \"@modules/terms-and-conditions\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Terms and Conditions Screen\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"react-native-vector-icons\": \"^8.0.0\"\n  }\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "terms-and-conditions/styles.js": {
        "code": "import { StyleSheet } from 'react-native';\n\nexport const styles = StyleSheet.create({\n  heading: {\n    height: 60,\n    backgroundColor: '#333333',\n    justifyContent: 'space-between',\n    padding: 20,\n    alignItems: 'flex-end',\n    flexDirection: 'row',\n  },\n  text: {\n    color: '#000000',\n    fontSize: 16,\n    width: '100%',\n  },\n  icon: { width: 18, height: 16 },\n  scrollview: { flex: 1, padding: 20 },\n  header: { color: '#fff', fontSize: 16 },\n});\n",
        "parentDir": "/modules",
        "newFile": true
      }
    },
    "user-profile": {
      "user-profile/README.md": {
        "code": "# User Profile\n\nThe user Profile Screen is a React Native-based screen that allows the user to view other users' profiles and edit its own profile information.\n\n## Requirements\n\nFor this module to be fully functional, we recommend first installing and configuring the `Login` or `Social Login` modules available in the storyboard's list of verified modules.\n\n### Update the file modules/user-profile/store/api.js\n\nUpdate this file by replacing the `SERVICE_URL` url value with your apps' own backend url. For example, for a Crowdbotics app deployed at `https://my-app.botics.co/`, the change would look like:\n\n```js\nSERVICE_URL = \"https://my-app.botics.co/\";\n```\n\n### Update Data Models\n\nGo to your Crowdbotics' app dashboard and navigate to the `Data Models` page. You will see a `User` model. Click on the user model, then click on `Edit Selected` to update the user model and edit the following:\n\n1. Check the box for `API` and add the following fields:\n\n- `first_name`: type as `CharField`\n- `last_name`: type as `CharField`\n- `bio`: type as `CharField`\n\nIn the end, your data model should look like this:\n\n![model builder](https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/Screenshot_from_2021-01-05_16-05-28.png)\n\nAfter all the changes, click `save` for all the changes to be applied to your project.\n\nIf you choose, you can add other fields to the user model, just make sure to update this module so the new fields are rendered correctly.\n\n[Visit our knowledge base](https://knowledge.crowdbotics.com/what-is-the-model-editor-and-what-is-it-for) if you need help understanding Data Models.\n\n## Module Usage\n\nThere are two ways of using this module. First, as a logged in user profile page, where the user can view, edit and update their profile information. This module will behave like this by default (you must be logged in using one of the login modules available). If you use a custom login method and reducer store, you might need to edit the code in `useSelector` for both `index.js` and `edit.js` files to match where both the `state.login.user` and user `state.login.token` is stored at.\n\nThe second use case is for displaying **other** users' information. For example, if you have a screen that lists all the users available in the platform, and when you click in a user name, you would like to view that specific user details. For that, you need to add a navigation to the User Profile screen, and pass the user id as a parameter in the navigation call. In the code example below, whenever the button is clicked, it will navigate to the User Profile screen and load the information of the user which their id equals to `123`.\n\n```js\n<Button\n  title=\"Go to User Profile\"\n  onPress={() => navigation.navigate(\"userProfile\", { id: 123 })}\n/>\n```\n\n## Manual Setup\n\nIf you want to use the module directly, or in other modules, you can do so by importing it and using the following properties.\n\n```javascript\nimport UserProfile from \"@modules/user-profile\";\n\nconst { title, navigator, slice } = UserProfile;\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "user-profile/edit.js": {
        "code": "import React, { useState } from \"react\"\nimport {\n  TextInput,\n  View,\n  Alert,\n  Text,\n  TouchableOpacity,\n  ActivityIndicator\n} from \"react-native\"\nimport { Avatar } from \"react-native-elements\"\nimport { inputStyles, Color, buttonStyles, styles } from \"./styles\"\nimport { getInitials, transformLabel } from \"./utils\"\nimport { updateUserById } from \"./store\"\nimport { useSelector, useDispatch } from \"react-redux\"\n\nexport const Button = props => (\n  <TouchableOpacity onPress={props.onPress} disabled={props.loading}>\n    <View style={buttonStyles.view}>\n      {props.loading ? (\n        <ActivityIndicator color={Color.white} />\n      ) : (\n        <Text style={buttonStyles.text}>{props.title}</Text>\n      )}\n    </View>\n  </TouchableOpacity>\n)\n\nexport const InputContainer = props => (\n  <View>\n    <Text style={inputStyles.label}>{transformLabel(props.label)}</Text>\n    <View>\n      <TextInput\n        autoCapitalize=\"none\"\n        style={inputStyles.input}\n        placeholderTextColor={Color.steel}\n        underlineColorAndroid={\"transparent\"}\n        {...props}\n      />\n\n      {!!props.error && <Text style={inputStyles.error}>{props.error}</Text>}\n    </View>\n  </View>\n)\n\nexport const EditUser = props => {\n  const { user } = props\n  const initials = getInitials(user)\n  const [form, setForm] = useState({\n    first_name: user.first_name,\n    last_name: user.last_name,\n    email: user.email,\n    bio: user.bio\n  })\n  // code below depends on the existence of any login module - update as needed.\n  const login = useSelector(state => {\n    return state?.login\n  })\n  const api = useSelector(state => state.userProfile.api)\n  const dispatch = useDispatch()\n\n  const onUpdateForm = (key, value) => {\n    setForm({\n      ...form,\n      [key]: value\n    })\n  }\n\n  const onSaveProfile = async () => {\n    const payload = { data: { ...form, id: user.id }, token: login?.token }\n    dispatch(updateUserById(payload))\n      .then(() =>\n        Alert.alert(\n          \"User Updated\",\n          \"User information was successfully updated.\"\n        )\n      )\n      .catch(e => {\n        // handle your custom error message here\n        console.log(e.message)\n        Alert.alert(\n          \"User Update Failed\",\n          `An unexpected error happened: ${e.message}`\n        )\n      })\n  }\n  return (\n    <View>\n      <View style={styles.profileIcon}>\n        <Avatar\n          size=\"large\"\n          rounded\n          icon={{ name: \"user\", type: \"font-awesome\" }}\n          title={initials}\n          containerStyle={{ backgroundColor: Color.pink }}\n        />\n      </View>\n\n      <InputContainer\n        keyboardType=\"default\"\n        label=\"First Name\"\n        placeholder=\"John\"\n        onChangeText={value => onUpdateForm(\"first_name\", value)}\n        value={form.first_name}\n      />\n      <InputContainer\n        keyboardType=\"default\"\n        label=\"Last Name\"\n        placeholder=\"Doe\"\n        onChangeText={value => onUpdateForm(\"last_name\", value)}\n        value={form.last_name}\n      />\n      <InputContainer\n        keyboardType=\"email-address\"\n        label=\"Email Address\"\n        placeholder=\"email@email.com\"\n        onChangeText={value => onUpdateForm(\"email\", value)}\n        value={form.email}\n        error={form.email ? \"\" : `E-mail address field is required.`}\n      />\n      <InputContainer\n        label=\"Bio\"\n        multiline={true}\n        numberOfLines={2}\n        placeholder=\"Write something about yourself.\"\n        onChangeText={value => onUpdateForm(\"bio\", value)}\n        value={form.bio}\n      />\n      <Button\n        title=\"Save\"\n        loading={api.loading === \"pending\"}\n        onPress={onSaveProfile}\n      />\n    </View>\n  )\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "user-profile/index.js": {
        "code": "import React, { useState, useEffect } from \"react\"\nimport { View, ScrollView, ActivityIndicator, Text } from \"react-native\"\nimport { getUserById, slice } from \"./store\"\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { styles, Color } from \"./styles\"\nimport { unwrapResult } from \"@reduxjs/toolkit\"\nimport { EditUser } from \"./edit\"\nimport ViewUser from \"./view\"\n\nexport const UserProfile = ({ route }) => {\n  const [isEdit, setIsEdit] = useState(false)\n  // code below depends on the existence of any login module - update as needed.\n  const login = useSelector(state => {\n    return state?.login\n  })\n  const userId = route.params?.id || login?.user.id\n  const user = useSelector(state =>\n    state.userProfile.users.find(user => user.id === userId)\n  )\n  const api = useSelector(state => state.userProfile.api)\n  const dispatch = useDispatch()\n\n  useEffect(async () => {\n    if (userId) {\n      dispatch(getUserById(userId))\n        .then(unwrapResult)\n        .then(response => {\n          const edit = response.id === login?.user.id\n          setIsEdit(edit)\n        })\n    }\n  }, [userId])\n\n  return (\n    <ScrollView style={styles.container} contentStyle={styles.content}>\n      {api.loading === \"pending\" ? (\n        <View>\n          <ActivityIndicator color={Color.steel} />\n        </View>\n      ) : (\n        <View>\n          <View>{!user && <Text>No user to display information.</Text>}</View>\n          {user && (\n            <View>\n              {isEdit ? <EditUser user={user} /> : <ViewUser user={user} />}\n            </View>\n          )}\n        </View>\n      )}\n    </ScrollView>\n  )\n}\n\nexport default {\n  title: \"userProfile\",\n  navigator: UserProfile,\n  slice\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "user-profile/package.json": {
        "code": "{\n  \"name\": \"@modules/user-profile\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A screen to display user information like a profile picture, profile stats, action buttons, and images.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"react-native-elements\": \"^2.3.2\",\n    \"@react-navigation/native\": \"^5.9.2\"\n  }\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "user-profile/store/api.js": {
        "code": "import axios from \"axios\"\n\nconst SERVICE_URL = \"https://your-app.botics.co\" // your app back-end url\n\nconst usersAPI = axios.create({\n  baseURL: SERVICE_URL, \n  headers: { Accept: \"application/json\", \"Content-Type\": \"application/json\" }\n})\n\nfunction getUserById(id) {\n  return usersAPI.get(`/api/v1/user/${id}/`)\n}\n\nfunction updateUserById(data, token) {\n  return usersAPI.patch(`/api/v1/user/${data.id}/`, data, {\n    headers: {\n      Authorization: `Token ${token}`\n    }\n  })\n}\n\nfunction getUsers() {\n  return usersAPI.get(`/api/v1/user/`)\n}\n\nexport const api = {\n  getUserById,\n  updateUserById,\n  getUsers\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "user-profile/store/index.js": {
        "code": "import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { api } from \"./api\"\n\nexport const getUserById = createAsyncThunk(\n  \"userProfile/getUserById\",\n  async id => {\n    const response = await api.getUserById(id)\n    return response.data\n  }\n)\n\nexport const getUsers = createAsyncThunk(\n  \"userProfile/getUsers\",\n  async payload => {\n    const response = await api.getUsers(payload)\n    return response.data\n  }\n)\n\nexport const updateUserById = createAsyncThunk(\n  \"userProfile/updateUserById\",\n  async ({ data, token }) => {\n    const response = await api.updateUserById(data, token)\n    return response.data\n  }\n)\n\nconst initialState = { users: [], api: { loading: \"idle\", error: null } }\n\nexport const slice = createSlice({\n  name: \"userProfile\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: {\n    [getUserById.pending]: state => {\n      if (state.api.loading === \"idle\") {\n        state.api.loading = \"pending\"\n      }\n    },\n    [getUserById.fulfilled]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.users = [\n          ...state.users.filter(record => record.id !== action.payload.id),\n          action.payload\n        ]\n        state.api.loading = \"idle\"\n      }\n    },\n    [getUserById.rejected]: (state, action) => {\n      if (state.api.loading === \"pending\") {\n        state.api.error = action.error\n        state.api.loading = \"idle\"\n      }\n    }\n  },\n  [getUsers.pending]: state => {\n    if (state.api.loading === \"idle\") {\n      state.api.loading = \"pending\"\n    }\n  },\n  [getUsers.fulfilled]: (state, action) => {\n    if (state.api.loading === \"pending\") {\n      state.users = action.payload\n      state.api.loading = \"idle\"\n    }\n  },\n  [getUsers.rejected]: (state, action) => {\n    if (state.api.loading === \"pending\") {\n      state.api.error = action.error\n      state.api.loading = \"idle\"\n    }\n  },\n  [updateUserById.pending]: (state, action) => {\n    if (state.api.loading === \"idle\") {\n      state.api.loading = \"pending\"\n    }\n  },\n  [updateUserById.fulfilled]: (state, action) => {\n    if (state.api.loading === \"pending\") {\n      state.users = state.users.map(record =>\n        record.id === action.payload.id ? action.payload : record\n      )\n      state.api.loading = \"idle\"\n    }\n  },\n  [updateUserById.rejected]: (state, action) => {\n    if (state.api.loading === \"pending\") {\n      state.api.error = action.error\n      state.api.loading = \"idle\"\n    }\n  }\n})\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "user-profile/styles.js": {
        "code": "import { StyleSheet } from \"react-native\"\n\nexport const Color = {\n  malibu: \"#46E1FD\",\n  pink: \"#e97d77\",\n  white: \"#fff\",\n  whiteOff: \"#F4F5F9\",\n  steel: \"#CCCCCC\",\n  black: \"#060606\",\n  facebook: \"#3b5998\",\n  red: \"red\",\n  gray: \"#6A6A6A\"\n}\n\nexport const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 20,\n    marginVertical: 20,\n    width: \"100%\"\n  },\n  content: {\n    alignItems: \"center\",\n    flex: 1,\n    justifyContent: \"center\",\n    textAlign: \"center\"\n  },\n  header: {\n    fontSize: 25,\n    color: Color.gray\n  },\n  profileIcon: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginBottom: 5\n  },\n  label: { color: Color.gray, fontSize: 12, fontWeight: \"bold\" },\n  text: { color: Color.black, fontSize: 16, marginTop: 3, marginBottom: 12 }\n})\n\nexport const inputStyles = {\n  input: {\n    borderColor: Color.steel,\n    borderWidth: 0.9,\n    borderRadius: 6,\n    fontSize: 15,\n\n    marginVertical: 10,\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    color: Color.black\n  },\n  date: { width: \"100%\", paddingVertical: 0 },\n  label: { color: Color.gray, fontSize: 12, fontWeight: \"bold\" },\n  error: { color: Color.red, fontSize: 9 }\n}\n\nexport const buttonStyles = {\n  view: {\n    backgroundColor: Color.pink,\n    borderRadius: 10,\n    justifyContent: \"center\",\n    marginHorizontal: 10,\n    marginBottom: 10,\n    height: 44\n  },\n  text: {\n    fontSize: 16,\n    textAlign: \"center\",\n    color: Color.white,\n    marginHorizontal: 40,\n    marginVertical: 10\n  }\n}\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "user-profile/utils.js": {
        "code": "export const getInitials = user => {\n  if (user && user.first_name && user.last_name) {\n    return `${user.first_name.charAt(0)}${user.last_name.charAt(0)}`\n  }\n  return user?.email?.substring(0, 2).toUpperCase()\n}\n\nexport const transformLabel = label => label.toUpperCase().replace(/[-_]/g, \" \")\n",
        "parentDir": "/modules",
        "newFile": true
      },
      "user-profile/view.js": {
        "code": "import React from \"react\"\nimport { View, Text } from \"react-native\"\nimport { Avatar } from \"react-native-elements\"\nimport { Color, styles } from \"./styles\"\nimport { getInitials, transformLabel } from \"./utils\"\n\nconst UserInfo = props => (\n  <View>\n    <Text style={styles.label}>{transformLabel(props.label)}</Text>\n    <Text style={styles.text}>\n      {props.value ? props.value : \"Not available\"}\n    </Text>\n  </View>\n)\n\nconst ViewUser = props => {\n  const { user } = props\n  const initials = getInitials(user)\n  return (\n    <View>\n      {user.id ? (\n        <View>\n          <View style={styles.profileIcon}>\n            <Avatar\n              size=\"large\"\n              rounded\n              icon={{ name: \"user\", type: \"font-awesome\" }}\n              title={initials}\n              containerStyle={{ backgroundColor: Color.pink }}\n            />\n          </View>\n          <UserInfo\n            label=\"Name\"\n            value={`${user.first_name} ${user.last_name}`}\n          />\n          <UserInfo label=\"Email\" value={user.email} />\n          <UserInfo label=\"Biography\" value={user.bio} />\n        </View>\n      ) : (\n        <Text style={styles.label}>No user information available.</Text>\n      )}\n    </View>\n  )\n}\n\nexport default ViewUser",
        "parentDir": "/modules",
        "newFile": true
      }
    }
  }
}