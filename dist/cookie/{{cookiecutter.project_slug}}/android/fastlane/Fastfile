# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
# Opt out of sending fastlane usage metrics
opt_out_usage

fastlane_require('httparty')

default_platform(:android)

base_name = '{{cookiecutter.project_slug}}'

platform(:android) do
  desc('Runs all the tests')
  lane(:test) do
    gradle(task: 'test')
  end

  desc('Submit a new Beta Build')
  lane(:beta) do
    gradle(task: 'clean assembleRelease')

    upload_to_play_store(track: 'beta')

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc('Deploy a new version to the Google Play')
  lane(:deploy) do
    upload_to_play_store(track: 'beta', track_promote_to: 'production')
  end

  desc('Deployment to Appetize')
  lane(:deploy_appetize) do
    gradle(task: 'assemble', build_type: 'Release')

    appetize(
      path: get_last_apk_path,
      platform: 'android',
      note: base_name
    )

    update_url(
      platform: 'android',
      public_key: lane_context[SharedValues::APPETIZE_PUBLIC_KEY],
      url: lane_context[SharedValues::APPETIZE_APP_URL]
    )
  end

  desc('create a new android app bundle build')
  lane(:build_aab) do
    build_version = increment_version_code(
      version_code: ENV["CIRCLE_BUILD_NUM"].to_i
    )

    gradle(task: 'bundleRelease')
    sh "echo \"export BUILD_VERSION=#{build_version}\" >> $BASH_ENV"
    sh ". $BASH_ENV"
  end

  # Update app URL in CB app DB
  private_lane(:update_url) do |options|
    url = "https://#{ENV['WEBHOOK_HOSTNAME']}/api/v2/apps/#{ENV['PROJECT_ID']}/metadata-webhook/"
    data = {
      platform_id: ENV['PLATFORM_ID'],
      provider: 'circleci',
      metadata: {
        appetize: {
          options[:platform] => {
            version: ENV['CIRCLE_BUILD_NUM'],
            public_key: options[:public_key],
            url: options[:url]
          }
        }
      }
    }
    headers = {
      'Authorization': "Api-Key #{ENV['WEBHOOK_API_KEY']}",
      'Content-Type': 'application/json'
    }

    response = HTTParty.post(url, body: data.to_json, headers: headers)
    puts("API response: #{response.code} #{response.body}")

    response.success?
  end
end

def get_last_apk_path
  last_apk_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  puts("last_apk_path: #{last_apk_path}")

  last_apk_path
end
