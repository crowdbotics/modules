# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
# Opt out of sending fastlane usage metrics
opt_out_usage

fastlane_require('httparty')

default_platform(:android)

base_name = '{{cookiecutter.project_slug}}'

platform(:android) do
  desc('Runs all the tests')
  lane(:test) do
    gradle(task: 'test')
  end

  desc('Submit a new Internal Build')
  lane(:internal) do
    gradle(task: 'clean bundleRelease')

    upload_to_play_store(track: 'internal',
                         version_code: ENV["CIRCLE_BUILD_NUM"].to_i,
                         version_name: ENV["CIRCLE_BUILD_NUM"].to_s,
                         track_promote_to: 'alpha')
  end

  desc('Promote from internal to alpha')
  lane(:alpha) do
    upload_to_play_store(rollout: '1', track: 'internal', track_promote_to: 'alpha')
  end

  desc('Promote from alpha to beta')
  lane(:beta) do
    upload_to_play_store(rollout: '1', track: 'alpha', track_promote_to: 'beta')
  end

  desc('Deploy a new version to the Google Play')
  lane(:production) do
    upload_to_play_store(rollout: '1', track: 'beta', track_promote_to: 'production')
  end

  desc('Get Internal Releases')
  lane(:get_internal_releases) do
    google_play_track_release_names(track: 'internal')
  end

  desc('Deployment to Appetize')
  lane(:deploy_appetize) do
    gradle(task: 'assemble', build_type: 'Release')

    public_key = get_appetize_public_key('android', base_name)

    appetize(
      path: get_last_apk_path,
      public_key: public_key,
      platform: 'android',
      note: base_name
    )

    update_url(
      platform: 'android',
      public_key: public_key || lane_context[SharedValues::APPETIZE_PUBLIC_KEY],
      url: lane_context[SharedValues::APPETIZE_APP_URL]
    )
  end

  desc('create a new android app bundle build')
  lane(:build_aab) do
    increment_version_code(
      version_code: ENV["CIRCLE_BUILD_NUM"].to_i
    )

    gradle(task: 'bundleRelease')
  end

  desc('create git tag')
  lane(:build_git_tag) do

    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
    add_git_tag(build_number: ENV["CIRCLE_BUILD_NUM"].to_i)

    # Push the new commit and tag back to your git remote
    push_to_git_remote
  end

  # Update app URL in CB app DB
  private_lane(:update_url) do |options|
    url = "https://#{ENV['WEBHOOK_HOSTNAME']}/api/v2/apps/#{ENV['PROJECT_ID']}/metadata-webhook/"
    data = {
      provider: 'circleci',
      metadata: {
        appetize: {
          options[:platform] => {
            public_key: options[:public_key],
            url: options[:url]
          }
        }
      }
    }
    headers = {
      'Authorization': "Api-Key #{ENV['WEBHOOK_API_KEY']}",
      'Content-Type': 'application/json'
    }

    response = HTTParty.post(url, body: data.to_json, headers: headers)
    puts("API response: #{response.code} #{response.body}")

    response.success?
  end
end

# get the publicKey of the appetizeApp corresponding to your base_name
def get_appetize_public_key(platform, base_name)
  return ENV['APPETIZE_PUBLIC_KEY'] unless ENV['APPETIZE_PUBLIC_KEY'].nil?

  response =
    HTTParty.get("https://#{ENV['APPETIZE_API_TOKEN']}@api.appetize.io/v1/apps")

  return nil unless response.success?

  item = JSON.parse(response.body)['data'].find do |app_app|
    app_app['note'] == base_name && app_app['platform'] == platform
  end

  item['publicKey'] if item
end

def get_last_apk_path
  last_apk_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  puts("last_apk_path: #{last_apk_path}")

  last_apk_path
end
