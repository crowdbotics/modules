{
  "articles": {
    "README.md": {
      "code": "# Article List and Detail\n\n## Setup\n\nOpen `/src/navigator/mainNavigator.js` and import the stack navigator defined in `navigator.js`.\n\n```javascript\nimport Articles from \"../features/<module_directory>/navigator\";\n```\n\nAnd then add it to the navigation:\n\n```javascript\n//@BlueprintImportInsertion\nArticles: {\n  screen: Articles\n},\n```\n\nOpen `store/services.js` and update the `baseURL` with your application's URL followed by `/modules/articles` which is the endpoint.\n\nAdd the module reducer and saga to your `/src/store/index.js` file:\n\n1. Add the imports\n\n```javascript\nimport articlesReducer from \"../features/<module_directory>/store/reducers\";\nimport articlesSagas from \"../features/<module_directory>/store/sagas\";\n```\n\n2. Add the reducer\n\n```\n   combineReducers({\n     apiReducer: apiReducer,\n     customReducer: customReducer,\n+    articlesReducer: articlesReducer\n   }),\n```\n\n3. Add the root saga\n\n```\n  sagaMiddleware.run(rootSaga);\n  sagaMiddleware.run(customRootSaga);\n+ sagaMiddleware.run(articlesSagas);\n```\n",
      "parentDir": null,
      "newFile": true
    },
    "article.js": {
      "code": "import React from 'react';\nimport { Text, View, ImageBackground } from 'react-native';\nimport { connect } from \"react-redux\";\nimport { styles } from \"./styles\";\n\nfunction Article(props) {\n  return (\n    <View>\n      <ImageBackground source={{ uri: props.article.image }} style={styles.image}>\n        <View style={styles.card}>\n          <Text style={styles.text}>\n            {props.article.title}\n          </Text>\n          <Text style={styles.author}>\n            {props.article.author}\n          </Text>\n        </View>\n      </ImageBackground>\n      <Text style={styles.body}>\n        {props.article.body}\n      </Text>\n    </View>\n  );\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const id = ownProps.navigation.getParam(\"id\", null);\n\n  return {\n    article: state.articlesReducer.articles.find(record => record.id == id)\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article)\n",
      "parentDir": null,
      "newFile": true
    },
    "index.js": {
      "code": "import React, { Component } from 'react';\nimport {\n  Text,\n  FlatList,\n  View,\n  TouchableOpacity,\n  ImageBackground\n} from 'react-native';\nimport { styles } from \"./styles\";\nimport { connect } from \"react-redux\";\nimport { article_list } from \"./store/actions\";\n\nclass ArticleList extends Component {\n  componentDidMount() {\n    this.props.load();\n  }\n\n  renderItem = ({ item }) => (\n    <TouchableOpacity\n      onPress={() => {\n        this.props.navigation.navigate(this.props.detail, { id: item.id })\n      }}>\n      <ImageBackground source={{ uri: item.image }} style={styles.image}>\n        <View style={styles.card}>\n          <Text style={styles.text}>\n            {item.title}\n          </Text>\n          <Text style={styles.author}>\n            {item.author}\n          </Text>\n        </View>\n      </ImageBackground>\n    </TouchableOpacity>\n  );\n\n  render() {\n    const { articles } = this.props;\n    return (\n      <FlatList\n        data={articles}\n        renderItem={this.renderItem}\n        keyExtractor={item => `${item.id}`}\n      />\n    );\n\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const detail = ownProps.navigation.getParam(\"detail\", \"Article\");\n\n  return {\n    detail: detail,\n    articles: state.articlesReducer.articles,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    load: () => dispatch(article_list())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ArticleList)\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import React from 'react';\nimport { SlideMenuIcon } from '../../navigator/slideMenuIcon';\nimport { createStackNavigator } from \"react-navigation-stack\";\n\nimport Articles from \"./index\";\nimport Article from \"./article\";\n\nexport default ArticlesNavigator = createStackNavigator({\n  Articles: {\n    screen: Articles,\n    navigationOptions: ({ navigation }) => ({\n      title: \"Article List\",\n      headerLeft: <SlideMenuIcon navigationProps={navigation} />,\n    }),\n    params: {\n      detail: \"Article\"\n    }\n  },\n  Article: {\n    screen: Article,\n  },\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "store/actions.js": {
      "code": "import * as types from \"./constants\"\n\nexport const article_list = () => ({ type: types.ARTICLE_LIST })\nexport const article_listSucceeded = (response, starter) => ({\n  type: types.ARTICLE_LIST_SUCCEEDED,\n  response,\n  starter\n})\nexport const article_listFailed = (response, starter) => ({\n  type: types.ARTICLE_LIST_FAILED,\n  response,\n  starter\n})\nexport const article_read = () => ({ type: types.ARTICLE_READ })\nexport const article_readSucceeded = (response, starter) => ({\n  type: types.ARTICLE_READ_SUCCEEDED,\n  response,\n  starter\n})\nexport const article_readFailed = (response, starter) => ({\n  type: types.ARTICLE_READ_FAILED,\n  response,\n  starter\n})\n",
      "parentDir": null,
      "newFile": true
    },
    "store/constants.js": {
      "code": "export const ARTICLE_LIST = \"ARTICLE_LIST\"\nexport const ARTICLE_LIST_SUCCEEDED = \"ARTICLE_LIST_SUCCEEDED\"\nexport const ARTICLE_LIST_FAILED = \"ARTICLE_LIST_FAILED\"\nexport const ARTICLE_READ = \"ARTICLE_READ\"\nexport const ARTICLE_READ_SUCCEEDED = \"ARTICLE_READ_SUCCEEDED\"\nexport const ARTICLE_READ_FAILED = \"ARTICLE_READ_FAILED\"\n",
      "parentDir": null,
      "newFile": true
    },
    "store/reducers.js": {
      "code": "import * as types from \"./constants\"\n\nconst initialState = {\n  api: {\n    isFetching: false,\n  },\n  articles: [],\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case types.ARTICLE_LIST:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: true,\n        },\n      })\n    case types.ARTICLE_LIST_SUCCEEDED:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: false,\n        },\n        articles: [...state.articles, ...action.response]\n      })\n    case types.ARTICLE_LIST_FAILED:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: false,\n          errors: action.response\n        }\n      })\n    case types.ARTICLE_READ:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: true,\n        },\n      })\n    case types.ARTICLE_READ_SUCCEEDED:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: false,\n        },\n        articles: [\n          ...state.articles.filter(record => record.id !== action.response.id),\n          action.response\n        ]\n      })\n    case types.ARTICLE_LIST_FAILED:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: false,\n          errors: action.response\n        }\n      })\n    default:\n      return state\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "store/sagas.js": {
      "code": "import { all, call, put, spawn, takeEvery } from \"redux-saga/effects\";\nimport * as types from \"./constants\"\nimport * as actions from \"./actions\"\nimport { article_list, article_read } from \"./services\"\n\nfunction* article_listWorker(action) {\n  try {\n    const result = yield call(article_list, action)\n    yield put(actions.article_listSucceeded(result.data, action))\n  } catch (err) {\n    yield put(actions.article_listFailed(err, action))\n  }\n}\n\nfunction* article_listWatcher() {\n  yield takeEvery(types.ARTICLE_LIST, article_listWorker)\n}\n\nfunction* article_readWorker(action) {\n  try {\n    const result = yield call(article_read, action)\n    yield put(actions.article_readSucceeded(result.data, action))\n  } catch (err) {\n    yield put(actions.article_readFailed(err, action))\n  }\n}\n\nfunction* article_readWatcher() {\n  yield takeEvery(types.ARTICLE_READ, article_readWorker)\n}\n\nexport default function* rootSaga() {\n  const sagas = [\n    article_listWatcher,\n    article_readWatcher\n  ]\n  yield all(\n    sagas.map(saga =>\n      spawn(function*() {\n        while (true) {\n          try {\n            yield call(saga)\n            break\n          } catch (e) {\n            console.log(e)\n          }\n        }\n      })\n    )\n  )\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "store/services.js": {
      "code": "import axios from \"axios\";\n\nconst articlesAPI = axios.create({\n  baseURL: \"https://app.botics.co/modules/articles\",\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }\n});\n\nexport function article_list(action) {\n  return articlesAPI.get(`/article`)\n}\n\nexport function article_read(action) {\n  return articlesAPI.get(`/article/${action.id}/`)\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "styles.js": {
      "code": "import { StyleSheet } from \"react-native\";\n\nexport const styles = StyleSheet.create({\n  card: {\n    padding: 10,\n  },\n  text: {\n    fontSize: 28,\n    color: '#ffffff',\n  },\n  author: {\n    fontSize: 18,\n    color: '#f2f2f2',\n  },\n  image: {\n    height: 250,\n    width: '100%',\n    justifyContent: 'flex-end',\n    backgroundColor: 'lightslategray',\n  },\n  body: {\n    padding: 10,\n    fontSize: 16\n  }\n});\n",
      "parentDir": null,
      "newFile": true
    }
  },
  "login": {
    "README.md": {
      "code": "# Basic Login Signup Screen\n\nThe Basic Login Signup Screen is a React Native-based screen that allows the user to login or signup.\n\n## Installation\n\nAfter you have added the screen module into your project, you will need to configure a few items by modifying the project files in the github repository. Please note to replace ####### with the numeric sequence for your screen (found in folder name under `/src/features`), and also that the @BluePrint tags for ImportInsertion and NavigationInsertion will be removed in future so placement is with other imports and inside the AppNavigator above other screens.\n\n### STEP 1: Add dependency library to the project.\n\n**/PROJECT_ROOT_DIRECTORY/package.json:**\n\n**ADD** Dependency after Line 16 (dependencies opening line \"_\"dependencies\": {_ \")\n\n```js\n  \"native-base\": \"^2.13.15\",\n```\n\n### STEP 2: Add screen into your project screen navigation.\n\n**/src/navigator/mainNavigator.js:**\n**ADD** immediately below in the section labeled //@BlueprintImportInsertion:\n\n`import BasicLoginSignup#######Navigator from '../features/BasicLoginSignup#######/navigator';`\n\n**ADD** immediately below in the section inside AppNavigator definition labeled //@BlueprintNavigationInsertion section:\n\n`BasicLoginSignup: { screen: BasicLoginSignup#######Navigator },`\n\n### STEP 3: Add reducers to store.\n\n**/src/store/index.js**\n**ADD** after Line 4 (sagas import):\n\n```js\nimport authRootSaga from '../features/BasicLoginSignup#######/auth/sagas';\nimport authReducer from '../features/BasicLoginSignup#######/auth/reducers;\n```\n\nLocate the store creation with `createStore`, **ADD** comma at end of `customReducer` and **ADD** below the following code `authReducer: authReducer`.\n\nThis is how your createStore should look like after modifications:\n\n```js\nconst store = createStore(\n  combineReducers({\n    apiReducer: apiReducer,\n    customReducer: customReducer,\n    authReducer: authReducer,\n  }),\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n```\n\nNear the end, before the `export { store }` line, register the new sagas `sagaMiddleware` like this:\n\n```js\nsagaMiddleware.run(authRootSaga);\n```\n\n### STEP 4: Change Login screen destination to your desired screen (likely Home screen).\n\nOpen the `screens/constants.js` file and edit the `HOME_SCREEN_NAME` value with desired destination screen (likely Home Screen). For example, if my home screen is called `HomeScreen1234535`, then I should change as follows: `export const HOME_SCREEN_NAME = 'HomeScreen1234535'`. If you desire, you can also update your logo image URL (be mindful that the size of the image should match the original ones for ideal results).\n\n### STEP 5: Modify backend\n\nIf your app's back-end does not have SENDGRID environmental variables available, _Make changes to project backend files (in /backend/YOUR_PROJECT folder):_\n\n**MODIFY: /backend/YOUR_PROJECT_NAME/settings.py** version in your project backend folder\n\n**ADD** above AWS S3 Config lines:\n\n```sh\nEMAIL_HOST = env.str(\"EMAIL_HOST\", \"smtp.sendgrid.net\")\nEMAIL_HOST_USER = env.str(\"SENDGRID_USERNAME\", \"\")\nEMAIL_HOST_PASSWORD = env.str(\"SENDGRID_PASSWORD\", \"\")\n```\n\nIf this code already exists, you can just skip this step.\n\n### STEP 6: Setup SendGrid account and keep reference to username and password.\n\nReference website [Sendgrid](https://wwww.sendgrid.com)\n\n### STEP 7: Configure Environment Variables.\n\nUsing the Crowdbotics Dashboard, navigate to \"Settings\" and select the tab \"Environment Variables\", here you will add the following variables:\n\n```\nSENDGRID_USERNAME\nSENDGRID_PASSWORD\n```\n\n### STEP 8: Update api url (optional)\n\nIf you have renamed your app through the Crowdbotics platform, you might need to change the reference url of your deployed app that is used to execute the api requests. To find out if you need to update, go to the file `src/config/app.js` and locate the `emailAuthAPIEndPoint`. If the value is your app's back-end url, then you do not need to change anything. If your current back-end url is different that what is shown there, update accordingly.\n\nFor example, after renaming my app from `loginapp` to `personalapp`, the code needs to be changed from:\n\n```js\nexport const appConfig = {\n  // todo add library to handle env variables\n  emailAuthAPIEndPoint: \"https://loginapp-123.botics.co\",\n  ...\n```\n\nto\n\n```js\nexport const appConfig = {\n  // todo add library to handle env variables\n  emailAuthAPIEndPoint: \"https://personalapp-123.botics.co\",\n  ...\n```\n\n### Note for developer: you can access the user token through the authReducer state (i.e. `state.authReducer.token` and user auth information like e-mail at `state.authReducer.user`)\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/actions.js": {
      "code": "import * as types from './constants';\n\n// LOGIN\n// {username, password} = data\nexport const apiLoginRequest = data => ({\n  type: types.API_LOGIN_REQUEST,\n  data,\n});\n// {data: {token: '', user: {}}} = response\nexport const apiLoginSuccess = response => ({\n  type: types.API_LOGIN_SUCCESS,\n  response,\n});\n// response is an error object\nexport const apiLoginFailed = response => ({\n  type: types.API_LOGIN_FAILED,\n  response,\n});\n\n// LOGOUT - pass the api token to the action request \nexport const apiLogoutRequest = (token) => ({\n  type: types.API_LOGOUT_REQUEST,\n  token\n});\nexport const apiLogoutSuccess = response => ({\n  type: types.API_LOGOUT_SUCCESS,\n  response,\n});\nexport const apiLogoutFailed = response => ({\n  type: types.API_LOGOUT_FAILED,\n  response,\n});\n\n// SIGN UP\nexport const apiSignupRequest = data => ({\n  type: types.API_SIGNUP_REQUEST,\n  data,\n});\nexport const apiSignupSuccess = response => ({\n  type: types.API_SIGNUP_SUCCESS,\n  response,\n});\nexport const apiSignupFailed = response => ({\n  type: types.API_SIGNUP_FAILED,\n  response,\n});\n\n// PASSWORD RESET\nexport const apiPasswordResetRequest = data => ({\n  type: types.API_PASSWORD_RESET_REQUEST,\n  data,\n});\nexport const apiPasswordResetSuccess = response => ({\n  type: types.API_PASSWORD_RESET_SUCCESS,\n  response,\n});\nexport const apiPasswordResetFailed = response => ({\n  type: types.API_PASSWORD_RESET_FAILED,\n  response,\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/constants.js": {
      "code": "export const API_LOGIN_REQUEST = 'API_LOGIN_REQUEST';\nexport const API_LOGIN_SUCCESS = 'API_LOGIN_SUCCESS';\nexport const API_LOGIN_FAILED = 'API_LOGIN_FAILED';\n\nexport const API_LOGOUT_REQUEST = 'API_LOGOUT_REQUEST';\nexport const API_LOGOUT_SUCCESS = 'API_LOGOUT_SUCCESS';\nexport const API_LOGOUT_FAILED = 'API_LOGOUT_FAILED';\n\nexport const API_SIGNUP_REQUEST = 'API_SIGNUP_REQUEST';\nexport const API_SIGNUP_SUCCESS = 'API_SIGNUP_SUCCESS';\nexport const API_SIGNUP_FAILED = 'API_SIGNUP_FAILED';\n\nexport const API_PASSWORD_RESET_REQUEST = 'API_PASSWORD_RESET_REQUEST';\nexport const API_PASSWORD_RESET_SUCCESS = 'API_PASSWORD_RESET_SUCCESS';\nexport const API_PASSWORD_RESET_FAILED = 'API_PASSWORD_RESET_FAILED';\n\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/reducers.js": {
      "code": "import * as types from './constants';\nimport {mapErrorMessage} from './utils';\n\nconst INITIAL_STATE = {\n  token: null,\n  isLoading: false,\n  success: false,\n  error: null,\n  user: {},\n};\n\nexport default function authApiReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.API_LOGIN_REQUEST:\n      return {...state, token: null, error: null, success: false, isLoading: true};\n\n    case types.API_LOGIN_SUCCESS:\n      return {\n        ...state,\n        token: action.response?.data?.token || null,\n        error: null,\n        isLoading: false,\n        success: true,\n        user: action.response?.data?.user || {},\n      };\n\n    case types.API_LOGIN_FAILED:\n      return {\n        ...state,\n        error: mapErrorMessage(action),\n        isLoading: false,\n        success: false\n      };\n\n    case types.API_SIGNUP_REQUEST:\n      return {...state, token: null, error: null, success: false, isLoading: true};\n\n    case types.API_SIGNUP_SUCCESS:\n      return {\n        ...state,\n        token: null,\n        user: action.response?.data || '',\n        error: null,\n        success: true,\n        isLoading: false,\n      };\n\n    case types.API_SIGNUP_FAILED:\n      return {\n        ...state,\n        error: mapErrorMessage(action),\n        success: false,\n        isLoading: false,\n      };\n    case types.API_SIGNUP_REQUEST:\n      return {...state, token: null, error: null, success: false, isLoading: true};\n\n    case types.API_SIGNUP_SUCCESS:\n      return {\n        ...state,\n        token: null,\n        user: action.response?.data || '',\n        error: null,\n        success: true,\n        isLoading: false,\n      };\n\n    case types.API_SIGNUP_FAILED:\n      return {\n        ...state,\n        error: mapErrorMessage(action),\n        success: false,\n        isLoading: false,\n      };\n    case types.API_SIGNOUT_REQUEST:\n      return {...state, token: null, error: null, success: false, isLoading: true};\n\n    case types.API_SIGNOUT_SUCCESS:\n      return {...INITIAL_STATE, success: true};\n\n    case types.API_SIGNOUT_FAILED:\n      return {\n        ...state,\n        error: mapErrorMessage(action),\n        success: false,\n        isLoading: false,\n      };\n    case types.API_PASSWORD_RESET_REQUEST:\n      return {...state, error: null, success: false, isLoading: true};\n\n    case types.API_PASSWORD_RESET_SUCCESS:\n      return {\n        ...state,\n        error: null,\n        success: true,\n        isLoading: false,\n      };\n\n    case types.API_PASSWORD_RESET_FAILED:\n      return {\n        ...state,\n        error: mapErrorMessage(action),\n        success: false,\n        isLoading: false,\n      };\n    default:\n      return state;\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/sagas.js": {
      "code": "import {put, call, all, spawn, takeEvery} from 'redux-saga/effects';\nimport {authServices} from './services';\nimport * as types from './constants';\nimport * as actions from './actions';\n\n// Login\nfunction* apiLoginRequestWorker(action) {\n  try {\n    const result = yield call(authServices.apiLoginRequest, action);\n    yield put(actions.apiLoginSuccess(result, action));\n  } catch (err) {\n    yield put(actions.apiLoginFailed(err, action));\n  }\n}\n\nfunction* apiLoginRequestWatcher() {\n  yield takeEvery(types.API_LOGIN_REQUEST, apiLoginRequestWorker)\n}\n\n// Logout\nfunction* apiLogoutRequestWorker(action) {\n  try {\n    const result = yield call(authServices.apiLogoutRequest, action);\n    yield put(actions.apiLogoutSuccess(result, action));\n  } catch (err) {\n    yield put(actions.apiLogoutFailed(err, action));\n  }\n}\n\nfunction* apiLogoutRequestWatcher() {\n  yield takeEvery(types.API_LOGOUT_REQUEST, apiLogoutRequestWorker)\n}\n\n// Signup\nfunction* apiSignupRequestWorker(action) {\n  try {\n    const result = yield call(authServices.apiSignupRequest, action);\n    yield put(actions.apiSignupSuccess(result, action));\n  } catch (err) {\n    yield put(actions.apiSignupFailed(err, action));\n  }\n}\n\nfunction* apiSignupRequestWatcher() {\n  yield takeEvery(types.API_SIGNUP_REQUEST, apiSignupRequestWorker)\n}\n\n// Password Reset email\nfunction* apiPasswordResetWorker(action) {\n  try {\n    const result = yield call(authServices.apiResetPasswordRequest, action);\n    yield put(actions.apiPasswordResetSuccess(result, action));\n  } catch (err) {\n    yield put(actions.apiPasswordResetFailed(err, action));\n  }\n}\n\nfunction* apiPasswordResetWatcher() {\n  yield takeEvery(types.API_PASSWORD_RESET_REQUEST, apiPasswordResetWorker)\n}\n\n// Read more information about root sagas in the documentation\n// https://redux-saga.js.org/docs/advanced/RootSaga.html\nexport default function* authRootSaga() {\n  const sagas = [\n    apiLoginRequestWatcher,\n    apiLogoutRequestWatcher,\n    apiSignupRequestWatcher,\n    apiPasswordResetWatcher\n  ];\n  yield all(\n    sagas.map(saga =>\n      spawn(function*() {\n        while (true) {\n          try {\n            yield call(saga);\n            break;\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      }),\n    ),\n  );\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/services.js": {
      "code": "import axios from 'axios';\nimport { appConfig } from \"../../config/app\";\n\nconst authAPI = axios.create({\n  baseURL: appConfig.emailAuthAPIEndPoint, // your app back-end url\n  headers: {Accept: 'application/json', 'Content-Type': 'application/json'},\n});\n\nfunction apiLoginRequest(action) {\n  return authAPI.post(`/api/v1/login/`, null, {\n    data: action.data,\n  });\n}\nfunction apiSignupRequest(action) {\n  return authAPI.post(`/api/v1/signup/`, null, {\n    data: action.data,\n  });\n}\nfunction apiLogoutRequest(action) {\n  return authAPI.post(`/rest-auth/logout/`, null, {\n    headers: {Authorization: `Token ${action.token}`},\n  });\n}\n\nfunction apiResetPasswordRequest(action) {\n  return authAPI.post(`/rest-auth/password/reset/`, null, {\n    data: action.data,\n  });\n}\n\nexport const authServices = {\n  apiLoginRequest,\n  apiSignupRequest,\n  apiLogoutRequest,\n  apiResetPasswordRequest,\n};\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/utils.js": {
      "code": "const messageMap = {\n  'Request failed with status code 400': {\n    code: 400,\n    message: 'Invalid credentials.',\n  },\n  'Request failed with status code 403': {\n    code: 403,\n    message: 'You do not have access to this resource.',\n  },\n  'Request failed with status code 500': {\n    code: 500,\n    message: 'Unexpected Server Error.',\n  },\n  'Network Error': {\n    code: null,\n    message: 'Please check your internet connection.',\n  },\n};\n\nexport const mapErrorMessage = action => {\n  const message = action.response?.message;\n  return messageMap[message]\n    ? {...messageMap[message], type: action.type}\n    : {code: null, message, type: action.type};\n};\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import { createStackNavigator } from \"react-navigation-stack\";\n\nimport LoginSignup from \"./screens/blank\";\nimport PasswordRecover from \"./screens/PasswordRecover\";\n\nexport default LoginSignupBlueprintNavigator = createStackNavigator(\n  {\n    LoginSignup,\n    PasswordRecover\n  },\n  {\n    initialRouteName: \"LoginSignup\",\n    defaultNavigationOptions: ({ navigation }) => ({ header: null }),\n  }\n);\n",
      "parentDir": null,
      "newFile": true
    },
    "screens/PasswordRecover/index.js": {
      "code": "import React, {Component} from 'react';\nimport {\n  Image,\n  Alert,\n  View,\n  TouchableOpacity,\n  TextInput,\n  Text,\n} from 'react-native';\nimport {connect} from 'react-redux';\nimport {styles} from '../styles';\nimport {KeyboardAwareScrollView} from 'react-native-keyboard-aware-scroll-view';\nimport {apiPasswordResetRequest} from '../../../../store/auth/actions';\nimport {API_PASSWORD_RESET_FAILED} from '../../../../store/auth/constants';\nimport {emailValidationRegex, LOGO_URL} from '../constants.js';\n\nclass PasswordRecover extends Component {\n  static navigationOptions = {\n    headerMode: 'none',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      loading: false,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {requestError, success} = this.props;\n    if (prevProps.isLoading) {\n      if (requestError?.type === API_PASSWORD_RESET_FAILED) {\n        let message =\n          requestError?.code === 400\n            ? 'This email is not registered\\nPlease signup'\n            : requestError.message;\n        Alert.alert('Error', message);\n      }\n\n      if (success) {\n        Alert.alert(\n          'Password Reset',\n          'Password reset link has been sent to your email address',\n        );\n        this.props.navigation.goBack();\n      }\n    }\n  }\n\n  renderImage = () => {\n    const imageSize = {\n      width: 365,\n      height: 161,\n    };\n    return (\n      <Image\n        style={[styles.image, imageSize]}\n        source={{\n          uri: LOGO_URL,\n        }}\n      />\n    );\n  };\n\n  submitPasswordReset = async () => {\n    const {email} = this.state;\n    if (!emailValidationRegex.test(email)) {\n      Alert.alert('Error', 'Please enter a valid email address.');\n      return;\n    }\n    this.props.reset(email);\n  };\n\n  render() {\n    const {email} = this.state;\n\n    return (\n      <View style={{flex: 1}}>\n        <KeyboardAwareScrollView contentContainerStyle={styles.screen}>\n          {this.renderImage()}\n          <Text style={styles.heading}>{'Password Recovery'}</Text>\n          <View style={styles.fieldContainer}>\n            <Text style={styles.label}>Email Address</Text>\n            <TextInput\n              value={email}\n              onChangeText={email => this.setState({email})}\n              placeholder=\"eg: yourname@gmail.com\"\n              size=\"small\"\n              style={styles.input}\n              keyboardType=\"email-address\"\n              textStyle={styles.text}\n              autoCapitalize=\"none\"\n            />\n          </View>\n          <TouchableOpacity\n            disabled={this.props.isLoading}\n            activeOpacity={0.7}\n            style={[styles.actionButon]}\n            onPress={this.submitPasswordReset}>\n            <Text\n              style={{\n                color: '#fff',\n                fontSize: 15,\n              }}>\n              {'Reset Password'}\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            activeOpacity={0.7}\n            onPress={() => {\n              this.props.navigation.goBack();\n            }}>\n            <Text style={[styles.textRow]}>Back to login?</Text>\n          </TouchableOpacity>\n        </KeyboardAwareScrollView>\n      </View>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    requestError: state.authReducer.error,\n    isLoading: state.authReducer.isLoading,\n    success: state.authReducer.success,\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    reset: email => dispatch(apiPasswordResetRequest({email})),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PasswordRecover);\n",
      "parentDir": null,
      "newFile": true
    },
    "screens/PasswordRecover/styles.js": {
      "code": "import { StyleSheet } from \"react-native\";\n\nexport const styles = StyleSheet.create({\n});",
      "parentDir": null,
      "newFile": true
    },
    "screens/blank.js": {
      "code": "import React, {Component} from 'react';\nimport {\n  View,\n  ImageBackground,\n  Image,\n  Text,\n  KeyboardAvoidingView,\n  TouchableOpacity,\n  TextInput,\n  ActivityIndicator,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport {\n  HOME_SCREEN_NAME,\n  BACKGROUND_URL,\n  emailValidationRegex,\n  LOGO_URL,\n} from './constants.js';\nimport {KeyboardAwareScrollView} from 'react-native-keyboard-aware-scroll-view';\nimport {Tab, Tabs} from 'native-base';\nimport {styles, buttonStyles, textInputStyles, Color} from './styles';\nimport {connect} from 'react-redux';\nimport {apiLoginRequest, apiSignupRequest} from '../../../store/auth/actions';\nimport {\n  API_LOGIN_FAILED,\n  API_SIGNUP_FAILED,\n} from '../../../store/auth/constants';\n\nTab.prototype.requestAnimationFrame = () => {};\nTabs.prototype.requestAnimationFrame = () => {};\n\nconst TextInputField = props => (\n  <View>\n    <Text style={[textInputStyles.label, props.labelStyle]}>{props.label}</Text>\n    <TextInput\n      autoCapitalize=\"none\"\n      style={[textInputStyles.textInput, props.textInputStyle]}\n      placeholderTextColor={Color.steel}\n      underlineColorAndroid={'transparent'}\n      {...props}\n    />\n    {!!props.error && <Text style={textInputStyles.error}>{props.error}</Text>}\n  </View>\n);\n\nconst Button = props => (\n  <TouchableOpacity onPress={props.onPress} disabled={props.loading}>\n    <View style={[buttonStyles.viewStyle, props.viewStyle]}>\n      {props.loading ? (\n        <ActivityIndicator\n          color={props.loadingColor ? props.loadingColor : Color.white}\n          style={props.loadingStyle}\n        />\n      ) : (\n        <Text style={[buttonStyles.textStyle, props.textStyle]}>\n          {props.title}\n        </Text>\n      )}\n    </View>\n  </TouchableOpacity>\n);\n\nclass SignUpComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      emailError: '',\n      passwordError: '',\n      confirmPasswordError: '',\n      requestError: '',\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {requestError, user, success} = this.props;\n    if (prevProps.isLoading && requestError?.type === API_SIGNUP_FAILED) {\n      const error =\n        requestError.code == 400\n          ? 'This email is already registered or password is too weak.'\n          : requestError.message;\n\n      Alert.alert('Error', error);\n      this.setState({\n        requestError: error,\n      });\n    }\n    if (prevProps.isLoading && success && user !== {}) {\n      Alert.alert(\n        'Signup Success',\n        'Registration Successful. A confirmation will be sent to your e-mail address.',\n      );\n    }\n  }\n\n  onSignupPress = async () => {\n    const {email, password, confirmPassword} = this.state;\n    if (emailValidationRegex.test(email)) {\n      if (password != '') {\n        if (password == confirmPassword) {\n          this.props.signup(email, password);\n        } else {\n          this.setState({\n            confirmPasswordError: 'Confirm password and password do not match',\n          });\n        }\n      } else {\n        this.setState({passwordError: 'Please enter a valid password'});\n      }\n    } else {\n      this.setState({emailError: 'Please enter a valid email address'});\n    }\n  };\n\n  render() {\n    const {\n      email,\n      password,\n      emailError,\n      passwordError,\n      confirmPassword,\n      confirmPasswordError,\n    } = this.state;\n    return (\n      <KeyboardAvoidingView>\n        <View style={{marginVertical: 20, marginHorizontal: 15}}>\n          <TextInputField\n            keyboardType=\"email-address\"\n            label=\"Email address\"\n            placeholder=\"Email address\"\n            onChangeText={email => this.setState({email})}\n            value={email}\n            error={emailError}\n          />\n          <TextInputField\n            label=\"Password\"\n            placeholder=\"Password\"\n            secureTextEntry={true}\n            onChangeText={password => this.setState({password})}\n            value={password}\n            error={passwordError}\n          />\n          <TextInputField\n            label=\"Confirm Password\"\n            placeholder=\"Confirm Password\"\n            secureTextEntry={true}\n            onChangeText={confirmPassword => this.setState({confirmPassword})}\n            value={confirmPassword}\n            error={confirmPasswordError}\n          />\n        </View>\n        <Button\n          title=\"Sign Up\"\n          loading={this.props.isLoading}\n          onPress={this.onSignupPress}\n        />\n        {!!this.state.requestError && (\n          <Text style={textInputStyles.error}>\n            {this.state.requestError.message}\n          </Text>\n        )}\n      </KeyboardAvoidingView>\n    );\n  }\n}\n\nclass SignInComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      emailError: '',\n      passwordError: '',\n      authLoading: false,\n      fbLoading: false,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {requestError, token} = this.props;\n    if (prevProps.isLoading && requestError?.type === API_LOGIN_FAILED) {\n      Alert.alert('Login Error', requestError.message);\n    }\n    if (token) {\n      this.props.navigation.navigate(HOME_SCREEN_NAME);\n    }\n  }\n\n  onSigninPress = () => {\n    const {email, password} = this.state;\n    if (emailValidationRegex.test(email)) {\n      if (password != '') {\n        this.props.login(email, password);\n        this.setState({authLoading: false});\n      } else {\n        this.setState({passwordError: 'Please enter a valid password'});\n      }\n    } else {\n      this.setState({emailError: 'Please enter a valid email address'});\n    }\n  };\n  render() {\n    const {email, password, emailError, passwordError} = this.state;\n    return (\n      <KeyboardAvoidingView>\n        <View style={{marginVertical: 20, marginHorizontal: 15}}>\n          <TextInputField\n            keyboardType=\"email-address\"\n            label=\"Email address\"\n            placeholder=\"Email address\"\n            onChangeText={email => this.setState({email})}\n            value={email}\n            error={emailError}\n          />\n          <TextInputField\n            label=\"Password\"\n            placeholder=\"Password\"\n            secureTextEntry={true}\n            onChangeText={password => this.setState({password})}\n            value={password}\n            error={passwordError}\n          />\n        </View>\n        <Button\n          title=\"Login\"\n          loading={this.props.isLoading}\n          onPress={this.onSigninPress}\n        />\n        <View\n          style={{\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n          }}>\n          <TouchableOpacity\n            activeOpacity={0.7}\n            onPress={() => {\n              this.props.navigation.navigate('PasswordRecover');\n            }}>\n            <Text>Forgot your password?</Text>\n          </TouchableOpacity>\n        </View>\n      </KeyboardAvoidingView>\n    );\n  }\n}\n\nexport class Blank extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <ScrollView style={[styles.container]}>\n        <KeyboardAwareScrollView contentContainerStyle={{flex: 1}}>\n          <View style={[styles.container]}>\n            <View style={{flex: 1}}>\n              <View style={styles.imageContainer}>\n                <ImageBackground\n                  source={{\n                    uri: BACKGROUND_URL,\n                  }}\n                  style={{\n                    flex: 1,\n                    justifyContent: 'center',\n                    resizeMode: 'cover',\n                  }}>\n                  <Image\n                    source={{\n                      uri: LOGO_URL,\n                    }}\n                    style={{\n                      width: 155,\n                      height: 155,\n                      alignSelf: 'center',\n                      resizeMode: 'contain',\n                    }}\n                  />\n                </ImageBackground>\n              </View>\n            </View>\n            <View style={[styles.cardView]}>\n              <View style={{marginBottom: 20}}>\n                <Tabs\n                  tabBarUnderlineStyle={styles.tabBarUnderlineStyle}\n                  tabContainerStyle={styles.tabContainerStyle}>\n                  <Tab\n                    heading=\"Sign In\"\n                    activeTabStyle={styles.activeTabStyle}\n                    tabStyle={styles.tabStyle}\n                    activeTextStyle={styles.activeTextStyle}\n                    textStyle={styles.textStyle}>\n                    <SignInComponent {...this.props} />\n                  </Tab>\n                  <Tab\n                    heading=\"Sign Up\"\n                    activeTabStyle={styles.activeTabStyle}\n                    tabStyle={styles.tabStyle}\n                    activeTextStyle={styles.activeTextStyle}\n                    textStyle={styles.textStyle}>\n                    <SignUpComponent {...this.props} />\n                  </Tab>\n                </Tabs>\n              </View>\n            </View>\n          </View>\n        </KeyboardAwareScrollView>\n      </ScrollView>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.authReducer.token,\n    requestError: state.authReducer.error,\n    isLoading: state.authReducer.isLoading,\n    user: state.authReducer.user,\n    success: state.authReducer.success,\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: (email, password) =>\n      dispatch(apiLoginRequest({username: email, password})),\n    signup: (email, password) => dispatch(apiSignupRequest({email, password})),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Blank);\n",
      "parentDir": null,
      "newFile": true
    },
    "screens/constants.js": {
      "code": "export const LOGO_URL = \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/cb-icon.png\"\nexport const BACKGROUND_URL = \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/halfbg.png\"\nexport const emailValidationRegex = /^[^\\s]+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n// Change here the  name of the screen you want to redirect after Login\nexport const HOME_SCREEN_NAME = \"BlankScreen1186626\" ",
      "parentDir": null,
      "newFile": true
    },
    "screens/styles.js": {
      "code": "import {StyleSheet, Dimensions} from 'react-native';\nimport {scaleVertical, scale} from '../../../utils/scale';\nlet width = Dimensions.get('window').width;\nlet height = Dimensions.get('window').height;\n\nexport const Color = {\n  malibu: '#46E1FD',\n  white: '#fff',\n  whiteOff: '#F4F5F9',\n  steel: '#CCCCCC',\n  black: '#000',\n  facebook: '#3b5998',\n  red: 'red',\n};\n\nexport const styles = StyleSheet.create({\n  screen: {\n    flexDirection: 'column',\n    backgroundColor: 'white',\n    justifyContent: 'flex-start',\n    paddingHorizontal: 26,\n    alignItems: 'center',\n  },\n  input: {\n    backgroundColor: 'white',\n    //marginLeft: scale(10), marginRight: scale(10),\n    marginTop: scaleVertical(5),\n    marginBottom: scaleVertical(5),\n    borderRadius: 5,\n    borderColor: '#95989A',\n    padding: 5,\n    height: 40,\n    borderWidth: 1,\n    width: '100%',\n  },\n  label: {\n    fontWeight: 'bold',\n    color: '#979797',\n  },\n  fieldContainer: {\n    alignItems: 'flex-start',\n    width: '100%',\n    marginTop: scaleVertical(8),\n  },\n  heading: {\n    textAlign: 'center',\n    fontWeight: 'bold',\n    marginVertical: scaleVertical(25),\n    fontSize: 20,\n    fontFamily: 'Roboto-Bold',\n    color: '#707070',\n  },\n  actionButon: {\n    backgroundColor: Color.malibu,\n    borderWidth: 0,\n    marginLeft: scale(10),\n    marginRight: scale(10),\n    marginTop: scaleVertical(10),\n    marginBottom: scaleVertical(10),\n    borderRadius: 5,\n    height: 44,\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n  image: {\n    resizeMode: 'contain',\n    marginBottom: scale(10),\n    marginTop: scaleVertical(63),\n  },\n  textRow: {\n    textAlign: 'center',\n    color: '#707070',\n    fontSize: 14,\n    marginVertical: scaleVertical(5),\n    fontFamily: 'Roboto-Regular',\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n  buttons: {\n    flexDirection: 'row',\n    marginBottom: scaleVertical(24),\n    justifyContent: 'center',\n    display: 'none',\n  },\n  button: {\n    marginHorizontal: 14,\n    marginTop: 27.5,\n    alignSelf: 'center',\n    borderColor: '#ED6854',\n    borderWidth: 2,\n    padding: 15,\n    borderRadius: 32,\n    width: 64,\n    height: 64,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: 'black',\n    fontSize: 14,\n    paddingVertical: scaleVertical(5),\n  },\n  container: {\n    flex: 1,\n    backgroundColor: Color.whiteOff,\n  },\n  imageContainer: {width: width, height: height / 2},\n  cardView: {\n    marginTop: -80,\n    marginBottom: 20,\n    marginHorizontal: 20,\n    backgroundColor: Color.white,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n    borderRadius: 10,\n    elevation: 3,\n    shadowOffset: {height: 10, width: 10},\n    shadowOpacity: 0.3,\n    shadowColor: Color.steel,\n  },\n  tabBarUnderlineStyle: {\n    width: 50,\n    marginBottom: 10,\n    marginLeft: width / 6.2,\n    borderRadius: 130,\n    backgroundColor: Color.malibu,\n  },\n  tabContainerStyle: {\n    marginTop: 20,\n    elevation: 0,\n    paddingBottom: 20,\n    backgroundColor: Color.white,\n  },\n  activeTabStyle: {backgroundColor: Color.white},\n  tabStyle: {backgroundColor: Color.white},\n  activeTextStyle: {fontSize: 20, fontWeight: 'normal'},\n  textStyle: {fontSize: 20},\n});\nexport const buttonStyles = {\n  viewStyle: {\n    backgroundColor: Color.malibu,\n    borderRadius: 10,\n    borderColor: Color.black,\n    justifyContent: 'center',\n    marginHorizontal: 10,\n    marginBottom: 10,\n    height: 44,\n  },\n  textStyle: {\n    fontSize: 18,\n    textAlign: 'center',\n    color: Color.white,\n    marginHorizontal: 40,\n    marginVertical: 12,\n  },\n};\n\nexport const textInputStyles = {\n  textInput: {\n    borderColor: Color.steel,\n    borderWidth: 0.5,\n    borderRadius: 5,\n    fontSize: 18,\n    marginVertical: 10,\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    color: Color.black,\n  },\n  label: {color: '#6A6A6A', fontSize: 12},\n  error: {color: Color.red, fontSize: 9},\n};\n",
      "parentDir": null,
      "newFile": true
    }
  },
  "maps": {
    "README.md": {
      "code": "# Maps\n\n## Setup\n\nOpen `/src/navigator/mainNavigator.js` and import the stack navigator defined in `navigator.js`.\n\n```javascript\nimport Maps from \"../features/<module_directory>/navigator\";\n```\n\nAnd then add it to the navigation:\n\n```javascript\n//@BlueprintImportInsertion\nMaps: {\n  screen: Maps\n},\n```\n\nUpdate the map's initial location in:\n`src/features/<module_directory>/index.js`\n\nThis is the default value (San Francisco):\n\n```javascript\nconst region = {\n  latitude: 37.78825,\n  longitude: -122.4324,\n  latitudeDelta: 0.0922,\n  longitudeDelta: 0.0421,\n};\n```\n",
      "parentDir": null,
      "newFile": true
    },
    "index.js": {
      "code": "import React from \"react\";\nimport { View } from \"react-native\";\nimport { styles } from './styles'\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\n\nexport default function MapsScreen() {\n  const region = {\n    latitude: 37.78825,\n    longitude: -122.4324,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  }\n\n  return (\n    <View style={styles.view}>\n      <MapView\n        provider={PROVIDER_GOOGLE}\n        style={styles.map}\n        initialRegion={region}\n      />\n    </View>\n  );\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import React from 'react';\nimport { SlideMenuIcon } from '../../navigator/slideMenuIcon';\nimport { createStackNavigator } from \"react-navigation-stack\";\n\nimport Maps from \"./index\";\n\nexport default MapsNavigator = createStackNavigator({\n  Maps: {\n    screen: Maps,\n    navigationOptions: ({ navigation }) => ({\n      title: \"Maps\",\n      headerLeft: <SlideMenuIcon navigationProps={navigation} />,\n    })\n  }\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "styles.js": {
      "code": "import { StyleSheet } from 'react-native'\n\nimport { scale, scaleVertical } from '../../utils/scale'\n\nexport const styles = StyleSheet.create({\n  view: {\n    height: \"100%\"\n  },\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    height: 400,\n    width: 400,\n    justifyContent: \"flex-end\",\n    alignItems: \"center\"\n  },\n  map: {\n    ...StyleSheet.absoluteFillObject\n  },\n  searchbar: {\n    backgroundColor: 'white',\n    marginLeft: scale(10),\n    marginRight: scale(10),\n    marginTop: scaleVertical(5),\n    marginBottom: scaleVertical(5),\n    borderRadius: 12,\n    borderColor: '#E5E5E5',\n  },\n});\n",
      "parentDir": null,
      "newFile": true
    }
  },
  "splash": {
    "index.js": {
      "code": "import React, { Component } from \"react\";\nimport { StyleSheet, Image, Text, ScrollView, TouchableOpacity } from \"react-native\";\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nimport LogoIcon from \"../../assets/images/backgroundLoginV1.png\";\nimport { installed_blueprints } from \"../../config/installed_blueprints\";\nimport { styles } from './styles'\n\nexport default class App extends Component {\n\n  static navigationOptions = {\n    title: 'Installed blueprints',\n\n  };\n\n  renderItems() {\n    const {\n      navigation: { navigate },\n    } = this.props;\n\n    return installed_blueprints.map(item => {\n      if (item.hasOwnProperty('access_route')) {\n        return (\n          <TouchableOpacity\n            onPress={_ => navigate(item.access_route)}\n            style={styles.item}\n            key={`${item.name}--blueprint-button`}>\n            <Icon\n              style={styles.itemLogo}\n              name={item.icon_name ? item.icon_name : 'pencil-square-o'}\n              size={40}\n              color=\"#F88087\"\n            />\n            <Text style={styles.itemFont}>{item.human_name}</Text>\n          </TouchableOpacity>\n        );\n      }\n    });\n  }\n\n  render() {\n    return (\n      <ScrollView contentContainerStyle={styles.itemsContainer}>\n        {this.renderItems()}\n      </ScrollView>\n    );\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "styles.js": {
      "code": "import { StyleSheet } from 'react-native'\n\nexport const styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    display: 'flex',\n  },\n  itemsContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    marginTop: 30,\n  },\n  item: {\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#e3e3e3',\n    padding: 10,\n    color: 'black',\n    width: '48%',\n    margin: 2,\n  },\n  itemLogo: {\n  },\n  itemFont: {\n    color: 'black',\n    fontWeight: 'bold',\n    padding: 10\n  },\n\n  logo: {\n    width: \"100%\"\n  },\n  mainText: {\n    fontSize: 20,\n    fontFamily: \"Roboto-Medium\",\n    marginTop: 20,\n    color: \"#130D3C\"\n  },\n});\n",
      "parentDir": null,
      "newFile": true
    }
  },
  "user-profile": {
    "README.md": {
      "code": "# User Profile\n\nThe user Profile Screen is a React Native-based screen that allows the user to view other users' profiles and edit its own profile information.\n\n## Requirements\nFor this module to be fully functional, we recommend first installing and configuring the `Basic Login Signup` module available in the storyboard's list of verified modules.\n\n## Installation\n\nAfter you have added the screen module into your project, you will need to configure a few items by modifying the project files in the github repository. Please note to replace ####### with the numeric sequence for your screen (found in folder name under /src/features) and also that the @BluePrint tags for ImportInsertion and NavigationInsertion will be removed in future so placement is with other imports and inside the AppNavigator above other screens.\n\n### STEP 1: Check if your project has the necessary dependencies\n\nThe `react-native-elements` and `react-native-datepicker` dependencies are already available in all newly created mobile apps within Crowdbotics platform. However, make sure to double check if they exist in the `package.json` file at the root folder of your project directory. If they are not available, open this file (`package.json`) and add the dependency after the dependencies opening line \"_\"dependencies\": {_. It should look like this:\n\n```js\n\"dependencies\": {\n  \"react-native-elements\": \"^2.3.2\",\n  \"react-native-datepicker\": \"^1.7.2\",\n```\n\n### STEP 2: Add screen into your project screen navigation.\n\n#### Edit File /src/navigator/mainNavigator.js:\n**ADD** immediately below in the section labeled //@BlueprintImportInsertion:\n\n```js\nimport UserProfileNavigator from '../features/SimpleUserProfile#######/navigator';\n```\n\n**ADD** immediately below in the section inside AppNavigator definition labeled //@BlueprintNavigationInsertion section:\n\n```js\nUserProfile: { screen: UserProfileNavigator },\n```\n\n#### Edit File /src/config/installed_blueprints.js:\nOpen the file and add below the comment message `// access route is the route nate given to navigator`:\n\n```js\n{ name: 'UserProfile#######', human_name: 'User Profile', access_route: 'UserProfile' },\n```\n\nYou can define the `human_name` for any text that you desire it to display in the side menu.\n\n### STEP 3: Add reducers to store.\n\n**/src/store/index.js**\n**ADD** after Line 4 (sagas import):\n\n```js\nimport { userRootSaga, userReducer } from \"../features/UserProfile#######/store\"\n```\n\nUpdate your `createStore` code to include the `userReducer`. For example, if your store looks like this:\n```js\nconst store = createStore(\n  combineReducers({\n    apiReducer: apiReducer,\n    customReducer: customReducer,\n    authReducer: authReducer\n  }),\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n```\n\nYou should add the `userReducer: userReducer` after the authReducer, and it should then look like this:\n\n```js\nconst store = createStore(\n  combineReducers({\n    apiReducer: apiReducer,\n    customReducer: customReducer,\n    authReducer: authReducer,\n    userReducer: userReducer\n  }),\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n```\n\nNear the end of the file, before the `export { store }` line, register the new sagas `sagaMiddleware` like this:\n\n```js\nsagaMiddleware.run(userRootSaga);\n```\n\nOpen your \"../features/UserProfile#######/store/services.js\"  file check if you need to update your back-end api url at `baseURL`. By default, we use the url defined in the file `src/config/app.js`. If you rename your or use custom domains, you might need to replace that value with the proper back-end url, something like:\n`baseURL: \"https://mycustomdomain.com\"`\n\n### Step 4: Update Data Models\nGo to your Crowdbotics' app dashboard and navigate to the `Data Models` page. You will see a `User` model. Click on the user model, then click on `Edit Selected` to update the user model and edit the following:\n1. Check the box for `API` and add the following fields:\n- `first_name`: type as `CharField`\n- `last_name`: type as `CharField`\n- `birth_date`: type as `DateField`\n- `bio`: type as `CharField`\n\nIn the end, your data model should look like this:\n\n![model builder](https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/Screenshot_from_2021-01-05_16-05-28.png)\n\nAfter all the changes, click `save` for all the changes to be applied to your project.\n\n[Visit our knowledge base](https://knowledge.crowdbotics.com/what-is-the-model-editor-and-what-is-it-for) if you need help understanding Data Models.\n\n## Module Usage\nThere are two ways of using this module. First, is as a logged user profile page, where the user can view, edit and update their profile information. This module will behave like this by default.\n\nThe second use case is for displaying **other** users' information. For example, if you have a screen that lists all the users available in the platform, and when you click in a user name, you would like the hability to view that specific user details. For that, you need to add a navigation to the User Profile screen, and pass the user id as a parameter in the navigation call. In the code example below, whenever the button is clicked, it will navigate to the User profile screen and load the information of the user which their id equals to `123`.\n\n```js\n<Button\n  title=\"Go to User Profile\"\n  onPress={() => this.props.navigation.navigate(\"UserProfile\", {id: 123})}\n/>\n```\n                            \n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
      "parentDir": null,
      "newFile": true
    },
    "edit.js": {
      "code": "import React, { Component } from 'react';\nimport {\n  TextInput,\n  View,\n  Alert,\n  Text,\n  TouchableOpacity,\n  ActivityIndicator,\n} from 'react-native';\nimport DateTimePicker from 'react-native-datepicker';\nimport { Avatar } from 'react-native-elements';\nimport { inputStyles, Color, buttonStyles, styles } from './styles';\nimport { getInitials, transformLabel } from './utils';\nimport moment from 'moment';\n\nexport const Button = props => (\n  <TouchableOpacity onPress={props.onPress} disabled={props.loading}>\n    <View style={buttonStyles.view}>\n      {props.loading ? (\n        <ActivityIndicator color={Color.white} />\n      ) : (\n          <Text style={buttonStyles.text}>{props.title}</Text>\n        )}\n    </View>\n  </TouchableOpacity>\n);\n\nexport const InputContainer = props => (\n  <View>\n    <Text style={inputStyles.label}>{transformLabel(props.label)}</Text>\n    <View>\n      {props.isDate ? (\n        <DateTimePicker\n          style={[inputStyles.input, inputStyles.date]}\n          customStyles={{ dateInput: { borderWidth: 0 } }}\n          format=\"MM-DD-YYYY\"\n          mode=\"date\"\n          display=\"default\"\n          {...props}\n        />\n      ) : (\n          <TextInput\n            autoCapitalize=\"none\"\n            style={inputStyles.input}\n            placeholderTextColor={Color.steel}\n            underlineColorAndroid={'transparent'}\n            {...props}\n          />\n        )}\n      {!!props.error && <Text style={inputStyles.error}>{props.error}</Text>}\n    </View>\n  </View>\n);\n\nexport default class Edit extends Component {\n  constructor(props) {\n    super(props);\n    const birthdate = this.props.user.birth_date\n      ? new Date(this.props.user.birth_date)\n      : null;\n    this.state = {\n      initials: getInitials(this.props.user),\n      first_name: this.props.user.first_name,\n      last_name: this.props.user.last_name,\n      email: this.props.user.email,\n      birth_date: birthdate,\n      bio: this.props.user.bio,\n      loading: false,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { loading } = this.state;\n    const { api } = this.props;\n    if (prevProps.api.isLoading && !api.errors && loading) {\n      Alert.alert('User Updated', 'User information was successfully updated.');\n      this.setState({ loading: false });\n    }\n  }\n\n  onSaveProfile = () => {\n    this.setState({ loading: true });\n    const birthdate = this.state.birth_date\n      ? moment(this.state.birth_date, 'MM-DD-YYYY').format('YYYY-MM-DD')\n      : null;\n    this.props.updateUser(\n      {\n        id: this.props.user.id,\n        first_name: this.state.first_name,\n        last_name: this.state.last_name,\n        email: this.state.email,\n        bio: this.state.bio,\n        birth_date: birthdate,\n      },\n      this.props.token,\n    );\n  };\n\n  render() {\n    const { api } = this.props;\n    return (\n      <View>\n        <View style={styles.profileIcon}>\n          <Avatar\n            size=\"large\"\n            rounded\n            icon={{ name: 'user', type: 'font-awesome' }}\n            title={this.state.initials}\n            containerStyle={{ backgroundColor: Color.pink }}\n          />\n        </View>\n\n        <InputContainer\n          keyboardType=\"default\"\n          label=\"First Name\"\n          placeholder=\"John\"\n          onChangeText={value => this.setState({ first_name: value })}\n          value={this.state.first_name}\n        />\n        <InputContainer\n          keyboardType=\"default\"\n          label=\"Last Name\"\n          placeholder=\"Doe\"\n          onChangeText={value => this.setState({ last_name: value })}\n          value={this.state.last_name}\n        />\n        <InputContainer\n          keyboardType=\"email-address\"\n          label=\"Email Address\"\n          placeholder=\"email@email.com\"\n          onChangeText={value => this.setState({ email: value })}\n          value={this.state.email}\n          error={this.state.email ? '' : `E-mail address field is required.`}\n        />\n\n        <InputContainer\n          isDate={true}\n          label=\"Birth Date\"\n          placeholder=\"01/01/1900\"\n          maxDate={new Date()}\n          onDateChange={value => this.setState({ birth_date: value })}\n          date={this.state.birth_date}\n        />\n        <InputContainer\n          label=\"Bio\"\n          multiline={true}\n          numberOfLines={2}\n          placeholder=\"Write something about yourself.\"\n          onChangeText={value => this.setState({ bio: value })}\n          value={this.state.bio}\n        />\n        <Button\n          title=\"Save\"\n          loading={api.isLoading}\n          onPress={this.onSaveProfile}\n        />\n      </View>\n    );\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "index.js": {
      "code": "import React, { Component } from 'react';\nimport { View, ScrollView, ActivityIndicator } from 'react-native';\nimport { user_read, user_update } from './store/actions';\nimport { NavigationEvents } from 'react-navigation';\nimport { styles, Color } from './styles';\nimport { connect } from 'react-redux';\nimport EditUser from './edit';\nimport ViewUser from './view';\n\nexport class UserDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n    };\n  }\n\n  load() {\n    const { navigation } = this.props;\n    const { token, auth_user } = this.props;\n\n    if (!token && auth_user !== {}) {\n      this.props.navigation.navigate('BasicLoginSignup');\n      return;\n    }\n\n    const id = navigation.getParam('id', null) || auth_user.id;\n    this.props.getUser(id, token);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { loading } = this.state;\n    const { api } = this.props;\n\n    if (loading && prevProps.api.isLoading && !api.isLoading) {\n      this.setState({ loading: false });\n    }\n  }\n\n  render() {\n    const { loading } = this.state;\n    const { isEdit } = this.props;\n    return (\n      <ScrollView style={styles.container} contentStyle={styles.content}>\n        <NavigationEvents\n          onDidFocus={() => this.load()}\n          onWillFocus={() => this.setState({ loading: true })}\n          onDidBlur={() => {\n            this.props.navigation.setParams({ id: null });\n          }}\n        />\n        {loading ? (\n          <View>\n            <ActivityIndicator color={Color.steel} />\n          </View>\n        ) : (\n          <View>\n            {isEdit ? (\n              <EditUser {...this.props} />\n            ) : (\n              <ViewUser {...this.props} />\n            )}\n          </View>\n        )}\n      </ScrollView>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const id =\n    ownProps.navigation.getParam('id', null) || state.authReducer.user.id;\n\n  return {\n    token: state.authReducer.token,\n    auth_user: state.authReducer.user,\n    api: state.userReducer.api,\n    user: state.userReducer.users.find(user => user.id == id) || {},\n    isEdit: id === state.authReducer.user.id\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getUser: (id, token) => dispatch(user_read(id, token)),\n    updateUser: (data, token) => dispatch(user_update(data, token)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(UserDetail);\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import React from \"react\";\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { SlideMenuIcon } from '../../navigator/slideMenuIcon';\nimport UserProfile from './index';\n\nexport default (UserNavigator = createStackNavigator(\n  {\n    UserProfile: {\n      screen: UserProfile,\n      navigationOptions: ({ navigation }) => ({\n        title: 'User Profile',\n        headerLeft: <SlideMenuIcon navigationProps={navigation} />,\n      }),\n    },\n  },\n  {\n    initialRouteName: 'UserProfile',\n  },\n));\n",
      "parentDir": null,
      "newFile": true
    },
    "store/actions.js": {
      "code": "import * as types from './constants';\n\n\nexport const user_read = (id, token) => ({\n  type: types.USER_READ,\n  id,\n  token,\n});\n\nexport const user_read_succeeded = (response, starter) => ({\n  type: types.USER_READ_SUCCEEDED,\n  response,\n  starter\n});\n\nexport const user_read_failed = (response, starter) => ({\n  type: types.USER_READ_FAILED,\n  response,\n  starter\n});\n\nexport const user_list = token => ({\n  type: types.USER_LIST,\n  token,\n});\n\nexport const user_list_succeeded = (response, starter) => ({\n  type: types.USER_LIST_SUCCEEDED,\n  response,\n  starter\n});\n\nexport const user_list_failed = (response, starter) => ({\n  type: types.USER_LIST_FAILED,\n  response,\n  starter\n});\n\nexport const user_update = (data, token) => ({\n  type: types.USER_UPDATE,\n  data,\n  token,\n});\n\nexport const user_update_succeeded = (response, starter) => ({\n  type: types.USER_UPDATE_SUCCEEDED,\n  response,\n  starter\n});\n\nexport const user_update_failed = (response, starter) => ({\n  type: types.USER_UPDATE_FAILED,\n  response,\n  starter\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "store/constants.js": {
      "code": "export const USER_READ = 'USER_READ';\nexport const USER_READ_SUCCEEDED = 'USER_READ_SUCCEEDED';\nexport const USER_READ_FAILED = 'USER_READ_FAILED';\n\nexport const USER_UPDATE = 'USER_UPDATE';\nexport const USER_UPDATE_SUCCEEDED = 'USER_UPDATE_SUCCEEDED';\nexport const USER_UPDATE_FAILED = 'USER_UPDATE_FAILED';\n\nexport const USER_LIST = 'USER_LIST';\nexport const USER_LIST_SUCCEEDED = 'USER_LIST_SUCCEEDED';\nexport const USER_LIST_FAILED = 'USER_LIST_FAILED';\n",
      "parentDir": null,
      "newFile": true
    },
    "store/index.js": {
      "code": "import userRootSaga from './sagas';\nimport userReducer from './reducers';\n\nexport { userRootSaga, userReducer };\n",
      "parentDir": null,
      "newFile": true
    },
    "store/reducers.js": {
      "code": "\nimport * as types from './constants';\n\nconst INITIAL_STATE = {\n  api: {\n    isLoading: false,\n    errors: null,\n  },\n  users: [],\n};\n\nexport default function userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.USER_READ:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: true,\n          errors: null,\n        },\n      });\n    case types.USER_READ_SUCCEEDED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n          errors: null,\n        },\n        users: [\n          ...state.users?.filter(record => record.id !== action.response.data.id),\n          action.response.data,\n        ],\n      });\n    case types.USER_READ_FAILED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n          errors: action.response.message,\n        },\n      });\n    case types.USER_LIST:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: true,\n        },\n      });\n    case types.USER_LIST_SUCCEEDED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n        },\n        users: action.response.data,\n      });\n    case types.USER_LIST_FAILED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n          errors: action.response.message,\n        },\n      });\n    case types.USER_UPDATE:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: true,\n        },\n      });\n    case types.USER_UPDATE_SUCCEEDED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n        },\n        users: [\n          ...state.users.filter(record => record.id !== action.response.data.id),\n          action.response.data,\n        ],\n      });\n    case types.USER_UPDATE_FAILED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n          errors: action.response.message,\n        },\n      });\n    default:\n      return state;\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "store/sagas.js": {
      "code": "import { put, call, all, spawn, takeEvery } from 'redux-saga/effects';\nimport service from \"./services\"\nimport * as types from './constants';\nimport * as actions from './actions';\n\n// Get User\nfunction* userReadWorker(action) {\n  try {\n    const result = yield call(service.user_read, action);\n    yield put(actions.user_read_succeeded(result, action));\n  } catch (err) {\n    yield put(actions.user_read_failed(err, action));\n  }\n}\n\nfunction* userReadWatcher() {\n  yield takeEvery(types.USER_READ, userReadWorker)\n}\n\n// Get Users\nfunction* userListWorker(action) {\n  try {\n    const result = yield call(service.user_list, action);\n    yield put(actions.user_list_succeeded(result, action));\n  } catch (err) {\n    yield put(actions.user_list_failed(err, action));\n  }\n}\n\nfunction* userListWatcher() {\n  yield takeEvery(types.USER_LIST, userListWorker)\n}\n\n// Update User\nfunction* userUpdateWorker(action) {\n  try {\n    const result = yield call(service.user_update, action);\n    yield put(actions.user_update_succeeded(result, action));\n  } catch (err) {\n    yield put(actions.user_update_failed(err, action));\n  }\n}\n\nfunction* userUpdateWatcher() {\n  yield takeEvery(types.USER_UPDATE, userUpdateWorker)\n}\n\nexport default function* authRootSaga() {\n  const sagas = [\n    userReadWatcher,\n    userReadWatcher,\n    userListWatcher,\n    userUpdateWatcher\n  ];\n  yield all(\n    sagas.map(saga =>\n      spawn(function*() {\n        while (true) {\n          try {\n            yield call(saga);\n            break;\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      }),\n    ),\n  );\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "store/services.js": {
      "code": "import axios from 'axios';\nimport { appConfig } from '../../../config/app';\n\nconst usersAPI = axios.create({\n  baseURL: appConfig.emailAuthAPIEndPoint, // your app back-end url\n  headers: { Accept: 'application/json', 'Content-Type': 'application/json' },\n});\n\nfunction user_read(action) {\n  return usersAPI.get(`/api/v1/user/${action.id}/`, null, {\n    headers: {\n      Authorization: `Token ${action.token}`,\n    },\n  });\n}\n\nfunction user_update(action) {\n  return usersAPI.patch(`/api/v1/user/${action.data.id}/`, null, {\n    data: action.data,\n    headers: {\n      Authorization: `Token ${action.token}`,\n    },\n  });\n}\n\nfunction user_list(action) {\n  return usersAPI.get(`/api/v1/user/`, null, {\n    headers: {\n      Authorization: `Token ${action.token}`,\n    },\n  });\n}\n\nexport default {\n  user_read,\n  user_list,\n  user_update,\n};\n",
      "parentDir": null,
      "newFile": true
    },
    "styles.js": {
      "code": "import { StyleSheet } from 'react-native';\n\nexport const Color = {\n  malibu: '#46E1FD',\n  pink: '#e97d77',\n  white: '#fff',\n  whiteOff: '#F4F5F9',\n  steel: '#CCCCCC',\n  black: '#060606',\n  facebook: '#3b5998',\n  red: 'red',\n  gray: '#6A6A6A',\n};\n\nexport const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 20,\n    marginVertical: 20,\n    width: '100%',\n  },\n  content: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  header: {\n    fontSize: 25,\n    color: Color.gray,\n  },\n  profileIcon: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 5,\n  },\n  label: { color: Color.gray, fontSize: 12, fontWeight: 'bold' },\n  text: { color: Color.black, fontSize: 16, marginTop: 3, marginBottom: 12 },\n});\n\nexport const inputStyles = {\n  input: {\n    borderColor: Color.steel,\n    borderWidth: 0.9,\n    borderRadius: 6,\n    fontSize: 15,\n\n    marginVertical: 10,\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    color: Color.black,\n  },\n  date: { width: '100%', paddingVertical: 0 },\n  label: { color: Color.gray, fontSize: 12, fontWeight: 'bold' },\n  error: { color: Color.red, fontSize: 9 },\n};\n\nexport const buttonStyles = {\n  view: {\n    backgroundColor: Color.pink,\n    borderRadius: 10,\n    justifyContent: 'center',\n    marginHorizontal: 10,\n    marginBottom: 10,\n    height: 44,\n  },\n  text: {\n    fontSize: 18,\n    textAlign: 'center',\n    color: Color.white,\n    marginHorizontal: 40,\n    marginVertical: 15,\n  },\n};\n",
      "parentDir": null,
      "newFile": true
    },
    "utils.js": {
      "code": "export const getInitials = user => {\n  if (user && user.first_name && user.last_name) {\n    return `${user.first_name.charAt(0)}${user.last_name.charAt(0)}`;\n  }\n  return user?.email?.substring(0, 2).toUpperCase();\n};\n\nexport const transformLabel = label => label.toUpperCase().replace(/[-_]/g, ' ');\n",
      "parentDir": null,
      "newFile": true
    },
    "view.js": {
      "code": "import React, { Component } from 'react';\nimport { View, Text } from 'react-native';\nimport { Avatar } from 'react-native-elements';\nimport { Color, styles } from './styles';\nimport { getInitials, transformLabel } from './utils';\nimport moment from 'moment';\n\nconst UserInfo = props => (\n  <View>\n    <Text style={styles.label}>{transformLabel(props.label)}</Text>\n    <Text style={styles.text}>\n      {props.value ? props.value : 'Not available'}\n    </Text>\n  </View>\n);\n\nexport default class ViewUser extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { user } = this.props;\n    const birthday = user.birth_date\n      ? moment(user.birth_date, 'YYYY-MM-DD').format('LL')\n      : null;\n    const initials = getInitials(user);\n    return (\n      <View>\n        {user.id ? (\n          <View>\n            <View style={styles.profileIcon}>\n              <Avatar\n                size=\"large\"\n                rounded\n                icon={{ name: 'user', type: 'font-awesome' }}\n                title={initials}\n                containerStyle={{ backgroundColor: Color.pink }}\n              />\n            </View>\n            <UserInfo\n              label=\"Name\"\n              value={`${user.first_name} ${user.last_name}`}\n            />\n            <UserInfo label=\"Email\" value={user.email} />\n            <UserInfo label=\"Birthday\" value={birthday} />\n            <UserInfo label=\"Biography\" value={user.bio} />\n          </View>\n        ) : (\n          <Text style={styles.label}>No user information available.</Text>\n        )}\n      </View>\n    );\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    }
  }
}