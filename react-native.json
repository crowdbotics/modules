{
  "articles": {
    "README.md": {
      "code": "# Article List and Detail\n\n## Setup\n\nOpen `/src/navigator/mainNavigator.js` and import the stack navigator defined in `navigator.js`.\n\n```javascript\nimport Articles from \"../features/<module_directory>/navigator\";\n```\n\nAnd then add it to the navigation:\n\n```javascript\n//@BlueprintImportInsertion\nArticles: {\n  screen: Articles\n},\n```\n\nOpen `store/services.js` in the /src/features/article#####/ folder and update the `baseURL` with your application's URL followed by `/modules/articles` which is the endpoint (ie. demo0122202101-24002.botics.com/modules/articles). The initial piece is your project name and the numeric piece is your project number.\n\nAdd the module reducer and saga to your `/src/store/index.js` file:\n\n1. Add the imports\n\n```javascript\nimport articlesReducer from \"../features/<module_directory>/store/reducers\";\nimport articlesSagas from \"../features/<module_directory>/store/sagas\";\n```\n\n2. Add the reducer\n\n```\n   combineReducers({\n     apiReducer: apiReducer,\n     customReducer: customReducer,\n     articlesReducer: articlesReducer\n   }),\n```\n\n3. Add the root saga\n\n```\n  sagaMiddleware.run(rootSaga);\n  sagaMiddleware.run(customRootSaga);\n  sagaMiddleware.run(articlesSagas);\n```\n",
      "parentDir": null,
      "newFile": true
    },
    "article.js": {
      "code": "import React from 'react';\nimport { Text, View, ImageBackground } from 'react-native';\nimport { connect } from \"react-redux\";\nimport { styles } from \"./styles\";\n\nfunction Article(props) {\n  return (\n    <View>\n      <ImageBackground source={{ uri: props.article.image }} style={styles.image}>\n        <View style={styles.card}>\n          <Text style={styles.text}>\n            {props.article.title}\n          </Text>\n          <Text style={styles.author}>\n            {props.article.author}\n          </Text>\n        </View>\n      </ImageBackground>\n      <Text style={styles.body}>\n        {props.article.body}\n      </Text>\n    </View>\n  );\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const id = ownProps.navigation.getParam(\"id\", null);\n\n  return {\n    article: state.articlesReducer.articles.find(record => record.id == id)\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Article)\n",
      "parentDir": null,
      "newFile": true
    },
    "index.js": {
      "code": "import React, { Component } from 'react';\nimport {\n  Text,\n  FlatList,\n  View,\n  TouchableOpacity,\n  ImageBackground\n} from 'react-native';\nimport { styles } from \"./styles\";\nimport { connect } from \"react-redux\";\nimport reducer from \"./store/reducers\"\nimport { article_list } from \"./store/actions\";\n\nclass ArticleList extends Component {\n  componentDidMount() {\n    this.props.load();\n  }\n\n  renderItem = ({ item }) => (\n    <TouchableOpacity\n      onPress={() => {\n        this.props.navigation.navigate(this.props.detail, { id: item.id })\n      }}>\n      <ImageBackground source={{ uri: item.image }} style={styles.image}>\n        <View style={styles.card}>\n          <Text style={styles.text}>\n            {item.title}\n          </Text>\n          <Text style={styles.author}>\n            {item.author}\n          </Text>\n        </View>\n      </ImageBackground>\n    </TouchableOpacity>\n  );\n\n  render() {\n    const { articles } = this.props;\n    return (\n      <FlatList\n        data={articles}\n        renderItem={this.renderItem}\n        keyExtractor={item => `${item.id}`}\n      />\n    );\n\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const detail = ownProps.navigation.getParam(\"detail\", \"Article\");\n\n  return {\n    detail: detail,\n    articles: state.articlesReducer.articles,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    load: () => dispatch(article_list())\n  }\n}\n\nexport default {\n  name: \"Articles\",\n  screen: connect(mapStateToProps, mapDispatchToProps)(ArticleList),\n  reducer: reducer,\n  actions: [article_list]\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import React from 'react';\nimport { SlideMenuIcon } from '../../navigator/slideMenuIcon';\nimport { createStackNavigator } from \"react-navigation-stack\";\n\nimport Articles from \"./index\";\nimport Article from \"./article\";\n\nexport default ArticlesNavigator = createStackNavigator({\n  Articles: {\n    screen: Articles.screen,\n    navigationOptions: ({ navigation }) => ({\n      title: \"Article List\",\n      headerLeft: <SlideMenuIcon navigationProps={navigation} />,\n    }),\n    params: {\n      detail: \"Article\"\n    }\n  },\n  Article: {\n    screen: Article,\n  },\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "package.json": {
      "code": "{\n  \"name\": \"@modules/articles\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Module for articles lists and details pages.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\"\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "store/actions.js": {
      "code": "import * as types from \"./constants\"\n\nexport const article_list = () => ({ type: types.ARTICLE_LIST })\nexport const article_listSucceeded = (response, starter) => ({\n  type: types.ARTICLE_LIST_SUCCEEDED,\n  response,\n  starter\n})\nexport const article_listFailed = (response, starter) => ({\n  type: types.ARTICLE_LIST_FAILED,\n  response,\n  starter\n})\nexport const article_read = () => ({ type: types.ARTICLE_READ })\nexport const article_readSucceeded = (response, starter) => ({\n  type: types.ARTICLE_READ_SUCCEEDED,\n  response,\n  starter\n})\nexport const article_readFailed = (response, starter) => ({\n  type: types.ARTICLE_READ_FAILED,\n  response,\n  starter\n})\n",
      "parentDir": null,
      "newFile": true
    },
    "store/constants.js": {
      "code": "export const ARTICLE_LIST = \"ARTICLE_LIST\"\nexport const ARTICLE_LIST_SUCCEEDED = \"ARTICLE_LIST_SUCCEEDED\"\nexport const ARTICLE_LIST_FAILED = \"ARTICLE_LIST_FAILED\"\nexport const ARTICLE_READ = \"ARTICLE_READ\"\nexport const ARTICLE_READ_SUCCEEDED = \"ARTICLE_READ_SUCCEEDED\"\nexport const ARTICLE_READ_FAILED = \"ARTICLE_READ_FAILED\"\n",
      "parentDir": null,
      "newFile": true
    },
    "store/reducers.js": {
      "code": "import * as types from \"./constants\"\n\nconst initialState = {\n  api: {\n    isFetching: false,\n  },\n  articles: [],\n}\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case types.ARTICLE_LIST:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: true,\n        },\n      })\n    case types.ARTICLE_LIST_SUCCEEDED:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: false,\n        },\n        articles: [...state.articles, ...action.response]\n      })\n    case types.ARTICLE_LIST_FAILED:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: false,\n          errors: action.response\n        }\n      })\n    case types.ARTICLE_READ:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: true,\n        },\n      })\n    case types.ARTICLE_READ_SUCCEEDED:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: false,\n        },\n        articles: [\n          ...state.articles.filter(record => record.id !== action.response.id),\n          action.response\n        ]\n      })\n    case types.ARTICLE_LIST_FAILED:\n      return Object.assign({}, state, {\n        api: {\n          isFetching: false,\n          errors: action.response\n        }\n      })\n    default:\n      return state\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "store/sagas.js": {
      "code": "import { all, call, put, spawn, takeEvery } from \"redux-saga/effects\";\nimport * as types from \"./constants\"\nimport * as actions from \"./actions\"\nimport { article_list, article_read } from \"./services\"\n\nfunction* article_listWorker(action) {\n  try {\n    const result = yield call(article_list, action)\n    yield put(actions.article_listSucceeded(result.data, action))\n  } catch (err) {\n    yield put(actions.article_listFailed(err, action))\n  }\n}\n\nfunction* article_listWatcher() {\n  yield takeEvery(types.ARTICLE_LIST, article_listWorker)\n}\n\nfunction* article_readWorker(action) {\n  try {\n    const result = yield call(article_read, action)\n    yield put(actions.article_readSucceeded(result.data, action))\n  } catch (err) {\n    yield put(actions.article_readFailed(err, action))\n  }\n}\n\nfunction* article_readWatcher() {\n  yield takeEvery(types.ARTICLE_READ, article_readWorker)\n}\n\nexport default function* rootSaga() {\n  const sagas = [\n    article_listWatcher,\n    article_readWatcher\n  ]\n  yield all(\n    sagas.map(saga =>\n      spawn(function*() {\n        while (true) {\n          try {\n            yield call(saga)\n            break\n          } catch (e) {\n            console.log(e)\n          }\n        }\n      })\n    )\n  )\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "store/services.js": {
      "code": "import axios from \"axios\";\n\nconst articlesAPI = axios.create({\n  baseURL: \"https://app.botics.co/modules/articles\",\n  headers: {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n  }\n});\n\nexport function article_list(action) {\n  return articlesAPI.get(`/article`)\n}\n\nexport function article_read(action) {\n  return articlesAPI.get(`/article/${action.id}/`)\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "styles.js": {
      "code": "import { StyleSheet } from \"react-native\";\n\nexport const styles = StyleSheet.create({\n  card: {\n    padding: 10,\n  },\n  text: {\n    fontSize: 28,\n    color: '#ffffff',\n  },\n  author: {\n    fontSize: 18,\n    color: '#f2f2f2',\n  },\n  image: {\n    height: 250,\n    width: '100%',\n    justifyContent: 'flex-end',\n    backgroundColor: 'lightslategray',\n  },\n  body: {\n    padding: 10,\n    fontSize: 16\n  }\n});\n",
      "parentDir": null,
      "newFile": true
    }
  },
  "chat": {
    "README.md": {
      "code": "# Maps\n\n# Setup\n\nInstall the required dependencies:\n\n```sh\nyarn add moment prop-types pubnub-react react-native-gifted-chat react-native-keyboard-aware-scroll-view uuid\n```\n\nOpen `/src/navigator/mainNavigator.js` and import the stack navigator defined in `navigator.js`.\n\n```javascript\nimport Chat from \"../features/<module_directory>/navigator.js\";\n```\n\nAnd then add it to the navigation:\n\n```javascript\n//@BlueprintImportInsertion\nChat: {\n  screen: Chat\n},\n```\n",
      "parentDir": null,
      "newFile": true
    },
    "data/index.js": {
      "code": "import users from './raw/users';\nimport conversations from './raw/conversations';\n\nclass DataProvider {\n  getUser(id = 1) {\n    return users.find(x => x.id === id);\n  }\n\n  getConversation(userId = 1) {\n    return conversations.find(x => x.withUser.id === userId);\n  }\n\n  getChatList() {\n    return conversations;\n  }\n}\n\nexport const data = new DataProvider();\n",
      "parentDir": null,
      "newFile": true
    },
    "data/raw/conversations.js": {
      "code": "const images = [\n  require('../img/Image10.png'),\n  require('../img/Image11.png'),\n  require('../img/Image2.png'),\n  require('../img/Image3.png'),\n  require('../img/Image4.png'),\n  require('../img/Image1.png'),\n  require('../img/Image12.png'),\n  require('../img/Image8.png'),\n  require('../img/Image6.png'),\n  require('../img/Image9.png'),\n  require('../img/Image5.png'),\n  require('../img/Image7.png'),\n];\n\nexport const Conversations = [\n  {\n    withUserId: 1,\n    withUser: {\n      id: 1,\n      firstName: 'Helen',\n      lastName: 'Gilbert',\n      phone: '+1 415 670 90 34',\n      country: 'Belarus',\n      email: 'h.gilbert@akveo.com',\n      password: '123456',\n      newPassword: '12345678',\n      confirmPassword: '12345678',\n      photo: require('../img/avatars/Image9.png'),\n      postCount: 86,\n      followersCount: 22102,\n      followingCount: 536,\n      images,\n    \n    },\n    messages: [\n      {\n        id: 0,\n        type: 'out',\n        time: -300,\n        text: 'Hey, how’ve you been?',\n      },\n      {\n        id: 1,\n        time: -240,\n        type: 'in',\n        text: 'Yeah, not bad, actually I finally got a call back from that job that I interviewed for, and guess what? I got it!',\n      },\n      {\n        id: 2,\n        time: -230,\n        type: 'out',\n        text: 'Awesome! Yeah, well done, that’s really great to hear. Do you start right away?',\n      },\n      {\n        id: 3,\n        time: -100,\n        type: 'out',\n        text: 'Well, uhm yes and no, I go in for training tomorrow, but I don’t really start until next week. ' +\n        'Do you have some time this weekend, maybe we could get together?',\n      },\n      {\n        id: 4,\n        time: -45,\n        type: 'in',\n        text: 'I’ve got a lot planned this weekend, just running around, doing loads of stuff, but Friday’s pretty open.',\n      },\n      {\n        id: 5,\n        time: -5,\n        type: 'out',\n        text: 'That works pretty well for me!',\n      }],\n  },\n  {\n    withUserId: 5,\n    withUser: {\n      id: 5,\n      firstName: 'Clayton',\n      lastName: 'O\\'Mullaney',\n      email: 'cmullaney4@tripadvisor.com',\n      country: 'Philippines',\n      password: 'ZlzECwoN',\n      newPassword: 'N9l5KLpBW',\n      confirmPassword: 'N9l5KLpBW',\n      postCount: 37,\n      phone: '63-(210)188-9126',\n      followingCount: 745,\n      followersCount: 2703,\n      images,\n      photo: require('../img/avatars/Image5.png'),\n    },\n    messages: [\n      {\n        id: 0,\n        type: 'out',\n        time: -300,\n        text: 'I have no idea what to buy for Mary for her birthday.',\n      },\n      {\n        id: 1,\n        time: -240,\n        type: 'in',\n        text: 'Me, neither! Would you like to go in and buy her a gift together?',\n      },\n      {\n        id: 2,\n        time: -100,\n        type: 'out',\n        text: 'If I remember right, she likes music, skiing, and reading',\n      },\n      {\n        id: 3,\n        time: -45,\n        type: 'out',\n        text: 'You know, maybe we could get her some concert tickets. Who would know her favorite groups?',\n      },\n      {\n        id: 4,\n        time: -25,\n        type: 'in',\n        text: 'Her roommate, Malia, might know what her favorite groups are.',\n      },\n      {\n        id: 5,\n        time: -5,\n        type: 'out',\n        text: 'Cool! Let\\'s give Malia a call and ask her for her help right now',\n      }],\n  },\n];\n\nexport default Conversations;\n",
      "parentDir": null,
      "newFile": true
    },
    "data/raw/users.js": {
      "code": "const images = [\n  require('../img/Image10.png'),\n  require('../img/Image11.png'),\n  require('../img/Image2.png'),\n  require('../img/Image3.png'),\n  require('../img/Image4.png'),\n  require('../img/Image1.png'),\n  require('../img/Image12.png'),\n  require('../img/Image8.png'),\n  require('../img/Image6.png'),\n  require('../img/Image9.png'),\n  require('../img/Image5.png'),\n  require('../img/Image7.png'),\n];\n\nconst users = [{\n  id: 1,\n  firstName: 'Helen',\n  lastName: 'Gilbert',\n  phone: '+1 415 670 90 34',\n  country: 'Belarus',\n  email: 'h.gilbert@akveo.com',\n  password: '123456',\n  newPassword: '12345678',\n  confirmPassword: '12345678',\n  photo: require('../img/avatars/Image9.png'),\n  postCount: 86,\n  followersCount: 22102,\n  followingCount: 536,\n  images,\n\n},\n{\n  id: 2,\n  firstName: 'Emilie',\n  lastName: 'McDiarmid',\n  email: 'emcdiarmid1@yale.edu',\n  country: 'China',\n  password: 'YyKgJ8A3b4b',\n  newPassword: 'DpCRPYW7Fgy',\n  confirmPassword: 'DpCRPYW7Fgy',\n  postCount: 95,\n  phone: '86-(261)670-4133',\n  followingCount: 975,\n  followersCount: 1703,\n  images,\n  photo: require('../img/avatars/Image1.png'),\n},\n{\n  id: 3,\n  firstName: 'Sandra',\n  lastName: 'Paver',\n  email: 'spaver2@ox.ac.uk',\n  country: 'Greece',\n  password: '0BCeHRlt84Zo',\n  newPassword: '61BaifSE20w',\n  confirmPassword: '61BaifSE20w',\n  postCount: 60,\n  phone: '30-(524)246-5851',\n  followingCount: 736,\n  followersCount: 1534,\n  images,\n  photo: require('../img/avatars/Image3.png'),\n},\n{\n  id: 4,\n  firstName: 'Nancy',\n  lastName: 'O\\'Crevan',\n  email: 'nocrevan3@zimbio.com',\n  country: 'China',\n  password: 'W0NxvHo2C',\n  newPassword: 'vj4ueTKK',\n  confirmPassword: 'vj4ueTKK',\n  postCount: 78,\n  phone: '86-(499)721-5796',\n  followingCount: 86,\n  followersCount: 3303,\n  images,\n  photo: require('../img/avatars/Image4.png'),\n},\n{\n  id: 5,\n  firstName: 'Clayton',\n  lastName: 'O\\'Mullaney',\n  email: 'cmullaney4@tripadvisor.com',\n  country: 'Philippines',\n  password: 'ZlzECwoN',\n  newPassword: 'N9l5KLpBW',\n  confirmPassword: 'N9l5KLpBW',\n  postCount: 37,\n  phone: '63-(210)188-9126',\n  followingCount: 745,\n  followersCount: 2703,\n  images,\n  photo: require('../img/avatars/Image5.png'),\n},\n{\n  id: 6,\n  firstName: 'Carlee',\n  lastName: 'Aubry',\n  email: 'caubry5@nytimes.com',\n  country: 'China',\n  password: 'jUIz9PNbU',\n  newPassword: 'nJRP3MdIh4U',\n  confirmPassword: 'nJRP3MdIh4U',\n  postCount: 89,\n  phone: '86-(939)186-9659',\n  followingCount: 444,\n  followersCount: 8432,\n  images,\n  photo: require('../img/avatars/Image6.png'),\n},\n{\n  id: 7,\n  firstName: 'Patrick',\n  lastName: 'Holden',\n  email: 'p.holden6@woothemes.com',\n  country: 'Indonesia',\n  password: 'inOEsoAlnh',\n  newPassword: '60z2bgL',\n  confirmPassword: '60z2bgL',\n  postCount: 48,\n  phone: '62-(373)613-7229',\n  followingCount: 731,\n  followersCount: 18230,\n  images,\n  photo: require('../img/avatars/Image7.png'),\n},\n{\n  id: 8,\n  firstName: 'Edward',\n  lastName: 'Storton',\n  email: 'estorton7@google.ca',\n  country: 'Nigeria',\n  password: 'e1H56GRP',\n  newPassword: 't2a1FbI8oCo',\n  confirmPassword: 't2a1FbI8oCo',\n  postCount: 100,\n  phone: '234-(135)610-8989',\n  followingCount: 667,\n  followersCount: 4234,\n  images,\n  photo: require('../img/avatars/Image8.png'),\n},\n{\n  id: 9,\n  firstName: 'Carole',\n  lastName: 'Blundon',\n  email: 'cblundon8@google.pl',\n  country: 'United States',\n  password: 't9xI6skPz',\n  newPassword: 'y84Jquaxg8',\n  confirmPassword: 'y84Jquaxg8',\n  postCount: 74,\n  phone: '1-(913)904-8423',\n  followingCount: 750,\n  followersCount: 1032,\n  images,\n  photo: require('../img/avatars/Image10.png'),\n},\n{\n  id: 10,\n  firstName: 'Bryce',\n  lastName: 'Curle',\n  email: 'bcurled@paginegialle.it',\n  country: 'Indonesia',\n  password: 'ACCsjlPq',\n  newPassword: 'm05jBM1S88',\n  confirmPassword: 'm05jBM1S88',\n  postCount: 54,\n  phone: '62-(688)911-5487',\n  followingCount: 343,\n  followersCount: 3721,\n  images,\n  photo: require('../img/avatars/Image11.png'),\n},\n{\n  id: 11,\n  firstName: 'Babara',\n  lastName: 'Greasty',\n  email: 'bgreastya@netlog.com',\n  country: 'Russia',\n  password: '0SuOdS8XQK',\n  newPassword: 'f49mZd49eGHm',\n  confirmPassword: 'f49mZd49eGHm',\n  postCount: 58,\n  phone: '7-(121)282-0448',\n  followingCount: 165,\n  followersCount: 5433,\n  images,\n  photo: require('../img/avatars/Image12.png'),\n}];\n\nexport default users;\n",
      "parentDir": null,
      "newFile": true
    },
    "index.js": {
      "code": "import React from 'react';\nimport {\n  FlatList,\n  View,\n  Platform,\n  Image,\n  TouchableOpacity,\n  Text,\n  TextInput,\n  Keyboard,\n  InteractionManager,\n  StyleSheet\n} from 'react-native';\nimport { data } from './data';\nimport { scale } from './utils.js';\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport { NavigationType } from './utils.js';\n\nconst moment = require('moment');\n\nclass _Chat extends React.Component {\n  static propTypes = {\n    navigation: NavigationType.isRequired,\n  };\n  static navigationOptions = ({ navigation }) => {\n    const userId = navigation.state.params ? navigation.state.params.userId : undefined;\n    const user = data.getUser(userId);\n    return ({\n      headerTitle: _Chat.renderNavigationTitle(navigation, user),\n      headerRight: _Chat.renderNavigationAvatar(navigation, user),\n\n    });\n  };\n\n  constructor(props) {\n    super(props);\n    const userId = undefined;\n    this.state = {\n      data: data.getConversation(userId),\n    };\n    this.listRef = React.createRef();\n  }\n\n  componentDidMount() {\n    InteractionManager.runAfterInteractions(() => {\n      this.listRef.current.scrollToEnd();\n    });\n  }\n\n  extractItemKey = (item) => `${item.id}`;\n\n  scrollToEnd = () => {\n    if (Platform.OS === 'ios') {\n      this.listRef.current.scrollToEnd();\n    } else {\n      setTimeout(() => this.listRef.current.scrollToEnd(), 100);\n    }\n  };\n\n  onInputChanged = (text) => {\n    this.setState({ message: text });\n  };\n\n  onSendButtonPressed = () => {\n    if (!this.state.message) {\n      return;\n    }\n    this.state.data.messages.push({\n      id: this.state.data.messages.length, time: 0, type: 'out', text: this.state.message,\n    });\n    this.setState({ message: '' });\n    this.scrollToEnd(true);\n  };\n\n  static onNavigationTitlePressed = (navigation, user) => {\n    navigation.navigate('ProfileV1', { id: user.id });\n  };\n\n  static onNavigationAvatarPressed = (navigation, user) => {\n    navigation.navigate('ProfileV1', { id: user.id });\n  };\n\n  static renderNavigationTitle = (navigation, user) => (\n    <TouchableOpacity onPress={() => _Chat.onNavigationTitlePressed(navigation, user)}>\n      <View style={{ alignItems: 'center' }}>\n        <Text category='s1' style={{ color: 'black' }}>{`${user.firstName} ${user.lastName}`}</Text>\n        <Text category='c1' style={{ color: 'grey' }}>Online</Text>\n      </View>\n    </TouchableOpacity>\n  );\n\n  static renderNavigationAvatar = (navigation, user) => (\n    <TouchableOpacity onPress={() => _Chat.onNavigationAvatarPressed(navigation, user)}>\n      <Image source={user.photo} />\n    </TouchableOpacity>\n  );\n\n  renderDate = (date) => (\n    <Text style={styles.time} category='c2' appearance='hint'>\n      {moment().add(date, 'seconds').format('LT')}\n    </Text>\n  );\n\n  renderItem = ({ item }) => {\n    const isIncoming = item.type === 'in';\n    const backgroundColor = isIncoming\n      ? styles.messageInBackground\n      : styles.messageOutBackground;\n    const itemStyle = isIncoming ? styles.itemIn : styles.itemOut;\n\n    return (\n      <View style={[styles.item, itemStyle]}>\n        {!isIncoming && this.renderDate(item.time)}\n        <View style={[styles.balloon, backgroundColor]}>\n          <Text category='p1' style={styles.text} style={[{ paddingTop: 5 }, styles.text]}>{item.text}</Text>\n        </View>\n        {isIncoming && this.renderDate(item.time)}\n      </View>\n    );\n  };\n\n  render = () => {\n    return (\n      <KeyboardAwareScrollView\n        style={styles.container}\n        onResponderRelease={Keyboard.dismiss}>\n        <FlatList\n          ref={this.listRef}\n          extraData={this.state}\n          style={styles.list}\n          data={this.state.data.messages}\n          keyExtractor={this.extractItemKey}\n          renderItem={this.renderItem}\n        />\n        <View style={styles.footer}>\n          <TouchableOpacity style={styles.plus}>\n            <Text category='h1' status='success'>+</Text>\n          </TouchableOpacity>\n          <TextInput\n            onFocus={this.scrollToEnd}\n            onBlur={this.scrollToEnd}\n            onChangeText={this.onInputChanged}\n            value={this.state.message}\n            placeholder=\"Type a text...\"\n            style={styles.input}\n            textStyle={styles.text}\n          />\n          <TouchableOpacity onPress={this.onSendButtonPressed} style={styles.send} >\n            <Image source={require('./data/sendIcon.png')} />\n          </TouchableOpacity>\n        </View>\n      </KeyboardAwareScrollView>\n\n    )\n  }\n}\n\nexport const theme = {\n  \"color-danger-400\": \"#ff708d\",\n  \"color-basic-100\": \"white\",\n  \"color-basic-300\": \"#edf0f4\",\n  \"color-basic-400\": \"#dde1eb\",\n  \"color-basic-500\": \"#C5CEE0\",\n};\n\nconst styles = StyleSheet.create({\n  header: {\n    alignItems: 'center',\n  },\n  avatar: {\n    marginRight: 16,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: theme['color-basic-100'],\n  },\n  list: {\n    paddingHorizontal: 17,\n  },\n  footer: {\n    flexDirection: 'row',\n    minHeight: 60,\n    padding: 10,\n    backgroundColor: theme['color-basic-300'],\n    alignItems: 'center',\n\n  },\n  item: {\n    marginVertical: 14,\n    flex: 1,\n    flexDirection: 'row',\n  },\n  itemIn: {},\n  itemOut: {\n    alignSelf: 'flex-end',\n  },\n  balloon: {\n    maxWidth: scale(250),\n    paddingHorizontal: 15,\n    paddingTop: 10,\n    paddingBottom: 15,\n    borderRadius: 20,\n  },\n  time: {\n    alignSelf: 'flex-end',\n    margin: 15,\n  },\n  plus: {\n    paddingVertical: 10,\n    paddingHorizontal: 10,\n    marginRight: 7,\n  },\n  send: {\n    width: 40,\n    height: 40,\n    marginLeft: 10,\n    borderColor: theme[\"color-danger-400\"],\n    backgroundColor: theme[\"color-danger-400\"],\n    borderWidth: 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 25,\n  },\n  messageInBackground: {\n    backgroundColor: theme['color-basic-300']\n  },\n  messageOutBackground: {\n    backgroundColor: theme['color-basic-500']\n  },\n  text: {\n    color: theme['color-basic-1000']\n  },\n  input: {\n    backgroundColor: theme['color-basic-100'],\n    borderColor: theme['color-basic-400'],\n    borderRadius: 25,\n    flex: 1,\n\n  },\n});\n\nexport default {\n  name: \"Chat\",\n  screen: _Chat,\n  reducer: null,\n  actions: null\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "list.js": {
      "code": "import React from 'react';\nimport { Text, TextInput, Image, FlatList, View, StyleSheet, TouchableOpacity } from 'react-native';\nimport { filter } from 'lodash';\nimport { data } from './data';\nimport { NavigationType } from './utils.js';\nimport { theme } from './index.js';\n\nconst moment = require('moment');\n\nexport default class _ChatList extends React.Component {\n  static propTypes = {\n    navigation: NavigationType.isRequired,\n  };\n  static navigationOptions = {\n    title: 'Chat List'.toUpperCase(),\n    headerBackTitle: null,\n  };\n\n  state = {\n    data: {\n      original: data.getChatList(),\n      filtered: data.getChatList(),\n    },\n  };\n\n  extractItemKey = item => `${item.withUserId}`;\n\n  onInputChanged = text => {\n    const pattern = new RegExp(text, 'i');\n    const chats = filter(this.state.data.original, chat => {\n      const filterResult = {\n        firstName: chat.withUser.firstName.search(pattern),\n        lastName: chat.withUser.lastName.search(pattern),\n      };\n      return filterResult.firstName !== -1 || filterResult.lastName !== -1\n        ? chat\n        : undefined;\n    });\n    this.setState({\n      data: {\n        original: this.state.data.original,\n        filtered: chats,\n      },\n    });\n  };\n\n  onItemPressed = item => {\n    const navigationParams = { userId: item.withUser.id };\n    this.props.navigation.navigate('Chat', navigationParams);\n  };\n\n  renderSeparator = () => <View style={styles.separator} />;\n\n  renderHeader = () => (\n    <View style={styles.searchContainer}>\n      <TextInput\n        autoCapitalize=\"none\"\n        autoCorrect={false}\n        onChangeText={this.onInputChanged}\n        placeholder=\"Search\"\n        style={styles.input}\n        textStyle={styles.text}\n      />\n    </View>\n  );\n\n  renderItem = ({ item }) => {\n    const last = item.messages[item.messages.length - 1];\n    return (\n      <TouchableOpacity onPress={() => this.onItemPressed(item)}>\n        <View style={styles.container}>\n          <Image\n            source={item.withUser.photo}\n            style={styles.avatar}\n          />\n          <View style={styles.content}>\n            <View style={styles.contentHeader}>\n              <Text\n                category=\"s1\"\n                style={\n                  styles.text\n                }>{`${item.withUser.firstName} ${item.withUser.lastName}`}</Text>\n              <Text\n                category=\"c1\"\n                appearance=\"hint\"\n                style={styles.textTime}>\n                {moment()\n                  .add(last.time, 'seconds')\n                  .format('LT')}\n              </Text>\n            </View>\n            <Text\n              numberOfLines={2}\n              category=\"p2\"\n              style={[{ paddingTop: 5 }, styles.text]}>\n              {last.text}\n            </Text>\n          </View>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  render = () => {\n    return (\n      <FlatList\n        style={styles.root}\n        data={this.state.data.filtered}\n        extraData={this.state}\n        ListHeaderComponent={this.renderHeader}\n        ItemSeparatorComponent={this.renderSeparator}\n        keyExtractor={this.extractItemKey}\n        renderItem={this.renderItem}\n      />\n    );\n  };\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    backgroundColor: theme['color-basic-100'],\n  },\n  avatar: {\n    width: 100,\n    height: 100,\n    borderRadius: 50\n  },\n  searchContainer: {\n    backgroundColor: theme['color-basic-300'],\n    // paddingHorizontal: 16,\n    padding: 10,\n    // height: 60,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  container: {\n    paddingLeft: 19,\n    paddingRight: 16,\n    paddingBottom: 12,\n    paddingTop: 7,\n    flexDirection: 'row',\n  },\n  content: {\n    marginLeft: 16,\n    flex: 1,\n  },\n  contentHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 6,\n  },\n  separator: {\n    height: StyleSheet.hairlineWidth,\n    backgroundColor: theme['color-basic-400'],\n  },\n  text: {\n    color: theme['color-basic-1000'],\n  },\n  textTime: {\n    color: theme['color-basic-600'],\n    marginTop: 5,\n  },\n  input: {\n    backgroundColor: theme['color-basic-100'],\n    borderColor: theme['color-basic-400'],\n    borderRadius: 25,\n    padding: 15,\n    width: \"100 %\"\n  },\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import React from 'react';\nimport { SlideMenuIcon } from '../../navigator/slideMenuIcon';\nimport { createStackNavigator } from \"react-navigation-stack\";\n\nimport Chat from \"./index\";\n\nexport default ChatNavigator = createStackNavigator({\n  Chat: {\n    screen: Chat.screen,\n    navigationOptions: ({ navigation }) => ({\n      title: \"Chat\",\n      headerLeft: <SlideMenuIcon navigationProps={navigation} />,\n    }),\n  }\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "package.json": {
      "code": "{\n  \"name\": \"@modules/chat\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A set of screens to display chat conversations in a list and 1-to-1 messaging\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {},\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"moment\": \"^2.29.1\",\n    \"prop-types\": \"^15.7.2\",\n    \"pubnub-react\": \"^1.3.2\",\n    \"react-native-gifted-chat\": \"^0.16.3\",\n    \"react-native-keyboard-aware-scroll-view\": \"^0.9.3\",\n    \"uuid\": \"^8.3.2\"\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "pubnub.js": {
      "code": "import React from 'react'\nimport { GiftedChat } from 'react-native-gifted-chat'\nimport PubNubReact from 'pubnub-react';\nimport uuid from 'uuid'\n\nexport const appConfig = {\n  pubPublishKey: 'pub-c-09038c51-029c-47a7-95f2-b6c7407afb12',\n  pubSubscribeKey: 'sub-c-6b1bee04-ba9f-11e9-8753-ce76e7dc5905'\n};\n\nexport default class ChatScreen extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.pubnub = new PubNubReact({\n      publishKey: appConfig.pubPublishKey,\n      subscribeKey: appConfig.pubSubscribeKey\n    });\n\n    this.state = {\n      messages: [],\n    }\n\n    this.pubnub.init(this);\n\n    this.id = this.randomid();\n  }\n\n  randomid = () => {\n    return uuid()\n  };\n\n  componentWillUnmount() {\n    this.pubnub.unsubscribe({ channels: ['ReactChat'] });\n  }\n\n  componentDidMount() {\n    this.pubnub.subscribe({\n      channels: [\"ReactChat\"],\n      message: message => console.log(\"sub\", message),\n    });\n\n    this.pubnub.getMessage(\"ReactChat\", m => {\n      this.setState(previousState => ({\n        messages: GiftedChat.append(previousState.messages, m[\"message\"]),\n      }));\n    });\n  }\n\n  onSend(messages = []) {\n    this.pubnub.publish({\n      message: messages,\n      channel: \"ReactChat\",\n    });\n  }\n\n  render() {\n    return (\n      <GiftedChat\n        messages={this.state.messages}\n        onSend={messages => this.onSend(messages)}\n        user={{\n          _id: this.id,\n          name: 'React Native',\n          avatar: 'https://i.pravatar.cc/140',\n        }}\n      />\n    )\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "utils.js": {
      "code": "import { Dimensions } from 'react-native';\n\nconst { width, height } = Dimensions.get('window');\n\n// Guideline sizes are based on standard ~5\" screen mobile device\nconst guidelineBaseWidth = 350;\nconst guidelineBaseHeight = 680;\n\nconst scale = size => (width / guidelineBaseWidth) * size;\nconst scaleVertical = size => (height / guidelineBaseHeight) * size;\nconst scaleModerate = (size, factor = 0.5) => size + ((scale(size) - size) * factor);\n\nexport { scale, scaleVertical, scaleModerate };\n\nimport PropTypes from 'prop-types';\n\nconst shape = (propShape) => PropTypes.shape(propShape);\n\nconst functionTypes = {\n  goBack: PropTypes.func,\n  navigate: PropTypes.func,\n};\n\nexport const NavigationType = shape({\n  goBack: functionTypes.goBack.isRequired,\n  navigate: functionTypes.navigate.isRequired,\n});\n",
      "parentDir": null,
      "newFile": true
    }
  },
  "login": {
    "README.md": {
      "code": "# Login Signup Screen\n\nThe Login Signup Screen is a React Native-based screen that allows the user to login or signup.\n\n## Installation\n\nAfter you have added the screen module into your project, you will need to configure a few items by modifying the project files in the github repository. Please note to replace ####### with the numeric sequence for your screen (found in folder name under `/src/features`), and also that the @BluePrint tags for ImportInsertion and NavigationInsertion will be removed in future so placement is with other imports and inside the AppNavigator above other screens.\n\n### STEP 1: Add dependency library to the project.\n\n**/PROJECT_ROOT_DIRECTORY/package.json:**\n\n**ADD** Dependency after Line 16 (dependencies opening line \"_\"dependencies\": {_ \")\n\n```js\n  \"native-base\": \"^2.13.15\",\n```\n\n### STEP 2: Add screen into your project screen navigation.\n\n**/src/navigator/mainNavigator.js:**\n**ADD** immediately below in the section labeled //@BlueprintImportInsertion:\n\n`import LoginAndSignup#######Navigator from '../features/LoginAndSignup#######/navigator';`\n\n**ADD** immediately below in the section inside AppNavigator definition labeled //@BlueprintNavigationInsertion section:\n\n`LoginAndSignup: { screen: LoginAndSignup#######Navigator },`\n\n### STEP 3: Add reducers to store.\n\n**/src/store/index.js**\n**ADD** after Line 4 (sagas import):\n\n```js\nimport authRootSaga from \"../features/LoginAndSignup#######/auth/sagas\";\nimport authReducer from \"../features/LoginAndSignup#######/auth/reducers\";\n```\n\nLocate the store creation with `createStore`, **ADD** comma at end of `customReducer` and **ADD** below the following code `authReducer: authReducer`.\n\nThis is how your createStore should look like after modifications:\n\n```js\nconst store = createStore(\n  combineReducers({\n    apiReducer: apiReducer,\n    customReducer: customReducer,\n    authReducer: authReducer,\n  }),\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n```\n\nNear the end, before the `export { store }` line, register the new sagas `sagaMiddleware` like this:\n\n```js\nsagaMiddleware.run(authRootSaga);\n```\n\n### STEP 4: Change Login screen destination to your desired screen (likely Home screen).\n\nOpen the `screens/constants.js` file and edit the `HOME_SCREEN_NAME` value with desired destination screen (likely Home Screen). For example, if my home screen is called `HomeScreen1234535`, then I should change as follows: `export const HOME_SCREEN_NAME = 'HomeScreen1234535'`. If you desire, you can also update your logo image URL (be mindful that the size of the image should match the original ones for ideal results).\n\n### STEP 5: Modify backend\n\nIf your app's back-end does not have SENDGRID environmental variables available, _Make changes to project backend files (in /backend/YOUR_PROJECT folder):_\n\n**MODIFY: /backend/YOUR_PROJECT_NAME/settings.py** version in your project backend folder\n\n**ADD** above AWS S3 Config lines:\n\n```sh\nEMAIL_HOST = env.str(\"EMAIL_HOST\", \"smtp.sendgrid.net\")\nEMAIL_HOST_USER = env.str(\"SENDGRID_USERNAME\", \"\")\nEMAIL_HOST_PASSWORD = env.str(\"SENDGRID_PASSWORD\", \"\")\n```\n\nIf this code already exists, you can just skip this step.\n\n### STEP 6: Setup SendGrid account and keep reference to username and password.\n\nReference website [Sendgrid](https://wwww.sendgrid.com)\n\n### STEP 7: Configure Environment Variables.\n\nUsing the Crowdbotics Dashboard, navigate to \"Settings\" and select the tab \"Environment Variables\", here you will add the following variables:\n\n```\nSENDGRID_USERNAME\nSENDGRID_PASSWORD\n```\n\n### STEP 8: Update api url (optional)\n\nIf you have renamed your app through the Crowdbotics platform, you might need to change the reference url of your deployed app that is used to execute the api requests. To find out if you need to update, go to the file `src/config/app.js` and locate the `emailAuthAPIEndPoint`. If the value is your app's back-end url, then you do not need to change anything. If your current back-end url is different that what is shown there, update accordingly.\n\nFor example, after renaming my app from `loginapp` to `personalapp`, the code needs to be changed from:\n\n```js\nexport const appConfig = {\n  // todo add library to handle env variables\n  emailAuthAPIEndPoint: \"https://loginapp-123.botics.co\",\n  ...\n```\n\nto\n\n```js\nexport const appConfig = {\n  // todo add library to handle env variables\n  emailAuthAPIEndPoint: \"https://personalapp-123.botics.co\",\n  ...\n```\n\n### Note for developer: you can access the user token through the authReducer state (i.e. `state.authReducer.token` and user auth information like e-mail at `state.authReducer.user`)\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/actions.js": {
      "code": "import * as types from './constants';\n\n// LOGIN\n// {username, password} = data\nexport const apiLoginRequest = data => ({\n  type: types.API_LOGIN_REQUEST,\n  data,\n});\n// {data: {token: '', user: {}}} = response\nexport const apiLoginSuccess = response => ({\n  type: types.API_LOGIN_SUCCESS,\n  response,\n});\n// response is an error object\nexport const apiLoginFailed = response => ({\n  type: types.API_LOGIN_FAILED,\n  response,\n});\n\n// LOGOUT - pass the api token to the action request \nexport const apiLogoutRequest = (token) => ({\n  type: types.API_LOGOUT_REQUEST,\n  token\n});\nexport const apiLogoutSuccess = response => ({\n  type: types.API_LOGOUT_SUCCESS,\n  response,\n});\nexport const apiLogoutFailed = response => ({\n  type: types.API_LOGOUT_FAILED,\n  response,\n});\n\n// SIGN UP\nexport const apiSignupRequest = data => ({\n  type: types.API_SIGNUP_REQUEST,\n  data,\n});\nexport const apiSignupSuccess = response => ({\n  type: types.API_SIGNUP_SUCCESS,\n  response,\n});\nexport const apiSignupFailed = response => ({\n  type: types.API_SIGNUP_FAILED,\n  response,\n});\n\n// PASSWORD RESET\nexport const apiPasswordResetRequest = data => ({\n  type: types.API_PASSWORD_RESET_REQUEST,\n  data,\n});\nexport const apiPasswordResetSuccess = response => ({\n  type: types.API_PASSWORD_RESET_SUCCESS,\n  response,\n});\nexport const apiPasswordResetFailed = response => ({\n  type: types.API_PASSWORD_RESET_FAILED,\n  response,\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/constants.js": {
      "code": "export const API_LOGIN_REQUEST = 'API_LOGIN_REQUEST';\nexport const API_LOGIN_SUCCESS = 'API_LOGIN_SUCCESS';\nexport const API_LOGIN_FAILED = 'API_LOGIN_FAILED';\n\nexport const API_LOGOUT_REQUEST = 'API_LOGOUT_REQUEST';\nexport const API_LOGOUT_SUCCESS = 'API_LOGOUT_SUCCESS';\nexport const API_LOGOUT_FAILED = 'API_LOGOUT_FAILED';\n\nexport const API_SIGNUP_REQUEST = 'API_SIGNUP_REQUEST';\nexport const API_SIGNUP_SUCCESS = 'API_SIGNUP_SUCCESS';\nexport const API_SIGNUP_FAILED = 'API_SIGNUP_FAILED';\n\nexport const API_PASSWORD_RESET_REQUEST = 'API_PASSWORD_RESET_REQUEST';\nexport const API_PASSWORD_RESET_SUCCESS = 'API_PASSWORD_RESET_SUCCESS';\nexport const API_PASSWORD_RESET_FAILED = 'API_PASSWORD_RESET_FAILED';\n\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/reducers.js": {
      "code": "import * as types from './constants';\nimport {mapErrorMessage} from './utils';\n\nconst INITIAL_STATE = {\n  token: null,\n  isLoading: false,\n  success: false,\n  error: null,\n  user: {},\n};\n\nexport default function authApiReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.API_LOGIN_REQUEST:\n      return {...state, token: null, error: null, success: false, isLoading: true};\n\n    case types.API_LOGIN_SUCCESS:\n      return {\n        ...state,\n        token: action.response?.data?.token || null,\n        error: null,\n        isLoading: false,\n        success: true,\n        user: action.response?.data?.user || {},\n      };\n\n    case types.API_LOGIN_FAILED:\n      return {\n        ...state,\n        error: mapErrorMessage(action),\n        isLoading: false,\n        success: false\n      };\n\n    case types.API_SIGNUP_REQUEST:\n      return {...state, token: null, error: null, success: false, isLoading: true};\n\n    case types.API_SIGNUP_SUCCESS:\n      return {\n        ...state,\n        token: null,\n        user: action.response?.data || '',\n        error: null,\n        success: true,\n        isLoading: false,\n      };\n\n    case types.API_SIGNUP_FAILED:\n      return {\n        ...state,\n        error: mapErrorMessage(action),\n        success: false,\n        isLoading: false,\n      };\n    case types.API_SIGNUP_REQUEST:\n      return {...state, token: null, error: null, success: false, isLoading: true};\n\n    case types.API_SIGNUP_SUCCESS:\n      return {\n        ...state,\n        token: null,\n        user: action.response?.data || '',\n        error: null,\n        success: true,\n        isLoading: false,\n      };\n\n    case types.API_SIGNUP_FAILED:\n      return {\n        ...state,\n        error: mapErrorMessage(action),\n        success: false,\n        isLoading: false,\n      };\n    case types.API_SIGNOUT_REQUEST:\n      return {...state, token: null, error: null, success: false, isLoading: true};\n\n    case types.API_SIGNOUT_SUCCESS:\n      return {...INITIAL_STATE, success: true};\n\n    case types.API_SIGNOUT_FAILED:\n      return {\n        ...state,\n        error: mapErrorMessage(action),\n        success: false,\n        isLoading: false,\n      };\n    case types.API_PASSWORD_RESET_REQUEST:\n      return {...state, error: null, success: false, isLoading: true};\n\n    case types.API_PASSWORD_RESET_SUCCESS:\n      return {\n        ...state,\n        error: null,\n        success: true,\n        isLoading: false,\n      };\n\n    case types.API_PASSWORD_RESET_FAILED:\n      return {\n        ...state,\n        error: mapErrorMessage(action),\n        success: false,\n        isLoading: false,\n      };\n    default:\n      return state;\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/sagas.js": {
      "code": "import {put, call, all, spawn, takeEvery} from 'redux-saga/effects';\nimport {authServices} from './services';\nimport * as types from './constants';\nimport * as actions from './actions';\n\n// Login\nfunction* apiLoginRequestWorker(action) {\n  try {\n    const result = yield call(authServices.apiLoginRequest, action);\n    yield put(actions.apiLoginSuccess(result, action));\n  } catch (err) {\n    yield put(actions.apiLoginFailed(err, action));\n  }\n}\n\nfunction* apiLoginRequestWatcher() {\n  yield takeEvery(types.API_LOGIN_REQUEST, apiLoginRequestWorker)\n}\n\n// Logout\nfunction* apiLogoutRequestWorker(action) {\n  try {\n    const result = yield call(authServices.apiLogoutRequest, action);\n    yield put(actions.apiLogoutSuccess(result, action));\n  } catch (err) {\n    yield put(actions.apiLogoutFailed(err, action));\n  }\n}\n\nfunction* apiLogoutRequestWatcher() {\n  yield takeEvery(types.API_LOGOUT_REQUEST, apiLogoutRequestWorker)\n}\n\n// Signup\nfunction* apiSignupRequestWorker(action) {\n  try {\n    const result = yield call(authServices.apiSignupRequest, action);\n    yield put(actions.apiSignupSuccess(result, action));\n  } catch (err) {\n    yield put(actions.apiSignupFailed(err, action));\n  }\n}\n\nfunction* apiSignupRequestWatcher() {\n  yield takeEvery(types.API_SIGNUP_REQUEST, apiSignupRequestWorker)\n}\n\n// Password Reset email\nfunction* apiPasswordResetWorker(action) {\n  try {\n    const result = yield call(authServices.apiResetPasswordRequest, action);\n    yield put(actions.apiPasswordResetSuccess(result, action));\n  } catch (err) {\n    yield put(actions.apiPasswordResetFailed(err, action));\n  }\n}\n\nfunction* apiPasswordResetWatcher() {\n  yield takeEvery(types.API_PASSWORD_RESET_REQUEST, apiPasswordResetWorker)\n}\n\n// Read more information about root sagas in the documentation\n// https://redux-saga.js.org/docs/advanced/RootSaga.html\nexport default function* authRootSaga() {\n  const sagas = [\n    apiLoginRequestWatcher,\n    apiLogoutRequestWatcher,\n    apiSignupRequestWatcher,\n    apiPasswordResetWatcher\n  ];\n  yield all(\n    sagas.map(saga =>\n      spawn(function*() {\n        while (true) {\n          try {\n            yield call(saga);\n            break;\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      }),\n    ),\n  );\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/services.js": {
      "code": "import axios from 'axios';\nimport { appConfig } from \"../../../config/app\";\n\nconst authAPI = axios.create({\n  baseURL: appConfig.emailAuthAPIEndPoint, // your app back-end url\n  headers: {Accept: 'application/json', 'Content-Type': 'application/json'},\n});\n\nfunction apiLoginRequest(action) {\n  return authAPI.post(`/api/v1/login/`, null, {\n    data: action.data,\n  });\n}\nfunction apiSignupRequest(action) {\n  return authAPI.post(`/api/v1/signup/`, null, {\n    data: action.data,\n  });\n}\nfunction apiLogoutRequest(action) {\n  return authAPI.post(`/rest-auth/logout/`, null, {\n    headers: {Authorization: `Token ${action.token}`},\n  });\n}\n\nfunction apiResetPasswordRequest(action) {\n  return authAPI.post(`/rest-auth/password/reset/`, null, {\n    data: action.data,\n  });\n}\n\nexport const authServices = {\n  apiLoginRequest,\n  apiSignupRequest,\n  apiLogoutRequest,\n  apiResetPasswordRequest,\n};\n",
      "parentDir": null,
      "newFile": true
    },
    "auth/utils.js": {
      "code": "const messageMap = {\n  'Request failed with status code 400': {\n    code: 400,\n    message: 'Invalid credentials.',\n  },\n  'Request failed with status code 403': {\n    code: 403,\n    message: 'You do not have access to this resource.',\n  },\n  'Request failed with status code 500': {\n    code: 500,\n    message: 'Unexpected Server Error.',\n  },\n  'Network Error': {\n    code: null,\n    message: 'Please check your internet connection.',\n  },\n};\n\nexport const mapErrorMessage = action => {\n  const message = action.response?.message;\n  return messageMap[message]\n    ? {...messageMap[message], type: action.type}\n    : {code: null, message, type: action.type};\n};\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import { createStackNavigator } from \"react-navigation-stack\";\n\nimport LoginSignup from \"./screens\";\nimport PasswordRecover from \"./screens/PasswordRecover\";\n\nexport default LoginSignupBlueprintNavigator = createStackNavigator(\n  {\n    LoginSignup,\n    PasswordRecover\n  },\n  {\n    initialRouteName: \"LoginSignup\",\n    defaultNavigationOptions: ({ navigation }) => ({ header: null }),\n  }\n);\n",
      "parentDir": null,
      "newFile": true
    },
    "package.json": {
      "code": "{\n  \"name\": \"@modules/login\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple login and signup screen with email and password.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {},\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {}\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "screens/PasswordRecover/index.js": {
      "code": "import React, {Component} from 'react';\nimport {\n  Image,\n  Alert,\n  View,\n  TouchableOpacity,\n  TextInput,\n  Text,\n} from 'react-native';\nimport {connect} from 'react-redux';\nimport {styles} from '../styles';\nimport {KeyboardAwareScrollView} from 'react-native-keyboard-aware-scroll-view';\nimport {apiPasswordResetRequest} from '../../auth/actions';\nimport {API_PASSWORD_RESET_FAILED} from '../../auth/constants';\nimport {emailValidationRegex, LOGO_URL} from '../constants.js';\n\nclass PasswordRecover extends Component {\n  static navigationOptions = {\n    headerMode: 'none',\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      loading: false,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {requestError, success} = this.props;\n    if (prevProps.isLoading) {\n      if (requestError?.type === API_PASSWORD_RESET_FAILED) {\n        let message =\n          requestError?.code === 400\n            ? 'This email is not registered\\nPlease signup'\n            : requestError.message;\n        Alert.alert('Error', message);\n      }\n\n      if (success) {\n        Alert.alert(\n          'Password Reset',\n          'Password reset link has been sent to your email address',\n        );\n        this.props.navigation.goBack();\n      }\n    }\n  }\n\n  renderImage = () => {\n    const imageSize = {\n      width: 365,\n      height: 161,\n    };\n    return (\n      <Image\n        style={[styles.image, imageSize]}\n        source={{\n          uri: LOGO_URL,\n        }}\n      />\n    );\n  };\n\n  submitPasswordReset = async () => {\n    const {email} = this.state;\n    if (!emailValidationRegex.test(email)) {\n      Alert.alert('Error', 'Please enter a valid email address.');\n      return;\n    }\n    this.props.reset(email);\n  };\n\n  render() {\n    const {email} = this.state;\n\n    return (\n      <View style={{flex: 1}}>\n        <KeyboardAwareScrollView contentContainerStyle={styles.screen}>\n          {this.renderImage()}\n          <Text style={styles.heading}>{'Password Recovery'}</Text>\n          <View style={styles.fieldContainer}>\n            <Text style={styles.label}>Email Address</Text>\n            <TextInput\n              value={email}\n              onChangeText={email => this.setState({email})}\n              placeholder=\"eg: yourname@gmail.com\"\n              size=\"small\"\n              style={styles.input}\n              keyboardType=\"email-address\"\n              textStyle={styles.text}\n              autoCapitalize=\"none\"\n            />\n          </View>\n          <TouchableOpacity\n            disabled={this.props.isLoading}\n            activeOpacity={0.7}\n            style={[styles.actionButon]}\n            onPress={this.submitPasswordReset}>\n            <Text\n              style={{\n                color: '#fff',\n                fontSize: 15,\n              }}>\n              {'Reset Password'}\n            </Text>\n          </TouchableOpacity>\n          <TouchableOpacity\n            activeOpacity={0.7}\n            onPress={() => {\n              this.props.navigation.goBack();\n            }}>\n            <Text style={[styles.textRow]}>Back to login?</Text>\n          </TouchableOpacity>\n        </KeyboardAwareScrollView>\n      </View>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    requestError: state.authReducer.error,\n    isLoading: state.authReducer.isLoading,\n    success: state.authReducer.success,\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    reset: email => dispatch(apiPasswordResetRequest({email})),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PasswordRecover);\n",
      "parentDir": null,
      "newFile": true
    },
    "screens/PasswordRecover/styles.js": {
      "code": "import { StyleSheet } from \"react-native\";\n\nexport const styles = StyleSheet.create({\n});",
      "parentDir": null,
      "newFile": true
    },
    "screens/blank.js": {
      "code": "import React, {Component} from 'react';\nimport {\n  View,\n  ImageBackground,\n  Image,\n  Text,\n  KeyboardAvoidingView,\n  TouchableOpacity,\n  TextInput,\n  ActivityIndicator,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport {\n  HOME_SCREEN_NAME,\n  BACKGROUND_URL,\n  emailValidationRegex,\n  LOGO_URL,\n} from './constants.js';\nimport {KeyboardAwareScrollView} from 'react-native-keyboard-aware-scroll-view';\nimport {Tab, Tabs} from 'native-base';\nimport {styles, buttonStyles, textInputStyles, Color} from './styles';\nimport {connect} from 'react-redux';\nimport {apiLoginRequest, apiSignupRequest} from '../auth/actions';\nimport {\n  API_LOGIN_FAILED,\n  API_SIGNUP_FAILED,\n} from '../auth/constants';\n\nTab.prototype.requestAnimationFrame = () => {};\nTabs.prototype.requestAnimationFrame = () => {};\n\nconst TextInputField = props => (\n  <View>\n    <Text style={[textInputStyles.label, props.labelStyle]}>{props.label}</Text>\n    <TextInput\n      autoCapitalize=\"none\"\n      style={[textInputStyles.textInput, props.textInputStyle]}\n      placeholderTextColor={Color.steel}\n      underlineColorAndroid={'transparent'}\n      {...props}\n    />\n    {!!props.error && <Text style={textInputStyles.error}>{props.error}</Text>}\n  </View>\n);\n\nconst Button = props => (\n  <TouchableOpacity onPress={props.onPress} disabled={props.loading}>\n    <View style={[buttonStyles.viewStyle, props.viewStyle]}>\n      {props.loading ? (\n        <ActivityIndicator\n          color={props.loadingColor ? props.loadingColor : Color.white}\n          style={props.loadingStyle}\n        />\n      ) : (\n        <Text style={[buttonStyles.textStyle, props.textStyle]}>\n          {props.title}\n        </Text>\n      )}\n    </View>\n  </TouchableOpacity>\n);\n\nclass SignUpComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      emailError: '',\n      passwordError: '',\n      confirmPasswordError: '',\n      requestError: '',\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {requestError, user, success} = this.props;\n    if (prevProps.isLoading && requestError?.type === API_SIGNUP_FAILED) {\n      const error =\n        requestError.code == 400\n          ? 'This email is already registered or password is too weak.'\n          : requestError.message;\n\n      Alert.alert('Error', error);\n      this.setState({\n        requestError: error,\n      });\n    }\n    if (prevProps.isLoading && success && user !== {}) {\n      Alert.alert(\n        'Signup Success',\n        'Registration Successful. A confirmation will be sent to your e-mail address.',\n      );\n    }\n  }\n\n  onSignupPress = async () => {\n    const {email, password, confirmPassword} = this.state;\n    if (emailValidationRegex.test(email)) {\n      if (password != '') {\n        if (password == confirmPassword) {\n          this.props.signup(email, password);\n        } else {\n          this.setState({\n            confirmPasswordError: 'Confirm password and password do not match',\n          });\n        }\n      } else {\n        this.setState({passwordError: 'Please enter a valid password'});\n      }\n    } else {\n      this.setState({emailError: 'Please enter a valid email address'});\n    }\n  };\n\n  render() {\n    const {\n      email,\n      password,\n      emailError,\n      passwordError,\n      confirmPassword,\n      confirmPasswordError,\n    } = this.state;\n    return (\n      <KeyboardAvoidingView>\n        <View style={{marginVertical: 20, marginHorizontal: 15}}>\n          <TextInputField\n            keyboardType=\"email-address\"\n            label=\"Email address\"\n            placeholder=\"Email address\"\n            onChangeText={email => this.setState({email})}\n            value={email}\n            error={emailError}\n          />\n          <TextInputField\n            label=\"Password\"\n            placeholder=\"Password\"\n            secureTextEntry={true}\n            onChangeText={password => this.setState({password})}\n            value={password}\n            error={passwordError}\n          />\n          <TextInputField\n            label=\"Confirm Password\"\n            placeholder=\"Confirm Password\"\n            secureTextEntry={true}\n            onChangeText={confirmPassword => this.setState({confirmPassword})}\n            value={confirmPassword}\n            error={confirmPasswordError}\n          />\n        </View>\n        <Button\n          title=\"Sign Up\"\n          loading={this.props.isLoading}\n          onPress={this.onSignupPress}\n        />\n        {!!this.state.requestError && (\n          <Text style={textInputStyles.error}>\n            {this.state.requestError.message}\n          </Text>\n        )}\n      </KeyboardAvoidingView>\n    );\n  }\n}\n\nclass SignInComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      emailError: '',\n      passwordError: '',\n      authLoading: false,\n      fbLoading: false,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {requestError, token} = this.props;\n    if (prevProps.isLoading && requestError?.type === API_LOGIN_FAILED) {\n      Alert.alert('Login Error', requestError.message);\n    }\n    if (token) {\n      this.props.navigation.navigate(HOME_SCREEN_NAME);\n    }\n  }\n\n  onSigninPress = () => {\n    const {email, password} = this.state;\n    if (emailValidationRegex.test(email)) {\n      if (password != '') {\n        this.props.login(email, password);\n        this.setState({authLoading: false});\n      } else {\n        this.setState({passwordError: 'Please enter a valid password'});\n      }\n    } else {\n      this.setState({emailError: 'Please enter a valid email address'});\n    }\n  };\n  render() {\n    const {email, password, emailError, passwordError} = this.state;\n    return (\n      <KeyboardAvoidingView>\n        <View style={{marginVertical: 20, marginHorizontal: 15}}>\n          <TextInputField\n            keyboardType=\"email-address\"\n            label=\"Email address\"\n            placeholder=\"Email address\"\n            onChangeText={email => this.setState({email})}\n            value={email}\n            error={emailError}\n          />\n          <TextInputField\n            label=\"Password\"\n            placeholder=\"Password\"\n            secureTextEntry={true}\n            onChangeText={password => this.setState({password})}\n            value={password}\n            error={passwordError}\n          />\n        </View>\n        <Button\n          title=\"Login\"\n          loading={this.props.isLoading}\n          onPress={this.onSigninPress}\n        />\n        <View\n          style={{\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n          }}>\n          <TouchableOpacity\n            activeOpacity={0.7}\n            onPress={() => {\n              this.props.navigation.navigate('PasswordRecover');\n            }}>\n            <Text>Forgot your password?</Text>\n          </TouchableOpacity>\n        </View>\n      </KeyboardAvoidingView>\n    );\n  }\n}\n\nexport class Blank extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <ScrollView style={[styles.container]}>\n        <KeyboardAwareScrollView contentContainerStyle={{flex: 1}}>\n          <View style={[styles.container]}>\n            <View style={{flex: 1}}>\n              <View style={styles.imageContainer}>\n                <ImageBackground\n                  source={{\n                    uri: BACKGROUND_URL,\n                  }}\n                  style={{\n                    flex: 1,\n                    justifyContent: 'center',\n                    resizeMode: 'cover',\n                  }}>\n                  <Image\n                    source={{\n                      uri: LOGO_URL,\n                    }}\n                    style={{\n                      width: 155,\n                      height: 155,\n                      alignSelf: 'center',\n                      resizeMode: 'contain',\n                    }}\n                  />\n                </ImageBackground>\n              </View>\n            </View>\n            <View style={[styles.cardView]}>\n              <View style={{marginBottom: 20}}>\n                <Tabs\n                  tabBarUnderlineStyle={styles.tabBarUnderlineStyle}\n                  tabContainerStyle={styles.tabContainerStyle}>\n                  <Tab\n                    heading=\"Sign In\"\n                    activeTabStyle={styles.activeTabStyle}\n                    tabStyle={styles.tabStyle}\n                    activeTextStyle={styles.activeTextStyle}\n                    textStyle={styles.textStyle}>\n                    <SignInComponent {...this.props} />\n                  </Tab>\n                  <Tab\n                    heading=\"Sign Up\"\n                    activeTabStyle={styles.activeTabStyle}\n                    tabStyle={styles.tabStyle}\n                    activeTextStyle={styles.activeTextStyle}\n                    textStyle={styles.textStyle}>\n                    <SignUpComponent {...this.props} />\n                  </Tab>\n                </Tabs>\n              </View>\n            </View>\n          </View>\n        </KeyboardAwareScrollView>\n      </ScrollView>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.authReducer.token,\n    requestError: state.authReducer.error,\n    isLoading: state.authReducer.isLoading,\n    user: state.authReducer.user,\n    success: state.authReducer.success,\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: (email, password) =>\n      dispatch(apiLoginRequest({username: email, password})),\n    signup: (email, password) => dispatch(apiSignupRequest({email, password})),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Blank);\n",
      "parentDir": null,
      "newFile": true
    },
    "screens/constants.js": {
      "code": "export const LOGO_URL = \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/cb-icon.png\"\nexport const BACKGROUND_URL = \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/halfbg.png\"\nexport const emailValidationRegex = /^[^\\s]+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n// Change here the  name of the screen you want to redirect after Login\nexport const HOME_SCREEN_NAME = \"BlankScreen1186626\" ",
      "parentDir": null,
      "newFile": true
    },
    "screens/index.js": {
      "code": "import React, {Component} from 'react';\nimport {\n  View,\n  ImageBackground,\n  Image,\n  Text,\n  KeyboardAvoidingView,\n  TouchableOpacity,\n  TextInput,\n  ActivityIndicator,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport {\n  HOME_SCREEN_NAME,\n  BACKGROUND_URL,\n  emailValidationRegex,\n  LOGO_URL,\n} from './constants.js';\nimport {KeyboardAwareScrollView} from 'react-native-keyboard-aware-scroll-view';\nimport {Tab, Tabs} from 'native-base';\nimport {styles, buttonStyles, textInputStyles, Color} from './styles';\nimport {connect} from 'react-redux';\nimport {apiLoginRequest, apiSignupRequest} from '../auth/actions';\nimport {\n  API_LOGIN_FAILED,\n  API_SIGNUP_FAILED,\n} from '../auth/constants';\n\nTab.prototype.requestAnimationFrame = () => {};\nTabs.prototype.requestAnimationFrame = () => {};\n\nconst TextInputField = props => (\n  <View>\n    <Text style={[textInputStyles.label, props.labelStyle]}>{props.label}</Text>\n    <TextInput\n      autoCapitalize=\"none\"\n      style={[textInputStyles.textInput, props.textInputStyle]}\n      placeholderTextColor={Color.steel}\n      underlineColorAndroid={'transparent'}\n      {...props}\n    />\n    {!!props.error && <Text style={textInputStyles.error}>{props.error}</Text>}\n  </View>\n);\n\nconst Button = props => (\n  <TouchableOpacity onPress={props.onPress} disabled={props.loading}>\n    <View style={[buttonStyles.viewStyle, props.viewStyle]}>\n      {props.loading ? (\n        <ActivityIndicator\n          color={props.loadingColor ? props.loadingColor : Color.white}\n          style={props.loadingStyle}\n        />\n      ) : (\n        <Text style={[buttonStyles.textStyle, props.textStyle]}>\n          {props.title}\n        </Text>\n      )}\n    </View>\n  </TouchableOpacity>\n);\n\nclass SignUpComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      confirmPassword: '',\n      emailError: '',\n      passwordError: '',\n      confirmPasswordError: '',\n      requestError: '',\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {requestError, user, success} = this.props;\n    if (prevProps.isLoading && requestError?.type === API_SIGNUP_FAILED) {\n      const error =\n        requestError.code == 400\n          ? 'This email is already registered or password is too weak.'\n          : requestError.message;\n\n      Alert.alert('Error', error);\n      this.setState({\n        requestError: error,\n      });\n    }\n    if (prevProps.isLoading && success && user !== {}) {\n      Alert.alert(\n        'Signup Success',\n        'Registration Successful. A confirmation will be sent to your e-mail address.',\n      );\n    }\n  }\n\n  onSignupPress = async () => {\n    const {email, password, confirmPassword} = this.state;\n    if (emailValidationRegex.test(email)) {\n      if (password != '') {\n        if (password == confirmPassword) {\n          this.props.signup(email, password);\n        } else {\n          this.setState({\n            confirmPasswordError: 'Confirm password and password do not match',\n          });\n        }\n      } else {\n        this.setState({passwordError: 'Please enter a valid password'});\n      }\n    } else {\n      this.setState({emailError: 'Please enter a valid email address'});\n    }\n  };\n\n  render() {\n    const {\n      email,\n      password,\n      emailError,\n      passwordError,\n      confirmPassword,\n      confirmPasswordError,\n    } = this.state;\n    return (\n      <KeyboardAvoidingView>\n        <View style={{marginVertical: 20, marginHorizontal: 15}}>\n          <TextInputField\n            keyboardType=\"email-address\"\n            label=\"Email address\"\n            placeholder=\"Email address\"\n            onChangeText={email => this.setState({email})}\n            value={email}\n            error={emailError}\n          />\n          <TextInputField\n            label=\"Password\"\n            placeholder=\"Password\"\n            secureTextEntry={true}\n            onChangeText={password => this.setState({password})}\n            value={password}\n            error={passwordError}\n          />\n          <TextInputField\n            label=\"Confirm Password\"\n            placeholder=\"Confirm Password\"\n            secureTextEntry={true}\n            onChangeText={confirmPassword => this.setState({confirmPassword})}\n            value={confirmPassword}\n            error={confirmPasswordError}\n          />\n        </View>\n        <Button\n          title=\"Sign Up\"\n          loading={this.props.isLoading}\n          onPress={this.onSignupPress}\n        />\n        {!!this.state.requestError && (\n          <Text style={textInputStyles.error}>\n            {this.state.requestError.message}\n          </Text>\n        )}\n      </KeyboardAvoidingView>\n    );\n  }\n}\n\nclass SignInComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      emailError: '',\n      passwordError: '',\n      authLoading: false,\n      fbLoading: false,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {requestError, token} = this.props;\n    if (prevProps.isLoading && requestError?.type === API_LOGIN_FAILED) {\n      Alert.alert('Login Error', requestError.message);\n    }\n    if (token) {\n      this.props.navigation.navigate(HOME_SCREEN_NAME);\n    }\n  }\n\n  onSigninPress = () => {\n    const {email, password} = this.state;\n    if (emailValidationRegex.test(email)) {\n      if (password != '') {\n        this.props.login(email, password);\n        this.setState({authLoading: false});\n      } else {\n        this.setState({passwordError: 'Please enter a valid password'});\n      }\n    } else {\n      this.setState({emailError: 'Please enter a valid email address'});\n    }\n  };\n  render() {\n    const {email, password, emailError, passwordError} = this.state;\n    return (\n      <KeyboardAvoidingView>\n        <View style={{marginVertical: 20, marginHorizontal: 15}}>\n          <TextInputField\n            keyboardType=\"email-address\"\n            label=\"Email address\"\n            placeholder=\"Email address\"\n            onChangeText={email => this.setState({email})}\n            value={email}\n            error={emailError}\n          />\n          <TextInputField\n            label=\"Password\"\n            placeholder=\"Password\"\n            secureTextEntry={true}\n            onChangeText={password => this.setState({password})}\n            value={password}\n            error={passwordError}\n          />\n        </View>\n        <Button\n          title=\"Login\"\n          loading={this.props.isLoading}\n          onPress={this.onSigninPress}\n        />\n        <View\n          style={{\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n          }}>\n          <TouchableOpacity\n            activeOpacity={0.7}\n            onPress={() => {\n              this.props.navigation.navigate('PasswordRecover');\n            }}>\n            <Text>Forgot your password?</Text>\n          </TouchableOpacity>\n        </View>\n      </KeyboardAvoidingView>\n    );\n  }\n}\n\nexport class Blank extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <ScrollView style={[styles.container]}>\n        <KeyboardAwareScrollView contentContainerStyle={{flex: 1}}>\n          <View style={[styles.container]}>\n            <View style={{flex: 1}}>\n              <View style={styles.imageContainer}>\n                <ImageBackground\n                  source={{\n                    uri: BACKGROUND_URL,\n                  }}\n                  style={{\n                    flex: 1,\n                    justifyContent: 'center',\n                    resizeMode: 'cover',\n                  }}>\n                  <Image\n                    source={{\n                      uri: LOGO_URL,\n                    }}\n                    style={{\n                      width: 155,\n                      height: 155,\n                      alignSelf: 'center',\n                      resizeMode: 'contain',\n                    }}\n                  />\n                </ImageBackground>\n              </View>\n            </View>\n            <View style={[styles.cardView]}>\n              <View style={{marginBottom: 20}}>\n                <Tabs\n                  tabBarUnderlineStyle={styles.tabBarUnderlineStyle}\n                  tabContainerStyle={styles.tabContainerStyle}>\n                  <Tab\n                    heading=\"Sign In\"\n                    activeTabStyle={styles.activeTabStyle}\n                    tabStyle={styles.tabStyle}\n                    activeTextStyle={styles.activeTextStyle}\n                    textStyle={styles.textStyle}>\n                    <SignInComponent {...this.props} />\n                  </Tab>\n                  <Tab\n                    heading=\"Sign Up\"\n                    activeTabStyle={styles.activeTabStyle}\n                    tabStyle={styles.tabStyle}\n                    activeTextStyle={styles.activeTextStyle}\n                    textStyle={styles.textStyle}>\n                    <SignUpComponent {...this.props} />\n                  </Tab>\n                </Tabs>\n              </View>\n            </View>\n          </View>\n        </KeyboardAwareScrollView>\n      </ScrollView>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    token: state.authReducer.token,\n    requestError: state.authReducer.error,\n    isLoading: state.authReducer.isLoading,\n    user: state.authReducer.user,\n    success: state.authReducer.success,\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: (email, password) =>\n      dispatch(apiLoginRequest({username: email, password})),\n    signup: (email, password) => dispatch(apiSignupRequest({email, password})),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(LoginSignup);\n",
      "parentDir": null,
      "newFile": true
    },
    "screens/styles.js": {
      "code": "import {StyleSheet, Dimensions} from 'react-native';\nimport {scaleVertical, scale} from '../../../utils/scale';\nlet width = Dimensions.get('window').width;\nlet height = Dimensions.get('window').height;\n\nexport const Color = {\n  malibu: '#46E1FD',\n  white: '#fff',\n  whiteOff: '#F4F5F9',\n  steel: '#CCCCCC',\n  black: '#000',\n  facebook: '#3b5998',\n  red: 'red',\n};\n\nexport const styles = StyleSheet.create({\n  screen: {\n    flexDirection: 'column',\n    backgroundColor: 'white',\n    justifyContent: 'flex-start',\n    paddingHorizontal: 26,\n    alignItems: 'center',\n  },\n  input: {\n    backgroundColor: 'white',\n    //marginLeft: scale(10), marginRight: scale(10),\n    marginTop: scaleVertical(5),\n    marginBottom: scaleVertical(5),\n    borderRadius: 5,\n    borderColor: '#95989A',\n    padding: 5,\n    height: 40,\n    borderWidth: 1,\n    width: '100%',\n  },\n  label: {\n    fontWeight: 'bold',\n    color: '#979797',\n  },\n  fieldContainer: {\n    alignItems: 'flex-start',\n    width: '100%',\n    marginTop: scaleVertical(8),\n  },\n  heading: {\n    textAlign: 'center',\n    fontWeight: 'bold',\n    marginVertical: scaleVertical(25),\n    fontSize: 20,\n    fontFamily: 'Roboto-Bold',\n    color: '#707070',\n  },\n  actionButon: {\n    backgroundColor: Color.malibu,\n    borderWidth: 0,\n    marginLeft: scale(10),\n    marginRight: scale(10),\n    marginTop: scaleVertical(10),\n    marginBottom: scaleVertical(10),\n    borderRadius: 5,\n    height: 44,\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n  },\n  image: {\n    resizeMode: 'contain',\n    marginBottom: scale(10),\n    marginTop: scaleVertical(63),\n  },\n  textRow: {\n    textAlign: 'center',\n    color: '#707070',\n    fontSize: 14,\n    marginVertical: scaleVertical(5),\n    fontFamily: 'Roboto-Regular',\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n  buttons: {\n    flexDirection: 'row',\n    marginBottom: scaleVertical(24),\n    justifyContent: 'center',\n    display: 'none',\n  },\n  button: {\n    marginHorizontal: 14,\n    marginTop: 27.5,\n    alignSelf: 'center',\n    borderColor: '#ED6854',\n    borderWidth: 2,\n    padding: 15,\n    borderRadius: 32,\n    width: 64,\n    height: 64,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    color: 'black',\n    fontSize: 14,\n    paddingVertical: scaleVertical(5),\n  },\n  container: {\n    flex: 1,\n    backgroundColor: Color.whiteOff,\n  },\n  imageContainer: {width: width, height: height / 2},\n  cardView: {\n    marginTop: -80,\n    marginBottom: 20,\n    marginHorizontal: 20,\n    backgroundColor: Color.white,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1,\n    borderRadius: 10,\n    elevation: 3,\n    shadowOffset: {height: 10, width: 10},\n    shadowOpacity: 0.3,\n    shadowColor: Color.steel,\n  },\n  tabBarUnderlineStyle: {\n    width: 50,\n    marginBottom: 10,\n    marginLeft: width / 6.2,\n    borderRadius: 130,\n    backgroundColor: Color.malibu,\n  },\n  tabContainerStyle: {\n    marginTop: 20,\n    elevation: 0,\n    paddingBottom: 20,\n    backgroundColor: Color.white,\n  },\n  activeTabStyle: {backgroundColor: Color.white},\n  tabStyle: {backgroundColor: Color.white},\n  activeTextStyle: {fontSize: 20, fontWeight: 'normal'},\n  textStyle: {fontSize: 20},\n});\nexport const buttonStyles = {\n  viewStyle: {\n    backgroundColor: Color.malibu,\n    borderRadius: 10,\n    borderColor: Color.black,\n    justifyContent: 'center',\n    marginHorizontal: 10,\n    marginBottom: 10,\n    height: 44,\n  },\n  textStyle: {\n    fontSize: 18,\n    textAlign: 'center',\n    color: Color.white,\n    marginHorizontal: 40,\n    marginVertical: 12,\n  },\n};\n\nexport const textInputStyles = {\n  textInput: {\n    borderColor: Color.steel,\n    borderWidth: 0.5,\n    borderRadius: 5,\n    fontSize: 18,\n    marginVertical: 10,\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    color: Color.black,\n  },\n  label: {color: '#6A6A6A', fontSize: 12},\n  error: {color: Color.red, fontSize: 9},\n};\n",
      "parentDir": null,
      "newFile": true
    }
  },
  "maps": {
    "README.md": {
      "code": "# Maps\n\n# Setup\n\nInstall the required dependencies:\n\n```sh\nyarn add react-native-maps\n```\n\nOpen `/src/navigator/mainNavigator.js` and import the stack navigator defined in `navigator.js`.\n\n```javascript\nimport Maps from \"../features/<module_directory>/navigator.js\";\n```\n\nAnd then add it to the navigation:\n\n```javascript\n//@BlueprintImportInsertion\nMaps: {\n  screen: Maps\n},\n```\n\nUpdate the map's initial location in:\n`src/features/<module_directory>/index.js`\n\nThis is the default value (San Francisco):\n\n```javascript\nconst region = {\n  latitude: 37.78825,\n  longitude: -122.4324,\n  latitudeDelta: 0.0922,\n  longitudeDelta: 0.0421,\n};\n```\n\n# Android\n\n## Add Google Maps Key\n\nUpdate `android/app/src/main/AndroidManifest.xml` with the following XML meta tags:\n\n```xml\n    <application>\n        <!-- You will only need to add this meta-data tag, but make sure it's a child of application -->\n        <meta-data\n            android:name=\"com.google.android.geo.API_KEY\"\n            android:value=\"Your Google maps API Key Here\"/>\n\n        <!-- You will also only need to add this uses-library tag -->\n        <uses-library android:name=\"org.apache.http.legacy\" android:required=\"false\"/>\n    </application>\n```\n\n# iOS\n\n## Build configuration on iOS\n\n```sh\ncd ios\npod install\n```\n\n## App Store Submission\n\n> The app's Info.plist file must contain a NSLocationWhenInUseUsageDescription with a user-facing purpose string explaining clearly and completely why your app needs the location, otherwise Apple will reject your app submission.\n\n## Enabling Google Maps on iOS\n\nhttps://github.com/react-native-maps/react-native-maps/blob/master/docs/installation.md#enabling-google-maps-on-ios-react-native-all-versions\n",
      "parentDir": null,
      "newFile": true
    },
    "index.js": {
      "code": "import React from \"react\";\nimport { View } from \"react-native\";\nimport { styles } from './styles'\nimport MapView, { PROVIDER_GOOGLE } from \"react-native-maps\";\n\nconst Maps = () => {\n  const region = {\n    latitude: 37.78825,\n    longitude: -122.4324,\n    latitudeDelta: 0.0922,\n    longitudeDelta: 0.0421\n  }\n\n  return (\n    <View style={styles.view}>\n      <MapView\n        provider={PROVIDER_GOOGLE}\n        style={styles.map}\n        initialRegion={region}\n      />\n    </View>\n  );\n}\n\nexport default {\n  name: \"Maps\",\n  screen: Maps,\n  reducer: null,\n  actions: null\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import React from 'react';\nimport { SlideMenuIcon } from '../../navigator/slideMenuIcon';\nimport { createStackNavigator } from \"react-navigation-stack\";\n\nimport Maps from \"./index\";\n\nexport default MapsNavigator = createStackNavigator({\n  Maps: {\n    screen: Maps.screen,\n    navigationOptions: ({ navigation }) => ({\n      title: \"Maps\",\n      headerLeft: <SlideMenuIcon navigationProps={navigation} />,\n    }),\n  }\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "package.json": {
      "code": "{\n  \"name\": \"@modules/maps\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Add interactive maps to your mobile app to make it easier for users to find your locations.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {\n    \"react-native-maps\": \"0.27.1\"\n  },\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\"\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "styles.js": {
      "code": "import { StyleSheet } from 'react-native'\n\nimport { Dimensions } from 'react-native';\n\nconst { width, height } = Dimensions.get('window');\n\n// Guideline sizes are based on standard ~5\" screen mobile device\nconst guidelineBaseWidth = 350;\nconst guidelineBaseHeight = 680;\n\nconst scale = size => (width / guidelineBaseWidth) * size;\nconst scaleVertical = size => (height / guidelineBaseHeight) * size;\nconst scaleModerate = (size, factor = 0.5) => size + ((scale(size) - size) * factor);\n\nexport const styles = StyleSheet.create({\n  view: {\n    height: \"100%\"\n  },\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    height: 400,\n    width: 400,\n    justifyContent: \"flex-end\",\n    alignItems: \"center\"\n  },\n  map: {\n    ...StyleSheet.absoluteFillObject\n  },\n  searchbar: {\n    backgroundColor: 'white',\n    marginLeft: scale(10),\n    marginRight: scale(10),\n    marginTop: scaleVertical(5),\n    marginBottom: scaleVertical(5),\n    borderRadius: 12,\n    borderColor: '#E5E5E5',\n  },\n});\n",
      "parentDir": null,
      "newFile": true
    }
  },
  "onboarding": {
    "README.md": {
      "code": "# Onboarding Tutorial Screen\n\nThe Onboarding Tutorial Screen is a ReactNative based onboarding screen. It can be configured to have 1 or many\nslide screens with content and expansion detailed in the file.\n\n## Installation\n\nAfter you have added the screen module into your project, you will need to configure a few items by modifying the project\nfiles in the github repository. Please note to replace ####### with the numeric sequence for your screen (found in folder name under /src/features) and also that the @BluePrint tags for ImportInsertion and NavigationInsertion will be removed in future so placement is with other imports and inside the AppNavigator above other screens.\n\n### STEP 1: Add dependency library to the project.\n\n**/PROJECT_ROOT_DIRECTORY/package.json:**\n\n**ADD** Dependency after Line 16 (dependencies opening line \"_\"dependencies\": {_ \")\n\n`\"react-native-app-intro-slider\": \"^4.0.4\", `\n\n### Step 2: Add screen into your project screen navigation.\n\n**/src/mainNavigator.js:**\n**ADD** immediately below in the section labeled //@BlueprintImportInsertion:\n\n`import Onboarding#######Navigator from '../features/Onboarding#######/navigator';`\n\n**ADD** immediately below in the section inside AppNavigator definition labeled //@BlueprintNavigationInsertion section:\n\n`Onboarding#######: { screen: Onboarding#######Navigator },`\n\n### STEP (OPTIONAL): do this if you do not have a splash and want the onboarding to load first.\n\n**ADD** comma after **contentComponent: Sidemenu**, and initialRoutName so that your code looks like:\n\n```\nconst DrawerAppNavigator = createDrawerNavigator(\n{\n    ...AppNavigator,\n    },\n    {\n        contentComponent: SideMenu,\n        initialRouteName: \"Onboarding#######\", // Onboarding Slide Screen\n    },\n);\n```\n\n### STEP 3: Update the Onboarding Slide Screen content as desired, the navigated screen after done (typically the HOME screen) including the number of slide screens needed.\n\n**/src/features/Onboarding#######/index.js:**\n\n**MODIFY** slides, update with your slides content/desired number of slides:\n\n```\nconst slides = [\n {\n   key: 'one',\n   title: 'Title 1',\n   text: 'Description.\\nSay something cool',\n   image: { uri: \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/cb-icon.png\" },\n   backgroundColor: '#59b2ab',\n },\n {\n   key: 'two',\n   title: 'Title 2',\n   text: 'Other cool stuff',\n   image: { uri: \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/cb-icon.png\" },\n   backgroundColor: '#febe29',\n },\n // {\n //   key: 'three',\n //   title: 'Rocket guy',\n //   text: 'I\\'m already out of descriptions\\n\\nLorem ipsum bla bla bla',\n //   image: require('./assets/3.jpg'),\n //   backgroundColor: '#22bcb5',\n // }\n];\n```\n\n**MODIFY** Line 55, Replace LoginAndSignup177769 with desired destination home/screen:\n\n`this.props.navigation.navigate('LoginAndSignup177769')`\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
      "parentDir": null,
      "newFile": true
    },
    "index.js": {
      "code": "import React from \"react\";\nimport {\n  View,\n  Image,\n  Text,\n  StyleSheet,\n} from \"react-native\";\nimport { SlideMenuIcon } from '../../navigator/slideMenuIcon';\nimport AppIntroSlider from 'react-native-app-intro-slider';\n\nconst slides = [\n  {\n    key: 'one',\n    title: 'Title 1',\n    text: 'Description.\\nSay something cool',\n    image: { uri: \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/cb-icon.png\" },\n    backgroundColor: '#59b2ab',\n  },\n  {\n    key: 'two',\n    title: 'Title 2',\n    text: 'Other cool stuff',\n    image: { uri: \"https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/cb-icon.png\" },\n    backgroundColor: '#febe29',\n  },\n  // {\n  //   key: 'three',\n  //   title: 'Rocket guy',\n  //   text: 'I\\'m already out of descriptions\\n\\nLorem ipsum bla bla bla',\n  //   image: require('./assets/3.jpg'),\n  //   backgroundColor: '#22bcb5',\n  // }\n];\n\nexport default class Blank extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    return {\n      headerLeft: <SlideMenuIcon navigationProps={navigation} />,\n    };\n  };\n\n  state = {};\n\n  _renderItem = ({ item }) => {\n    return (\n      <View style={[styles.slide, { backgroundColor: item.backgroundColor }]}>\n        <Text style={styles.title}>{item.title}</Text>\n        <Image style={styles.image} source={item.image} />\n        <Text style={styles.text}>{item.text}</Text>\n      </View>\n    );\n  }\n\n  _onDone = () => {\n    this.props.navigation.navigate('LoginAndSignup177769') // Login/Sign up Screen\n  }\n\n\n  render = () => (\n    <View style={{ flex: 1, }}>\n      <AppIntroSlider renderItem={this._renderItem} data={slides} onDone={this._onDone} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 16,\n  },\n  slide: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: 320,\n    height: 320,\n    marginVertical: 32,\n  },\n  text: {\n    color: 'rgba(255, 255, 255, 0.8)',\n    textAlign: 'center',\n  },\n  title: {\n    fontSize: 22,\n    color: 'white',\n    textAlign: 'center',\n  },\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import { createStackNavigator } from \"react-navigation-stack\";\n\nimport Onboarding from \"./index.js\";\n\nexport default OnboardingBlueprintNavigator = createStackNavigator(\n  {\n    Onboarding: { screen: Onboarding }\n  },\n  {\n    initialRouteName: \"Onboarding\",\n    defaultNavigationOptions: ({ navigation }) => ({ header: null }),\n  }\n);\n",
      "parentDir": null,
      "newFile": true
    },
    "package.json": {
      "code": "{\n  \"name\": \"@modules/onboarding\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Help your users get started with an onboarding tutorial welcome set of screens.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {},\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {}\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "styles.js": {
      "code": "",
      "parentDir": null,
      "newFile": true
    }
  },
  "splash": {
    "README.md": {
      "code": "# Splash Screen\n\nThe Splash Screen is a ReactNative based splash screen, by that means, it truly isn't executed until after the app\nis fully loaded. If it's desired to appear during load, you will need to build a native screen in both Android and iOS\ndirectories of the project.\n\n## Installation\n\nAfter you have added the screen module into your project, you will need to configure a few items by modifying the project\nfiles in the github repository. Please note to replace ####### with the numeric sequence for your screen (found in folder name under /src/features) and also that the @BluePrint tags for ImportInsertion and NavigationInsertion will be removed in future so placement is with other imports and inside the AppNavigator above other screens.\n\n### Step 1: Add screen into your project screen navigation and set splash screen as initial routed screen.\n\n**/src/mainNavigator.js:**\n**ADD** immediately below in the section labeled //@BlueprintImportInsertion:\n\n`import SplashScreen#######Navigator from '../features/SplashScreen#######/navigator';`\n\n**ADD** immediately below in the section inside AppNavigator definition labeled //@BlueprintNavigationInsertion section:\n\n`SplashScreen#######: { screen: SplashScreen#######Navigator },`\n\n**ADD** comma after **contentComponent: Sidemenu**, and initialRoutName so that your code looks like:\n\n```\nconst DrawerAppNavigator = createDrawerNavigator(\n    {\n        ...AppNavigator,\n    },\n    {\n        contentComponent: SideMenu,\n        initialRouteName: \"SplashScreen#######\", // Splash Screen\n    },\n);\n```\n\n### STEP 2: Change the redirect screen for splash to your desired screen (likely home or onboarding screens).\n\n**MODIFY** Line 22 of generated screen /src/features/SplashScreen#####/screens/index.js file (replace Onboarding177768 with your desired destination screen - likely home or onboarding screens):\n\n`this.props.navigation.navigate('Onboarding177768')`\n\n### STEP (OPTIONAL): Changing time for splash screen.\n\nThe time set in the screen is set for 3000 ms or 3 seconds. To change this, change the number on **Line 23** from 3000 to your desired number of milliseconds.\n\n### Step: (OPTIONAL): Update project to include your screen in the sidemenu navigation list.\n\n**/src/config/installed_blueprints.js:**\nMake sure any screens that aren’t desired in the side menu are removed from the file. This list should only contain the screens desired to be linked on the side menu hamburger. Every screen that you want to show in the sidemenu should be added as follows:\n\n`{ name: 'SplashScreen#######', human_name: 'Splash Screen’, access_route: 'SplashScreen#######'}`\n\n**name:** doesn't matter much, its used as a unique key for the side menu and splash screens array of\nbuttons, it must be unique, that's the only requirement\n\n**human_name:** is what will be displayed in actual app\n\n**access_route:** must be the name of the key in your mainNavigator setup\n",
      "parentDir": null,
      "newFile": true
    },
    "index.js": {
      "code": "import React from \"react\";\nimport {\n  View,\n  Image,\n  ImageBackground,\n  TouchableOpacity,\n  Text,\n  Button,\n  Switch,\n  TextInput,\n  StyleSheet,\n} from \"react-native\";\nimport DateTimePicker from 'react-native-datepicker';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport Slider from '@react-native-community/slider';\nimport { CheckBox } from 'react-native-elements';\nimport { SlideMenuIcon } from '../../navigator/slideMenuIcon';\n\nexport default class Blank extends React.Component {\n  componentDidMount() {\n    setTimeout(() => {\n      this.props.navigation.navigate('Onboarding177768') //onboarding\n    }, 3000);\n  }\n  static navigationOptions = ({ navigation }) => {\n    return {\n      headerLeft: <SlideMenuIcon navigationProps={navigation} />,\n    };\n  };\n\n  state = {};\n\n  render = () => (\n    <View style={styles.container}>\n      <Image style={{ width: '100%', height: '100%' }} source={require('../../assets/images/splashBack.png')} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import { createStackNavigator } from \"react-navigation-stack\";\n\nimport Splash from \"./index.js\";\n\nexport default SplashBlueprintNavigator = createStackNavigator(\n  {\n    Splash: { screen: Splash }\n  },\n  {\n    initialRouteName: \"Splash\",\n    defaultNavigationOptions: ({ navigation }) => ({ header: null }),\n  }\n);\n",
      "parentDir": null,
      "newFile": true
    },
    "package.json": {
      "code": "{\n  \"name\": \"@modules/splash\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Greet your users with an image or logo.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {},\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {}\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "splash.js": {
      "code": "import React from \"react\";\nimport {\n  View,\n  Image,\n  ImageBackground,\n  TouchableOpacity,\n  Text,\n  Button,\n  Switch,\n  TextInput,\n  StyleSheet,\n} from \"react-native\";\nimport DateTimePicker from 'react-native-datepicker';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport Slider from '@react-native-community/slider';\nimport { CheckBox } from 'react-native-elements';\nimport { SlideMenuIcon } from '../../navigator/slideMenuIcon';\n\nexport default class Blank extends React.Component {\n  static navigationOptions = ({ navigation }) => {\n    return {\n      headerLeft: <SlideMenuIcon navigationProps={navigation} />,\n    };\n  };\n\n  state = {};\n\n  render = () => (\n    <View style={styles.container}>\n      <Text>This is your new component -- NOT IN USE -- SPLASH</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginHorizontal: 16,\n  },\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "styles.js": {
      "code": "",
      "parentDir": null,
      "newFile": true
    }
  },
  "terms-and-conditions": {
    "README.md": {
      "code": "# Terms & Conditions Screen\n\nThe Terms and Conditions Screen is a ReactNative based screen that leverages the webview with a simple header.\n\n## Installation\n\nAfter you have added the screen module into your project, you will need to configure a few items by modifying the project\nfiles in the github repository. Please note to replace ####### with the numeric sequence for your screen (found in folder name under /src/features) and also that the @BluePrint tags for ImportInsertion and NavigationInsertion will be removed in future so placement is with other imports and inside the AppNavigator above other screens.\n\n### STEP 1: Add dependency library to the project.\n\n**/PROJECT_ROOT_DIRECTORY/package.json:**\n\n**ADD** Dependency after Line 16 (dependencies opening line \"_\"dependencies\": {_ \")\n\n`\"react-native-webview\": \"^10.8.2\",`\n\n### Step 2: Add screen into your project screen navigation.\n\n**/src/mainNavigator.js:**\n**ADD** immediately below in the section labeled //@BlueprintImportInsertion:\n\n`import TermsAndConditions#######Navigator from '../features/TermsAndConditions#######/navigator';`\n\n**ADD** immediately below in the section inside AppNavigator definition labeled //@BlueprintNavigationInsertion section:\n\n`TermsAndConditions#######: { screen: TermsAndConditions#######Navigator },`\n\n### STEP 3: Add Terms screen into the sidemenu navigation.\n\n**/src/config/installed_blueprints.js**\n**ADD**\nMake sure any screens that aren’t desired in the side menu are removed from the file.\n\nIn installed_blueprints.js you need to add objects for every screen that you want to show in the sidemenu/splash screen.\nThey have a specific format:\n\n`{ name: 'TermsAndConditions#######', human_name: 'Terms & Conditions', access_route: 'TermsAndConditions#######'}`\n\n**name:** doesn't matter much, its used as a unique key for the side menu and splash screens array of\nbuttons, it must be unique, that's the only requirement\n\n**human_name:** is what will be displayed in actual app\n\n**access_route:** must be the name of the key in your mainNavigator setup\n\n### STEP 4: Set the left arrow screen redirect.\n\n**/src/features/TermsAndConditions######/screens/index.js:**\n\n**MODIFY** Line 161 (replace HomeScreen177788 with your desired Home/return screen name:\n\n`<TouchableOpacity style={{ padding: 5 }} onPress={() => { this.props.navigation.navigate('HomeScreen177788') }}>`\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
      "parentDir": null,
      "newFile": true
    },
    "index.js": {
      "code": "import Icon from 'react-native-vector-icons/FontAwesome5';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Text, View, ScrollView, Image, TouchableOpacity } from \"react-native\";\nimport { styles } from \"./styles\";\nimport WebView from \"react-native-webview\";\n\nconst htmlContent = `TERMS & CONDITIONS - SAMPLE\nCROWDBOTICS CORPORATION SOFTWARE AND SERVICES TERMS OF USE\nLast updated June 12, 2020\n\nBY ACCEPTING THESE TERMS, BY (1) CLICKING A BOX OR BUTTON INDICATING ACCEPTANCE, (2) EXECUTING AN ORDER FORM THAT REFERENCES THESE TERMS, OR (3) USING A FREE PRODUCT, YOU AGREE TO THESE TERMS. IF YOU REGISTER FOR CROWDBOTICS’ FREE PRODUCT, THE APPLICABLE PROVISIONS OF THESE TERMS WILL ALSO GOVERN THAT FREE PRODUCT.  IF THE INDIVIDUAL ACCEPTING THESE TERMS IS ACCEPTING ON BEHALF OF A COMPANY OR OTHER LEGAL ENTITY, SUCH INDIVIDUAL REPRESENTS THAT THEY HAVE THE AUTHORITY TO BIND SUCH ENTITY AND ITS AFFILIATES TO THESE TERMS, IN WHICH CASE THE TERM “YOU” REFERS TO SUCH ENTITY AND ITS AFFILIATES. IF THE INDIVIDUAL ACCEPTING THESE TERMS DOES NOT HAVE SUCH AUTHORITY, OR DOES NOT AGREE WITH THESE TERMS, SUCH INDIVIDUAL MUST NOT ACCEPT THESE TERMS AND MAY NOT USE THE PLATFORM.\n\n1. PLATFORM.\n\nSubject to the terms and conditions of these Terms, Crowdbotics grants you during the Term (defined below) a limited, non-exclusive, non-transferable, non-sublicenseable right to access and use the Crowdbotics website, software development platform, engineering workforce and module library (collectively, the “Platform”) for the purpose of managing, hosting, developing, launching, and analyzing your proprietary software applications (“Apps”).\n\n\n2. PROFESSIONAL SERVICES.\n\nSubject to the terms and conditions of these Terms, Crowdbotics will perform the professional engineering, design, or product management services set forth on an Order Form or as otherwise requested through the Platform, which may include managed use of the Platform by Crowdbotics on your behalf (“Services”).  The manner and means by which Crowdbotics chooses to complete the Services are in Crowdbotics’ sole discretion and control. Crowdbotics’ obligations to provide the Services are conditioned upon receiving such information and cooperation from you as may be reasonably necessary to perform the Services.\n\n\n3. RESTRICTIONS.\n\nThe rights granted to you in these Terms are subject to the following restrictions: (a) you may not license, sell, rent, lease, transfer, assign, distribute, host, or otherwise commercially exploit the Platform, whether in whole or in part, or any content displayed on the Platform; (b) you may not modify, make derivative works of, disassemble, reverse compile or reverse engineer any part of the Platform; and (c) except as expressly stated herein, no part of the Platform may be copied, reproduced, distributed, republished, downloaded, displayed, posted or transmitted in any form or by any means.  Unless otherwise indicated, any future release, update, or other addition to functionality of the Platform is subject to these Terms.  Unless otherwise specified on the Platform, all copyright and other proprietary notices on the Platform (or on any content displayed on the Platform) must be retained on all copies thereof.\n\n\n4. YOUR RESPONSIBILITIES.\n\nYou will (a) be responsible for your authorized users’ (“Users”) compliance with these Terms and Order Forms, (b) be responsible for the accuracy, quality and legality of User Content (defined below), (c) be responsible for your use of your Apps (including any Invention and any Prior Invention or Reusable Module (each defined below) incorporated into an Invention) and the interoperation of your App with any third party application, (d) use commercially reasonable efforts to prevent unauthorized access to or use of Platform, and notify Crowdbotics promptly of any such unauthorized access or use, and (e) use the Platform and Services only in accordance with these Terms and applicable laws and government regulations. Any use of the Platform in breach of the foregoing by you or Users that in Crowdbotics’ judgment threatens the security, integrity or availability of Crowdbotics’ services, may result in Crowdbotics’ immediate suspension of the Platform, however Crowdbotics will use commercially reasonable efforts under the circumstances to provide you with notice and an opportunity to remedy such violation or threat prior to any such suspension.\n\n\n5. ACCOUNTS.\n\na. Registration. In order to use certain features of the Platform, you must register for an account (“Account”) and provide certain information about yourself as prompted by the account registration form.  You represent and warrant that: (i) all required registration information you submit is truthful and accurate; (ii) you will maintain the accuracy of such information. You may delete your Account at any time, for any reason, by following the instructions on the Platform.  Crowdbotics may suspend or terminate your Account in accordance with Section 9.\nb. Responsibilities. You are responsible for maintaining the confidentiality of your Account login information and are fully responsible for all activities that occur under your Account.  You agree to immediately notify Crowdbotics of any unauthorized use, or suspected unauthorized use of your Account or any other breach of security.  Crowdbotics cannot and will not be liable for any loss or damage arising from your failure to comply with the above requirements.\n\n\n6. USER CONTENT.\n\n“User Content” means any and all information and content that you submit to the Platform (e.g., Materials (defined below) that you submit to the Platform).  You are solely responsible for your User Content.  You assume all risks associated with use of your User Content, including any reliance on its accuracy, completeness or usefulness by others, or any disclosure of your User Content that personally identifies you or any third party.  You represent and warrant that your User Content does not violate Crowdbotics’ Acceptable Use Policy (set forth below).  You may not represent or imply to others that your User Content is in any way provided, sponsored or endorsed by Crowdbotics.  Because you alone are responsible for your User Content, you may expose yourself to liability if, for example, your User Content violates the Acceptable Use Policy.\n\n\n7. OWNERSHIP.\n\na. Platform. Crowdbotics retains all rights in the Platform, except as expressly set forth in these Terms.\nb. Apps. You own your Apps, subject to the terms and conditions of these Terms.\nc. Inventions.  All rights in and to any copyrightable software, algorithm, code, material, notes, records, drawings, designs, inventions, improvements, developments, discoveries and trade secrets (“Materials”) conceived, discovered, authored, invented, developed or reduced to practice by Crowdbotics, solely or in collaboration with others, during the Term and arising out of, or in connection with, performing the Services under these Terms and any copyrights, patents, trade secrets, mask work rights or other intellectual property rights relating to the foregoing (collectively, but excluding Prior Inventions and Reusable Modules “Inventions”), are your sole property. Crowdbotics will promptly disclose any Invention to you in writing and will deliver and assign (or cause to be assigned) and hereby assigns fully to you all right, title and interest in and to the Inventions. Crowdbotics will reasonably assist you to further evidence, record and perfect such assignments, and to perfect, obtain, maintain, enforce and defend any rights assigned.  Notwithstanding the foregoing, Crowdbotics reserves the right to use and re-use any generalized knowledge it gains arising from the performance of Services in its business without liability to you.\nd. Prior Inventions.  If, in the course of performing Services, Crowdbotics incorporates into any Invention or uses any pre-existing Materials owned by Crowdbotics or in which Crowdbotics has an interest (“Prior Inventions”), then Crowdbotics grants you a non-exclusive, royalty-free, perpetual, irrevocable, transferable, worldwide, sublicenseable license to make, have made, use, import, offer for sale, sell, reproduce, distribute, modify, adapt, prepare derivative works of, display, perform, and otherwise exploit such Prior Inventions solely as incorporated into Inventions.\ne. Reusable Modules. Any open-source components Crowdbotics uses in performing the Services, whether pre-existing or created by Crowdbotics (“Reusable Modules”) are licensed to you pursuant to the terms of the applicable open source license.  For clarity, and notwithstanding anything to the contrary in these Terms, Crowdbotics may develop new Reusable Modules based on your requests in connection with the Services. Crowdbotics will not incorporate any of your User Content into a Reusable Module without your prior consent.\n\n\n8. RELATIOINSHIP OF PARTIES.\n\nCrowdbotics and you are independent contractors.  You understand that Crowdbotics is not an employee, and that the performance of Services requires a collaborative, professional relationship of equals where mutual professional respect, courtesy and consideration are expected. Due to the virtual nature of the relationship, you understand the importance of communication, and agree to respond to questions, requests and communications from Crowdbotics in a timely manner. You understand that Crowdbotics is a business with other clients, and requires fair, realistic notice in order to attend to requests and projects. You understand that Crowdbotics may require detailed clarification of tasks in order to meet expectations and provide the best support and highest quality work, and agrees to provide specifications at the level of detail required by Crowdbotics.\n\n\n9. TERM;TERMINATION.\n\na. The term of these Terms begins on the date you accept these Terms and continues until all subscriptions have expired or been terminated, unless otherwise set forth on an Order Form (the “Term”).  Unless otherwise specified on an Order Form, subscriptions will automatically renew for additional periods equal to the expiring subscription term, unless either party gives the other notice of non-renewal at least 30 days before the end of the relevant subscription term, by cancelling the user’s subscription via the Crowdbotics web product.\nb. Effect of Termination.  Upon termination of these Terms, your right to use the Platform will immediately cease and any fees you owe to Crowdbotics will become immediately due.  Sections 3, 4, 7, 8b, 10 – 14, 15.b, and 16 – 23 will survive any termination or expiration of these Terms. Crowdbotics may delete any User Content hosted on the Platform.\n\n\n10. FEES.\n\nThe fees for the Platform and any Services are as set forth on the Order Form, or, if you do not have an Order Form, the Platform. You will provide Crowdbotics with valid and updated credit card information, and you authorize Crowdbotics to charge such credit card for the fees for the initial subscription term, hourly or milestone-based service fees, any renewal subscription term, in advance, in accordance with the billing frequency set forth on the Order Form, or if there is no Order Form, the Platform. Subscriptions, hourly fees, and milestone-based fees are non-refundable once hours are worked and charged (for hourly fees) or when milestones are funded for work (for milestone fees).\n\n\n11. NO SUPPORT OR MAINTENANCE.\n\nUnless you have a subscription that provides for support, you acknowledge and agree that Crowdbotics will have no obligation to provide you with any support or maintenance in connection with the Platform except as part of the Services.\n\n\n12. ACCEPTABLE USE POLICY.\n\nThe following terms constitute Crowdbotics’ “Acceptable Use Policy”:\n\na. You will not use the Platform to collect, upload, transmit, display, or distribute any User Content (i) that violates any third-party right, including any copyright, trademark, patent, trade secret, moral right, privacy right, right of publicity, or any other intellectual property or proprietary right; (ii) that is unlawful, harassing, abusive, tortious, threatening, harmful, invasive of another’s privacy, vulgar, defamatory, false, intentionally misleading, trade libelous, pornographic, obscene, patently offensive, promotes racism, bigotry, hatred, or physical harm of any kind against any group or individual or is otherwise objectionable; (iii) that is harmful to minors in any way; or (iv) that is in violation of any law, regulation, or obligations or restrictions imposed by any third party.\nb. In addition, you will not: (i) upload, transmit, or distribute to or through the Platform any computer viruses, worms, or any software intended to damage or alter a computer system or data; (ii) send through the Platform unsolicited or unauthorized advertising, promotional materials, junk mail, spam, chain letters, pyramid schemes, or any other form of duplicative or unsolicited messages, whether commercial or otherwise; (iii)  use the Platform to harvest, collect, gather or assemble information or data regarding other users, including e-mail addresses, without their consent; (iv) interfere with, disrupt, or create an undue burden on servers or networks connected to the Platform, or violate the regulations, policies or procedures of such networks; (v) attempt to gain unauthorized access to the Platform (or to other computer systems or networks connected to or used together with the Platform), whether through password mining or any other means; (vi) harass or interfere with any other user’s use and enjoyment of the Platform; or (vi) use software or automated agents or scripts to produce multiple accounts on the Platform, or to generate automated searches, requests, or queries to (or to strip, scrape, or mine data from) the Platform (provided, however, that we conditionally grant to the operators of public search engines revocable permission to use spiders to copy materials from the Platform for the sole purpose of and solely to the extent necessary for creating publicly available searchable indices of the materials, but not caches or archives of such materials, subject to the parameters set forth in our robots.txt file).\nc. Enforcement. We reserve the right (but have no obligation) to review any User Content, and to investigate and/or take appropriate action against you in our sole discretion if you violate this Acceptable Use Policy or any other provision of these Terms or otherwise create liability for us or any other person. Such action may include removing or modifying your User Content, terminating your Account in accordance with Section 9, and/or reporting you to law enforcement authorities.\n\n\n13. FEEDBACK; NAME.\n\nIf you provide Crowdbotics with any feedback or suggestions regarding the Platform or Services (“Feedback”), then you grant Crowdbotics a perpetual, irrevocable, non-exclusive, transferable, sublicensable, worldwide license to use such Feedback in any manner it deems appropriate.  Crowdbotics will treat any Feedback as non-confidential and non-proprietary.  Unless you provide Crowdbotics with an opt-out notice, you grant Crowdbotics a right to use your name, logo, and application screenshots in Crowdbotics’ marketing materials.  Any such opt-out notice will not apply to use by Crowdbotics in accordance with this Section prior to Crowdbotics’ receipt of notice.\n\n\n14. REPRESENTATIONS AND WARRANTIES.\n\nYou represent and warrant that you have the full right and authority to enter into and perform these Terms, and that entering into these Terms does not violate any outstanding assignments, grants, licenses, encumbrances, obligations, agreements or understanding to which you are a party.  Crowdbotics warrants that during an applicable subscription term Crowdbotics will not materially decrease the overall functionality of the Platform. For any breach of that warranty, your exclusive remedies are those described in Section 9.\n\n\n15. FREE SERVICES.\n\na. Crowdbotics may make certain parts of the Platform available for free (“Free Products”).  Use of Free Products is subject to the terms and conditions of these Terms. In the event of a conflict between this section and any other portion of these Terms, this section controls. Free Products are provided to you without charge as described on the Platform. You agree that Crowdbotics, in its sole discretion and for any or no reason, may terminate your access to the Free Products or any part thereof, with or without prior notice.  Crowdbotics will not be liable to you or any third party for such termination. You are solely responsible for exporting your User Content and any Apps from the Free Products prior to termination of your access to the Free Products for any reason, provided that if Crowdbotics terminates your account, except as required by law, Crowdbotics will provide you a reasonable opportunity to retrieve your Apps.\nb. NOTWITHSTANDING SECTIONS 14, 16, AND 18.b, THE FREE PRODUCTS ARE PROVIDED “AS-IS” AND WITHOUT ANY WARRANTY, AND CROWDBOTICS HAS NO INDEMNIFICATION OBLIGATIONS NOR LIABILITY OF ANY TYPE WITH RESPECT TO THE FREE PRODUCTS UNLESS SUCH EXCLUSION OF LIABILITY IS NOT ENFORCEABLE UNDER APPLICABLE LAW IN WHICH CASE CROWDBOTICS’ LIABILITY WITH RESPECT TO THE FREE PRODUCTS WILL NOT EXCEED US$100. WITHOUT LIMITING THE FOREGOING, CROWDBOTICS AND ITS SUPPLIERS DO NOT REPRESENT OR WARRANT TO YOU THAT: (I) YOUR USE OF THE FREE PRODUCTS WILL MEET YOUR REQUIREMENTS, (II) YOUR USE OF THE FREE PRODUCTS WILL BE UNINTERRUPTED, TIMELY, SECURE OR FREE FROM ERROR, AND (III) ANY DATA PROVIDED THROUGH THE FREE PRODUCTS WILL BE ACCURATE. NOTWITHSTANDING ANYTHING TO THE CONTRARY IN SECTION 17, YOU ARE FULLY LIABLE UNDER THESE TERMS TO CROWDBOTICS FOR ANY DAMAGES ARISING OUT OF YOUR USE OF THE FREE PRODUCTS, ANY BREACH BY YOU OF THESE TERMS AND ANY OF YOUR INDEMNIFICATION OBLIGATIONS HEREUNDER.\n\n\n16. DISCLAIMERS.\n\nEXCEPT AS EXPRESSLY PROVIDED IN THESE TERMS, NEITHER PARTY MAKES ANY WARRANTY OF ANY KIND, WHETHER EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, AND EACH PARTY SPECIFICALLY DISCLAIMS ALL IMPLIED WARRANTIES, INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT, TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW.\n\n\n17. LIMITATION OF LIABILITY.\n\na. TO THE FULLEST EXTENT PERMITTED BY LAW, IN NO EVENT WILL CROWDBOTICS (OR ITS SUPPLIERS) BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY LOST PROFITS, LOST DATA, COSTS OF PROCUREMENT OF SUBSTITUTE PRODUCTS, OR ANY INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL OR PUNITIVE DAMAGES ARISING FROM OR RELATING TO THESE TERMS OR YOUR USE OF, OR INABILITY TO USE, THE PLATFORM OR SERVICES, EVEN IF CROWDBOTICS HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.  ACCESS TO, AND USE OF, THE PLATFORM AND SERVICES IS AT YOUR OWN DISCRETION AND RISK, AND YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR DEVICE OR COMPUTER SYSTEM, OR LOSS OF DATA RESULTING THEREFROM.\nb. TO THE FULLEST EXTENT PERMITTED BY LAW, NOTWITHSTANDING ANYTHING TO THE CONTRARY, CROWDBOTICS’ LIABILITY TO YOU FOR ANY DAMAGES ARISING FROM OR RELATED TO THESE TERMS (FOR ANY CAUSE WHATSOEVER AND REGARDLESS OF THE FORM OF THE ACTION), WILL AT ALL TIMES BE LIMITED TO THE GREATER OF (I) THE FEES YOU HAVE PAID CROWDBOTICS IN THE 12 MONTHS PRIOR TO THE EVENT GIVING RISE TO LIABILITY AND (II) US$50. THE EXISTENCE OF MORE THAN ONE CLAIM WILL NOT ENLARGE THIS LIMIT.  YOU AGREE THAT OUR SUPPLIERS WILL HAVE NO LIABILITY OF ANY KIND ARISING FROM OR RELATING TO THESE TERMS.\n\n\n18. INDEMNIFICATION.\n\na. By You. To The fullest extent permitted by law, you will indemnify Crowdbotics from and against any and all liabilities, suits, losses, damages and judgments, costs and expenses (including reasonable outside counsel's fees and expenses) in connection with (i) your use of the Platform or Services in a manner not authorized under these Terms, (ii) any other breach of these Terms by you, and (iii) your use of Prior Inventions or Reusable Modules in a manner not authorized under these Terms.\nb. By Crowdbotics. Unless you are using a Free Product, Crowdbotics will indemnify and defend you against any claim, demand, suit or proceeding made or brought against you by a third party alleging that the Platform or any Prior Invention infringes or misappropriates such third party’s intellectual property rights (an “IP Claim”), provided that you (i) promptly give Crowdbotics written notice of the IP Claim, (ii) give Crowdbotics sole control of the defense and settlement of the IP Claim, and (iii) give Crowdbotics all reasonable assistance, at Crowdbotics’ expense. The foregoing obligations do not apply if (1) the allegation does not state with specificity that the Platform or a Prior Invention are the basis of the IP Claim; (2) an IP Claim arises from the use or combination of the Platform or Prior Invention (other than as incorporated into an Invention) with software, hardware, data, or processes not provided by Crowdbotics, if the Platform, Prior Invention or use thereof would not infringe without such combination; (3) an IP Claim arises from Services for which there is no charge; or (4) an IP Claim arises from User Content or your breach of these Terms.  If Crowdbotics believes an infringement or misappropriation claim related to the Platform or a Prior Invention is likely, then Crowdbotics may: (A) modify the Platform or Prior Invention to be non-infringing, (B) obtain a license for your continued use of the Platform or Prior Invention, or (C) terminate your subscription for the Platform upon 30 days’ written notice and refund you any prepaid fees covering the remainder of the term of the terminated subscriptions.\n\n\n19. CONFIDENTIALITY.\n\na. Definition. “Confidential Information” means all information disclosed by a party (“Disclosing Party”) to the other party (“Receiving Party”), whether orally or in writing, that is designated as confidential or that reasonably should be understood to be confidential given the nature of the information and the circumstances of disclosure. Crowdbotics’ Confidential Information includes the Platform and any Prior Inventions, and the terms and conditions of all Order Forms (including pricing). Confidential Information of each party includes business and marketing plans, technology and technical information, product plans and designs, and business processes disclosed by such party. However, Confidential Information does not include any information that (i) is or becomes generally known to the public without breach of any obligation owed to the Disclosing Party, (ii) was known to the Receiving Party prior to its disclosure by the Disclosing Party without breach of any obligation owed to the Disclosing Party, (iii) is received from a third party without breach of any obligation owed to the Disclosing Party, or (iv) was independently developed by the Receiving Party.\nb. Non-Use and Non-Disclosure. As between the parties, each party retains all ownership rights in and to its Confidential Information. The Receiving Party will use the same degree of care that it uses to protect the confidentiality of its own confidential information of like kind (but not less than reasonable care) to (i) not use any Confidential Information of the Disclosing Party for any purpose outside the scope of these Terms and (ii) except as otherwise authorized by the Disclosing Party in writing, limit access to Confidential Information of the Disclosing Party to those of its employees and contractors who need that access for purposes consistent with these Terms and who have signed confidentiality agreements with the Receiving Party containing protections not materially less protective of the Confidential Information than those in these Terms. Neither party will disclose the terms of these Terms or any Order Form to any third party other than its affiliates, legal counsel and accountants without the other party’s prior written consent.\nc. Compelled Disclosure. The Receiving Party may disclose Confidential Information of the Disclosing Party to the extent compelled by law to do so, provided the Receiving Party gives the Disclosing Party prior notice of the compelled disclosure (to the extent legally permitted) and reasonable assistance, at the Disclosing Party's cost, if the Disclosing Party wishes to contest the disclosure. If the Receiving Party is compelled by law to disclose the Disclosing Party’s Confidential Information as part of a civil proceeding to which the Disclosing Party is a party, and the Disclosing Party is not contesting the disclosure, the Disclosing Party will reimburse the Receiving Party for its reasonable cost of compiling and providing secure access to that Confidential Information.\n\n\n20. ELECTRONIC COMMUNICATIONS.\n\nBy using the Platform, you consent to receiving electronic communications from Crowdbotics (either by posting notices on the Platform or via email).  You agree that any notices Crowdbotics is required to provide you may be provided electronically.\n\n\n21. EXPORT.\n\nThe Platform and any Inventions, Prior Inventions and Reusable Modules may be subject to U.S. export control laws and may be subject to export or import regulations in other countries. You agree not to export, reexport, or transfer, directly or indirectly, any U.S. technical data acquired from Crowdbotics, or any products utilizing such data, in violation of the United States export laws or regulations.\n\n\n22. ARBITRATION.\n\na. We Both Agree To Arbitrate. You and Crowdbotics agree to resolve any claims relating to these Terms, the Platform or any Services through final and binding arbitration by a single arbitrator, except as set forth under Section 22.e. This includes disputes arising out of or relating to interpretation or application of this “Arbitration” section, including its enforceability, revocability, or validity.\nb. Informal Resolution. Before filing a claim, each party agrees to try to resolve the dispute by contacting the other party. If a dispute is not resolved within thirty days of notice, either party may bring a formal proceeding.\nc. Arbitration. The American Arbitration Association (AAA) will administer the arbitration under its Commercial Arbitration Rules. The arbitration will be held in San Francisco (CA), or any other location both parties agree to in writing.\nd. Exception to Arbitration. Either Party may bring a lawsuit in the federal or state courts of Alameda County, California solely for injunctive relief to stop unauthorized use or abuse of the Platform or infringement of intellectual property rights without first engaging in the informal dispute notice process described above. Both you and Crowdbotics consent to venue and personal jurisdiction there.\ne. NO CLASS ACTIONS. You may only resolve disputes with Crowdbotics on an individual basis and will not bring a claim in a class, consolidated or representative action. Class arbitrations, class actions, private attorney general actions and consolidation with other arbitrations are not allowed.\n\n\n23. MISCELLANEOUS.\n\nNo failure or delay by either party in exercising any right under these Terms will constitute a waiver of that right. If any term or provision of these Terms is determined to be illegal or invalid, such illegality or invalidity will not affect the validity of the remainder of these Terms.  These Terms are governed by California law. These Terms, which include any Order Form, are the entire agreement between the parties hereto with respect to the subject matter hereof. Neither party may assign these Terms without the other party’s consent, except that Crowdbotics may assign these Terms without consent in connection with any merger where Crowdbotics is not the surviving entity, reorganization, or sale of all or substantially all of its assets.  These Terms will be binding upon each party’s successors and permitted assigns.\\n\\n\\n`\n\n\nclass TandCView extends Component {\n\n\n  componentDidMount() {\n  }\n\n\n  render(item) {\n    return (\n      <View style={{\n        flex: 1\n      }}>\n        <View style={{ height: 60, backgroundColor: \"#333333\", justifyContent: \"space-between\", padding: 20, alignItems: \"flex-end\", flexDirection: 'row' }}>\n          <TouchableOpacity style={{ padding: 5 }} onPress={() => { this.props.navigation.navigate('HomeScreen177788') }}>\n            <Icon style={{ width: 18, height: 16 }} name={'arrow-left'} size={18} color=\"#fff\" />\n          </TouchableOpacity>\n          <Text style={{ color: \"#fff\", fontSize: 16 }}>TERMS AND CONDITIONS</Text>\n          <View></View>\n        </View>\n\n        <ScrollView style={{\n          flex: 1,\n          padding: 20\n        }} >\n          <Text style={{ color: \"#000\", fontSize: 16 }}>{htmlContent}</Text>\n        </ScrollView>\n      </View>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n\n});\n\nconst mapStateToProps = state => ({});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TandCView);\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import { createStackNavigator } from \"react-navigation-stack\";\n\nimport Terms from \"./index.js\";\n\nexport default TermsBlueprintNavigator = createStackNavigator(\n  {\n    Terms: { screen: Terms }\n  },\n  {\n    initialRouteName: \"Terms\",\n    defaultNavigationOptions: ({ navigation }) => ({ header: null }),\n  }\n);\n",
      "parentDir": null,
      "newFile": true
    },
    "package.json": {
      "code": "{\n  \"name\": \"@modules/terms-and-conditions\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Terms and Conditions Screen\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {\n    \"react-native-webview\": \"^11.2.0\"\n  },\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"react-native-vector-icons\": \"^8.0.0\",\n    \"react-navigation-stack\": \"^2.10.2\"\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "styles.js": {
      "code": "import { StyleSheet } from \"react-native\";\nimport { scaleVertical, scale } from \"../../utils/scale\";\n\nexport const styles = StyleSheet.create({\n  heading: {\n    color: \"#EC5E53\",\n    fontSize: 42,\n    marginTop: scaleVertical(15),\n    width: '100%',\n    textAlign: 'center'\n  },\n  text: {\n    color: \"#000000\",\n    fontSize: 16,\n    padding: scale(20),\n    width: '100%'\n  },\n});\n",
      "parentDir": null,
      "newFile": true
    }
  },
  "user-profile": {
    "README.md": {
      "code": "# User Profile\n\nThe user Profile Screen is a React Native-based screen that allows the user to view other users' profiles and edit its own profile information.\n\n## Requirements\n\nFor this module to be fully functional, we recommend first installing and configuring the `Basic Login Signup` module available in the storyboard's list of verified modules.\n\n## Installation\n\nAfter you have added the screen module into your project, you will need to configure a few items by modifying the project files in the github repository. Please note to replace ####### with the numeric sequence for your screen (found in folder name under /src/features) and also that the @BluePrint tags for ImportInsertion and NavigationInsertion will be removed in future so placement is with other imports and inside the AppNavigator above other screens.\n\n### STEP 1: Check if your project has the necessary dependencies\n\nThe `react-native-elements` and `react-native-datepicker` dependencies are already available in all newly created mobile apps within Crowdbotics platform. However, make sure to double check if they exist in the `package.json` file at the root folder of your project directory. If they are not available, open this file (`package.json`) and add the dependency after the dependencies opening line \"_\"dependencies\": {_. It should look like this:\n\n```js\n\"dependencies\": {\n  \"react-native-elements\": \"^2.3.2\",\n  \"react-native-datepicker\": \"^1.7.2\",\n```\n\n### STEP 2: Add screen into your project screen navigation.\n\n#### Edit File /src/navigator/mainNavigator.js:\n\n**ADD** immediately below in the section labeled //@BlueprintImportInsertion:\n\n```js\nimport UserProfileNavigator from \"../features/UserProfile#######/navigator\";\n```\n\n**ADD** immediately below in the section inside AppNavigator definition labeled //@BlueprintNavigationInsertion section:\n\n```js\nUserProfile: { screen: UserProfileNavigator },\n```\n\n#### Edit File /src/config/installed_blueprints.js:\n\nOpen the file and add below the comment message `// access route is the route nate given to navigator`:\n\n```js\n{ name: 'UserProfile#######', human_name: 'User Profile', access_route: 'UserProfile' },\n```\n\nYou can define the `human_name` for any text that you desire it to display in the side menu.\n\n### STEP 3: Add reducers to store.\n\n**/src/store/index.js**\n**ADD** after Line 4 (sagas import):\n\n```js\nimport {\n  userRootSaga,\n  userReducer,\n} from \"../features/UserProfile#######/store\";\n```\n\nUpdate your `createStore` code to include the `userReducer`. For example, if your store looks like this:\n\n```js\nconst store = createStore(\n  combineReducers({\n    apiReducer: apiReducer,\n    customReducer: customReducer,\n    authReducer: authReducer,\n  }),\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n```\n\nYou should add the `userReducer: userReducer` after the authReducer, and it should then look like this:\n\n```js\nconst store = createStore(\n  combineReducers({\n    apiReducer: apiReducer,\n    customReducer: customReducer,\n    authReducer: authReducer,\n    userReducer: userReducer,\n  }),\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n```\n\nNear the end of the file, before the `export { store }` line, register the new sagas `sagaMiddleware` like this:\n\n```js\nsagaMiddleware.run(userRootSaga);\n```\n\nOpen your \"../features/UserProfile#######/store/services.js\" file check if you need to update your back-end api url at `baseURL`. By default, we use the url defined in the file `src/config/app.js`. If you rename your or use custom domains, you might need to replace that value with the proper back-end url, something like:\n`baseURL: \"https://mycustomdomain.com\"`\n\n### Step 4: Update Data Models\n\nGo to your Crowdbotics' app dashboard and navigate to the `Data Models` page. You will see a `User` model. Click on the user model, then click on `Edit Selected` to update the user model and edit the following:\n\n1. Check the box for `API` and add the following fields:\n\n- `first_name`: type as `CharField`\n- `last_name`: type as `CharField`\n- `birth_date`: type as `DateField`\n- `bio`: type as `CharField`\n\nIn the end, your data model should look like this:\n\n![model builder](https://crowdbotics-slack-dev.s3.amazonaws.com/media/project_component_resources/Screenshot_from_2021-01-05_16-05-28.png)\n\nAfter all the changes, click `save` for all the changes to be applied to your project.\n\n[Visit our knowledge base](https://knowledge.crowdbotics.com/what-is-the-model-editor-and-what-is-it-for) if you need help understanding Data Models.\n\n## Module Usage\n\nThere are two ways of using this module. First, is as a logged user profile page, where the user can view, edit and update their profile information. This module will behave like this by default.\n\nThe second use case is for displaying **other** users' information. For example, if you have a screen that lists all the users available in the platform, and when you click in a user name, you would like the hability to view that specific user details. For that, you need to add a navigation to the User Profile screen, and pass the user id as a parameter in the navigation call. In the code example below, whenever the button is clicked, it will navigate to the User profile screen and load the information of the user which their id equals to `123`.\n\n```js\n<Button\n  title=\"Go to User Profile\"\n  onPress={() => this.props.navigation.navigate(\"UserProfile\", { id: 123 })}\n/>\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\nPlease make sure to update tests as appropriate.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
      "parentDir": null,
      "newFile": true
    },
    "edit.js": {
      "code": "import React, { Component } from 'react';\nimport {\n  TextInput,\n  View,\n  Alert,\n  Text,\n  TouchableOpacity,\n  ActivityIndicator,\n} from 'react-native';\nimport DateTimePicker from 'react-native-datepicker';\nimport { Avatar } from 'react-native-elements';\nimport { inputStyles, Color, buttonStyles, styles } from './styles';\nimport { getInitials, transformLabel } from './utils';\nimport moment from 'moment';\n\nexport const Button = props => (\n  <TouchableOpacity onPress={props.onPress} disabled={props.loading}>\n    <View style={buttonStyles.view}>\n      {props.loading ? (\n        <ActivityIndicator color={Color.white} />\n      ) : (\n          <Text style={buttonStyles.text}>{props.title}</Text>\n        )}\n    </View>\n  </TouchableOpacity>\n);\n\nexport const InputContainer = props => (\n  <View>\n    <Text style={inputStyles.label}>{transformLabel(props.label)}</Text>\n    <View>\n      {props.isDate ? (\n        <DateTimePicker\n          style={[inputStyles.input, inputStyles.date]}\n          customStyles={{ dateInput: { borderWidth: 0 } }}\n          format=\"MM-DD-YYYY\"\n          mode=\"date\"\n          display=\"default\"\n          {...props}\n        />\n      ) : (\n          <TextInput\n            autoCapitalize=\"none\"\n            style={inputStyles.input}\n            placeholderTextColor={Color.steel}\n            underlineColorAndroid={'transparent'}\n            {...props}\n          />\n        )}\n      {!!props.error && <Text style={inputStyles.error}>{props.error}</Text>}\n    </View>\n  </View>\n);\n\nexport default class Edit extends Component {\n  constructor(props) {\n    super(props);\n    const birthdate = this.props.user.birth_date\n      ? new Date(this.props.user.birth_date)\n      : null;\n    this.state = {\n      initials: getInitials(this.props.user),\n      first_name: this.props.user.first_name,\n      last_name: this.props.user.last_name,\n      email: this.props.user.email,\n      birth_date: birthdate,\n      bio: this.props.user.bio,\n      loading: false,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { loading } = this.state;\n    const { api } = this.props;\n    if (prevProps.api.isLoading && !api.errors && loading) {\n      Alert.alert('User Updated', 'User information was successfully updated.');\n      this.setState({ loading: false });\n    }\n  }\n\n  onSaveProfile = () => {\n    this.setState({ loading: true });\n    const birthdate = this.state.birth_date\n      ? moment(this.state.birth_date, 'MM-DD-YYYY').format('YYYY-MM-DD')\n      : null;\n    this.props.updateUser(\n      {\n        id: this.props.user.id,\n        first_name: this.state.first_name,\n        last_name: this.state.last_name,\n        email: this.state.email,\n        bio: this.state.bio,\n        birth_date: birthdate,\n      },\n      this.props.token,\n    );\n  };\n\n  render() {\n    const { api } = this.props;\n    return (\n      <View>\n        <View style={styles.profileIcon}>\n          <Avatar\n            size=\"large\"\n            rounded\n            icon={{ name: 'user', type: 'font-awesome' }}\n            title={this.state.initials}\n            containerStyle={{ backgroundColor: Color.pink }}\n          />\n        </View>\n\n        <InputContainer\n          keyboardType=\"default\"\n          label=\"First Name\"\n          placeholder=\"John\"\n          onChangeText={value => this.setState({ first_name: value })}\n          value={this.state.first_name}\n        />\n        <InputContainer\n          keyboardType=\"default\"\n          label=\"Last Name\"\n          placeholder=\"Doe\"\n          onChangeText={value => this.setState({ last_name: value })}\n          value={this.state.last_name}\n        />\n        <InputContainer\n          keyboardType=\"email-address\"\n          label=\"Email Address\"\n          placeholder=\"email@email.com\"\n          onChangeText={value => this.setState({ email: value })}\n          value={this.state.email}\n          error={this.state.email ? '' : `E-mail address field is required.`}\n        />\n\n        <InputContainer\n          isDate={true}\n          label=\"Birth Date\"\n          placeholder=\"01/01/1900\"\n          maxDate={new Date()}\n          onDateChange={value => this.setState({ birth_date: value })}\n          date={this.state.birth_date}\n        />\n        <InputContainer\n          label=\"Bio\"\n          multiline={true}\n          numberOfLines={2}\n          placeholder=\"Write something about yourself.\"\n          onChangeText={value => this.setState({ bio: value })}\n          value={this.state.bio}\n        />\n        <Button\n          title=\"Save\"\n          loading={api.isLoading}\n          onPress={this.onSaveProfile}\n        />\n      </View>\n    );\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "index.js": {
      "code": "import React, { Component } from 'react';\nimport { View, ScrollView, ActivityIndicator } from 'react-native';\nimport { user_read, user_update } from './store/actions';\nimport { NavigationEvents } from 'react-navigation';\nimport { styles, Color } from './styles';\nimport { connect } from 'react-redux';\nimport EditUser from './edit';\nimport ViewUser from './view';\n\nexport class UserDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n    };\n  }\n\n  load() {\n    const { navigation } = this.props;\n    const { token, auth_user } = this.props;\n\n    if (!token && auth_user !== {}) {\n      this.props.navigation.navigate('BasicLoginSignup');\n      return;\n    }\n\n    const id = navigation.getParam('id', null) || auth_user.id;\n    this.props.getUser(id, token);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { loading } = this.state;\n    const { api } = this.props;\n\n    if (loading && prevProps.api.isLoading && !api.isLoading) {\n      this.setState({ loading: false });\n    }\n  }\n\n  render() {\n    const { loading } = this.state;\n    const { isEdit } = this.props;\n    return (\n      <ScrollView style={styles.container} contentStyle={styles.content}>\n        <NavigationEvents\n          onDidFocus={() => this.load()}\n          onWillFocus={() => this.setState({ loading: true })}\n          onDidBlur={() => {\n            this.props.navigation.setParams({ id: null });\n          }}\n        />\n        {loading ? (\n          <View>\n            <ActivityIndicator color={Color.steel} />\n          </View>\n        ) : (\n          <View>\n            {isEdit ? (\n              <EditUser {...this.props} />\n            ) : (\n              <ViewUser {...this.props} />\n            )}\n          </View>\n        )}\n      </ScrollView>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const id =\n    ownProps.navigation.getParam('id', null) || state.authReducer.user.id;\n\n  return {\n    token: state.authReducer.token,\n    auth_user: state.authReducer.user,\n    api: state.userReducer.api,\n    user: state.userReducer.users.find(user => user.id == id) || {},\n    isEdit: id === state.authReducer.user.id\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getUser: (id, token) => dispatch(user_read(id, token)),\n    updateUser: (data, token) => dispatch(user_update(data, token)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(UserDetail);\n",
      "parentDir": null,
      "newFile": true
    },
    "navigator.js": {
      "code": "import React from \"react\";\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { SlideMenuIcon } from '../../navigator/slideMenuIcon';\nimport UserProfile from './index';\n\nexport default (UserNavigator = createStackNavigator(\n  {\n    UserProfile: {\n      screen: UserProfile,\n      navigationOptions: ({ navigation }) => ({\n        title: 'User Profile',\n        headerLeft: <SlideMenuIcon navigationProps={navigation} />,\n      }),\n    },\n  },\n  {\n    initialRouteName: 'UserProfile',\n  },\n));\n",
      "parentDir": null,
      "newFile": true
    },
    "package.json": {
      "code": "{\n  \"name\": \"@modules/user-profile\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A screen to display user information like a profile picture, profile stats, action buttons, and images.\",\n  \"private\": true,\n  \"main\": \"index.js\",\n  \"x-dependencies\": {},\n  \"author\": \"Crowdbotics\",\n  \"license\": \"ISC\",\n  \"dependencies\": {}\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "store/actions.js": {
      "code": "import * as types from './constants';\n\n\nexport const user_read = (id, token) => ({\n  type: types.USER_READ,\n  id,\n  token,\n});\n\nexport const user_read_succeeded = (response, starter) => ({\n  type: types.USER_READ_SUCCEEDED,\n  response,\n  starter\n});\n\nexport const user_read_failed = (response, starter) => ({\n  type: types.USER_READ_FAILED,\n  response,\n  starter\n});\n\nexport const user_list = token => ({\n  type: types.USER_LIST,\n  token,\n});\n\nexport const user_list_succeeded = (response, starter) => ({\n  type: types.USER_LIST_SUCCEEDED,\n  response,\n  starter\n});\n\nexport const user_list_failed = (response, starter) => ({\n  type: types.USER_LIST_FAILED,\n  response,\n  starter\n});\n\nexport const user_update = (data, token) => ({\n  type: types.USER_UPDATE,\n  data,\n  token,\n});\n\nexport const user_update_succeeded = (response, starter) => ({\n  type: types.USER_UPDATE_SUCCEEDED,\n  response,\n  starter\n});\n\nexport const user_update_failed = (response, starter) => ({\n  type: types.USER_UPDATE_FAILED,\n  response,\n  starter\n});\n",
      "parentDir": null,
      "newFile": true
    },
    "store/constants.js": {
      "code": "export const USER_READ = 'USER_READ';\nexport const USER_READ_SUCCEEDED = 'USER_READ_SUCCEEDED';\nexport const USER_READ_FAILED = 'USER_READ_FAILED';\n\nexport const USER_UPDATE = 'USER_UPDATE';\nexport const USER_UPDATE_SUCCEEDED = 'USER_UPDATE_SUCCEEDED';\nexport const USER_UPDATE_FAILED = 'USER_UPDATE_FAILED';\n\nexport const USER_LIST = 'USER_LIST';\nexport const USER_LIST_SUCCEEDED = 'USER_LIST_SUCCEEDED';\nexport const USER_LIST_FAILED = 'USER_LIST_FAILED';\n",
      "parentDir": null,
      "newFile": true
    },
    "store/index.js": {
      "code": "import userRootSaga from './sagas';\nimport userReducer from './reducers';\n\nexport { userRootSaga, userReducer };\n",
      "parentDir": null,
      "newFile": true
    },
    "store/reducers.js": {
      "code": "\nimport * as types from './constants';\n\nconst INITIAL_STATE = {\n  api: {\n    isLoading: false,\n    errors: null,\n  },\n  users: [],\n};\n\nexport default function userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case types.USER_READ:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: true,\n          errors: null,\n        },\n      });\n    case types.USER_READ_SUCCEEDED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n          errors: null,\n        },\n        users: [\n          ...state.users?.filter(record => record.id !== action.response.data.id),\n          action.response.data,\n        ],\n      });\n    case types.USER_READ_FAILED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n          errors: action.response.message,\n        },\n      });\n    case types.USER_LIST:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: true,\n        },\n      });\n    case types.USER_LIST_SUCCEEDED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n        },\n        users: action.response.data,\n      });\n    case types.USER_LIST_FAILED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n          errors: action.response.message,\n        },\n      });\n    case types.USER_UPDATE:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: true,\n        },\n      });\n    case types.USER_UPDATE_SUCCEEDED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n        },\n        users: [\n          ...state.users.filter(record => record.id !== action.response.data.id),\n          action.response.data,\n        ],\n      });\n    case types.USER_UPDATE_FAILED:\n      return Object.assign({}, state, {\n        api: {\n          isLoading: false,\n          errors: action.response.message,\n        },\n      });\n    default:\n      return state;\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "store/sagas.js": {
      "code": "import { put, call, all, spawn, takeEvery } from 'redux-saga/effects';\nimport service from \"./services\"\nimport * as types from './constants';\nimport * as actions from './actions';\n\n// Get User\nfunction* userReadWorker(action) {\n  try {\n    const result = yield call(service.user_read, action);\n    yield put(actions.user_read_succeeded(result, action));\n  } catch (err) {\n    yield put(actions.user_read_failed(err, action));\n  }\n}\n\nfunction* userReadWatcher() {\n  yield takeEvery(types.USER_READ, userReadWorker)\n}\n\n// Get Users\nfunction* userListWorker(action) {\n  try {\n    const result = yield call(service.user_list, action);\n    yield put(actions.user_list_succeeded(result, action));\n  } catch (err) {\n    yield put(actions.user_list_failed(err, action));\n  }\n}\n\nfunction* userListWatcher() {\n  yield takeEvery(types.USER_LIST, userListWorker)\n}\n\n// Update User\nfunction* userUpdateWorker(action) {\n  try {\n    const result = yield call(service.user_update, action);\n    yield put(actions.user_update_succeeded(result, action));\n  } catch (err) {\n    yield put(actions.user_update_failed(err, action));\n  }\n}\n\nfunction* userUpdateWatcher() {\n  yield takeEvery(types.USER_UPDATE, userUpdateWorker)\n}\n\nexport default function* authRootSaga() {\n  const sagas = [\n    userReadWatcher,\n    userReadWatcher,\n    userListWatcher,\n    userUpdateWatcher\n  ];\n  yield all(\n    sagas.map(saga =>\n      spawn(function*() {\n        while (true) {\n          try {\n            yield call(saga);\n            break;\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      }),\n    ),\n  );\n}\n",
      "parentDir": null,
      "newFile": true
    },
    "store/services.js": {
      "code": "import axios from 'axios';\nimport { appConfig } from '../../../config/app';\n\nconst usersAPI = axios.create({\n  baseURL: appConfig.emailAuthAPIEndPoint, // your app back-end url\n  headers: { Accept: 'application/json', 'Content-Type': 'application/json' },\n});\n\nfunction user_read(action) {\n  return usersAPI.get(`/api/v1/user/${action.id}/`, null, {\n    headers: {\n      Authorization: `Token ${action.token}`,\n    },\n  });\n}\n\nfunction user_update(action) {\n  return usersAPI.patch(`/api/v1/user/${action.data.id}/`, null, {\n    data: action.data,\n    headers: {\n      Authorization: `Token ${action.token}`,\n    },\n  });\n}\n\nfunction user_list(action) {\n  return usersAPI.get(`/api/v1/user/`, null, {\n    headers: {\n      Authorization: `Token ${action.token}`,\n    },\n  });\n}\n\nexport default {\n  user_read,\n  user_list,\n  user_update,\n};\n",
      "parentDir": null,
      "newFile": true
    },
    "styles.js": {
      "code": "import { StyleSheet } from 'react-native';\n\nexport const Color = {\n  malibu: '#46E1FD',\n  pink: '#e97d77',\n  white: '#fff',\n  whiteOff: '#F4F5F9',\n  steel: '#CCCCCC',\n  black: '#060606',\n  facebook: '#3b5998',\n  red: 'red',\n  gray: '#6A6A6A',\n};\n\nexport const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 20,\n    marginVertical: 20,\n    width: '100%',\n  },\n  content: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  header: {\n    fontSize: 25,\n    color: Color.gray,\n  },\n  profileIcon: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 5,\n  },\n  label: { color: Color.gray, fontSize: 12, fontWeight: 'bold' },\n  text: { color: Color.black, fontSize: 16, marginTop: 3, marginBottom: 12 },\n});\n\nexport const inputStyles = {\n  input: {\n    borderColor: Color.steel,\n    borderWidth: 0.9,\n    borderRadius: 6,\n    fontSize: 15,\n\n    marginVertical: 10,\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    color: Color.black,\n  },\n  date: { width: '100%', paddingVertical: 0 },\n  label: { color: Color.gray, fontSize: 12, fontWeight: 'bold' },\n  error: { color: Color.red, fontSize: 9 },\n};\n\nexport const buttonStyles = {\n  view: {\n    backgroundColor: Color.pink,\n    borderRadius: 10,\n    justifyContent: 'center',\n    marginHorizontal: 10,\n    marginBottom: 10,\n    height: 44,\n  },\n  text: {\n    fontSize: 18,\n    textAlign: 'center',\n    color: Color.white,\n    marginHorizontal: 40,\n    marginVertical: 15,\n  },\n};\n",
      "parentDir": null,
      "newFile": true
    },
    "utils.js": {
      "code": "export const getInitials = user => {\n  if (user && user.first_name && user.last_name) {\n    return `${user.first_name.charAt(0)}${user.last_name.charAt(0)}`;\n  }\n  return user?.email?.substring(0, 2).toUpperCase();\n};\n\nexport const transformLabel = label => label.toUpperCase().replace(/[-_]/g, ' ');\n",
      "parentDir": null,
      "newFile": true
    },
    "view.js": {
      "code": "import React, { Component } from 'react';\nimport { View, Text } from 'react-native';\nimport { Avatar } from 'react-native-elements';\nimport { Color, styles } from './styles';\nimport { getInitials, transformLabel } from './utils';\nimport moment from 'moment';\n\nconst UserInfo = props => (\n  <View>\n    <Text style={styles.label}>{transformLabel(props.label)}</Text>\n    <Text style={styles.text}>\n      {props.value ? props.value : 'Not available'}\n    </Text>\n  </View>\n);\n\nexport default class ViewUser extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { user } = this.props;\n    const birthday = user.birth_date\n      ? moment(user.birth_date, 'YYYY-MM-DD').format('LL')\n      : null;\n    const initials = getInitials(user);\n    return (\n      <View>\n        {user.id ? (\n          <View>\n            <View style={styles.profileIcon}>\n              <Avatar\n                size=\"large\"\n                rounded\n                icon={{ name: 'user', type: 'font-awesome' }}\n                title={initials}\n                containerStyle={{ backgroundColor: Color.pink }}\n              />\n            </View>\n            <UserInfo\n              label=\"Name\"\n              value={`${user.first_name} ${user.last_name}`}\n            />\n            <UserInfo label=\"Email\" value={user.email} />\n            <UserInfo label=\"Birthday\" value={birthday} />\n            <UserInfo label=\"Biography\" value={user.bio} />\n          </View>\n        ) : (\n          <Text style={styles.label}>No user information available.</Text>\n        )}\n      </View>\n    );\n  }\n}\n",
      "parentDir": null,
      "newFile": true
    }
  }
}