{
  "articles": {
    "backend/modules/articles/README.md": {
      "code": "## Crowdbotics Articles Component - Backend\n\nThis module contains all needed resources to get the Articles component for React\nNative mobile client.\n\n- This module uses media files (Images for articles). You should enable S3 support\n  in your Crowdbotics app in order to get it working properly.\n- You must add `Pillow` as dependency in your backend project. Go to https://pillow.readthedocs.io/ and check how to do this.\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/__init__.py": {
      "code": "",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/admin.py": {
      "code": "from django.contrib import admin\nfrom .models import Article\n\nadmin.site.register(Article)\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/models.py": {
      "code": "from django.conf import settings\nfrom django.db import models\n\n\nclass Article(models.Model):\n    \"Generated Model\"\n    title = models.CharField(\n        max_length=256,\n    )\n    body = models.TextField()\n    author = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.PROTECT,\n        related_name=\"article_author\",\n    )\n    image = models.ImageField(upload_to=\"mediafiles/articles/\", blank=True, null=True)\n    created_at = models.DateTimeField(\n        auto_now_add=True,\n    )\n    updated_at = models.DateTimeField(\n        auto_now=True,\n    )\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/serializers.py": {
      "code": "from rest_framework import serializers\nfrom .models import Article\nimport base64\nimport imghdr\nimport io\nimport secrets\nfrom django.core.files.base import ContentFile\nfrom PIL import Image\n\n\nclass Base64ImageField(serializers.ImageField):\n    \"\"\"\n    A Django REST framework field for handling image-uploads through raw post data.\n    It uses base64 for encoding and decoding the contents of the file.\n    \"\"\"\n\n    def to_internal_value(self, data):\n        # Check if this is a base64 string\n        if isinstance(data, str):\n            # Check if the base64 string is in the \"data:\" format\n            if \"data:\" in data and \";base64,\" in data:\n                # Break out the header from the base64 content\n                header, data = data.split(\";base64,\")\n                # Try to decode the file. Return validation error if it fails.\n                try:\n                    decoded_file = base64.b64decode(data)\n                except TypeError:\n                    self.fail(\"invalid_image\")\n\n                # Generate file name:\n                file_name = secrets.token_urlsafe(\n                    12\n                )  # 12 characters are more than enough.\n                # Get the file name extension:\n                file_extension = self.get_file_extension(file_name, decoded_file)\n                complete_file_name = \"{0}.{1}\".format(file_name, file_extension)\n                data = ContentFile(decoded_file, name=complete_file_name)\n\n        return super().to_internal_value(data)\n\n    @staticmethod\n    def get_file_extension(file_name, decoded_file):\n        extension = imghdr.what(file_name, decoded_file)\n        if extension is None:\n            image = Image.open(io.BytesIO(decoded_file))\n            extension = image.format.lower()\n        extension = \"jpg\" if extension == \"jpeg\" else extension\n        return extension\n\n\nclass ArticleSerializer(serializers.ModelSerializer):\n    image = Base64ImageField(max_length=None, required=False)\n\n    class Meta:\n        model = Article\n        fields = [\n            \"id\",\n            \"title\",\n            \"body\",\n            \"author\",\n            \"image\",\n            \"created_at\",\n            \"updated_at\",\n        ]\n        read_only_fields = [\"id\"]\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/urls.py": {
      "code": "from django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .viewsets import ArticleViewSet\n\nrouter = DefaultRouter()\nrouter.register(\"article\", ArticleViewSet)\n\nurlpatterns = [\n    path(\"\", include(router.urls)),\n]\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/viewsets.py": {
      "code": "from rest_framework import authentication, permissions\nfrom .models import Article\nfrom .serializers import ArticleSerializer\nfrom rest_framework import viewsets\n\n\nclass ArticleViewSet(viewsets.ModelViewSet):\n    serializer_class = ArticleSerializer\n    permission_classes = [permissions.AllowAny]\n    authentication_classes = (\n        authentication.SessionAuthentication,\n        authentication.TokenAuthentication,\n    )\n    queryset = Article.objects.all()\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/migrations/0001_articles_initial.py": {
      "code": "# Generated by Django 2.2.17 on 2020-12-18 19:57\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"Article\",\n            fields=[\n                (\n                    \"id\",\n                    models.AutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\"title\", models.CharField(max_length=256)),\n                (\"body\", models.TextField()),\n                (\"created_at\", models.DateTimeField(auto_now_add=True)),\n                (\n                    \"image\",\n                    models.ImageField(\n                        upload_to=\"mediafiles/articles/\", blank=True, null=True\n                    ),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True)),\n                (\n                    \"author\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.PROTECT,\n                        related_name=\"article_author\",\n                        to=settings.AUTH_USER_MODEL,\n                    ),\n                ),\n            ],\n        ),\n    ]\n",
      "parentDir": "/",
      "newFile": true
    }
  }
}