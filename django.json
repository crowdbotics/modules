{
  "articles": {
    "backend/modules/articles/README.md": {
      "code": "## Crowdbotics Articles Component - Backend\n\nThis module contains all needed resources to get the Articles component for React\nNative mobile client.\n\n- This module uses media files (Images for articles). You should enable S3 support\n  in your Crowdbotics app in order to get it working properly.\n- `Pillow` version `8.1.0` or higher is required, check your version on the `backend/Pipfile`. If you need to install or upgrade `Pillow` visit https://pillow.readthedocs.io/ and check how to do this.\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/__init__.py": {
      "code": "",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/admin.py": {
      "code": "from django.contrib import admin\nfrom .models import Article\n\nadmin.site.register(Article)\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/models.py": {
      "code": "from django.conf import settings\nfrom django.db import models\n\n\nclass Article(models.Model):\n    \"Generated Model\"\n    title = models.CharField(\n        max_length=256,\n    )\n    body = models.TextField()\n    author = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.PROTECT,\n        related_name=\"article_author\",\n    )\n    image = models.ImageField(upload_to=\"mediafiles/articles/\", blank=True, null=True)\n    created_at = models.DateTimeField(\n        auto_now_add=True,\n    )\n    updated_at = models.DateTimeField(\n        auto_now=True,\n    )\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/serializers.py": {
      "code": "from rest_framework import serializers\nfrom .models import Article\nimport base64\nimport imghdr\nimport io\nimport secrets\nfrom django.core.files.base import ContentFile\nfrom PIL import Image\n\n\nclass Base64ImageField(serializers.ImageField):\n    \"\"\"\n    A Django REST framework field for handling image-uploads through raw post data.\n    It uses base64 for encoding and decoding the contents of the file.\n    \"\"\"\n\n    def to_internal_value(self, data):\n        # Check if this is a base64 string\n        if isinstance(data, str):\n            # Check if the base64 string is in the \"data:\" format\n            if \"data:\" in data and \";base64,\" in data:\n                # Break out the header from the base64 content\n                header, data = data.split(\";base64,\")\n                # Try to decode the file. Return validation error if it fails.\n                try:\n                    decoded_file = base64.b64decode(data)\n                except TypeError:\n                    self.fail(\"invalid_image\")\n\n                # Generate file name:\n                file_name = secrets.token_urlsafe(\n                    12\n                )  # 12 characters are more than enough.\n                # Get the file name extension:\n                file_extension = self.get_file_extension(file_name, decoded_file)\n                complete_file_name = \"{0}.{1}\".format(file_name, file_extension)\n                data = ContentFile(decoded_file, name=complete_file_name)\n\n        return super().to_internal_value(data)\n\n    @staticmethod\n    def get_file_extension(file_name, decoded_file):\n        extension = imghdr.what(file_name, decoded_file)\n        if extension is None:\n            image = Image.open(io.BytesIO(decoded_file))\n            extension = image.format.lower()\n        extension = \"jpg\" if extension == \"jpeg\" else extension\n        return extension\n\n\nclass ArticleSerializer(serializers.ModelSerializer):\n    image = Base64ImageField(max_length=None, required=False)\n\n    class Meta:\n        model = Article\n        fields = [\n            \"id\",\n            \"title\",\n            \"body\",\n            \"author\",\n            \"image\",\n            \"created_at\",\n            \"updated_at\",\n        ]\n        read_only_fields = [\"id\"]\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/urls.py": {
      "code": "from django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .viewsets import ArticleViewSet\n\nrouter = DefaultRouter()\nrouter.register(\"article\", ArticleViewSet)\n\nurlpatterns = [\n    path(\"\", include(router.urls)),\n]\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/articles/viewsets.py": {
      "code": "from rest_framework import authentication, permissions\nfrom .models import Article\nfrom .serializers import ArticleSerializer\nfrom rest_framework import viewsets\n\n\nclass ArticleViewSet(viewsets.ModelViewSet):\n    serializer_class = ArticleSerializer\n    permission_classes = [permissions.AllowAny]\n    authentication_classes = (\n        authentication.SessionAuthentication,\n        authentication.TokenAuthentication,\n    )\n    queryset = Article.objects.all()\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/migrations/0001_articles_initial.py": {
      "code": "# Generated by Django 2.2.17 on 2020-12-18 19:57\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name=\"Article\",\n            fields=[\n                (\n                    \"id\",\n                    models.AutoField(\n                        auto_created=True,\n                        primary_key=True,\n                        serialize=False,\n                        verbose_name=\"ID\",\n                    ),\n                ),\n                (\"title\", models.CharField(max_length=256)),\n                (\"body\", models.TextField()),\n                (\"created_at\", models.DateTimeField(auto_now_add=True)),\n                (\n                    \"image\",\n                    models.ImageField(\n                        upload_to=\"mediafiles/articles/\", blank=True, null=True\n                    ),\n                ),\n                (\"updated_at\", models.DateTimeField(auto_now=True)),\n                (\n                    \"author\",\n                    models.ForeignKey(\n                        on_delete=django.db.models.deletion.PROTECT,\n                        related_name=\"article_author\",\n                        to=settings.AUTH_USER_MODEL,\n                    ),\n                ),\n            ],\n        ),\n    ]\n",
      "parentDir": "/",
      "newFile": true
    }
  },
  "push-notifications": {
    "backend/modules/push-notifications/client.py": {
      "code": "import requests\nfrom requests import Response\nfrom os.path import join\n\nfrom .constants import (\n    API_ROOT,\n    NOTIFICATIONS_PATH,\n    NOTIFICATION_PATH,\n    NOTIFICATION_HISTORY_PATH,\n    DEVICES_PATH,\n    DEVICE_PATH,\n    EDIT_TAGS_PATH,\n    NEW_SESSION_PATH,\n    NEW_PURCHASE_PATH,\n    CSV_EXPORT_PATH,\n    SEGMENTS_PATH,\n    SEGMENT_PATH,\n    VIEW_OUTCOMES_PATH,\n    APPS_PATH,\n    APP_PATH,\n    get_header,\n)\n\n\nclass Client:\n    def __init__(\n        self,\n        app_id: str,\n        rest_api_key: str,\n        user_auth_key: str = \"\",\n        api_root: str = API_ROOT,\n    ):\n        self.app_id = app_id\n        self.rest_api_key = rest_api_key\n        self.user_auth_key = user_auth_key\n        self.api_root = api_root\n\n    def _path(self, path: str, **kwargs) -> str:\n        return join(self.api_root, path.format(**kwargs))\n\n    def create_notification(self, body: Dict) -> Response:\n        \"\"\"\n        Sends notifications to your users\n        https://documentation.onesignal.com/reference/create-notification\n        :param body: Notification parameters (Segments, Filters, User ID).\n        :return: Response\n        \"\"\"\n        header = get_header(self.rest_api_key)\n        path = self._path(NOTIFICATIONS_PATH)\n        payload = {\"app_id\": self.app_id, **body}\n        return requests.post(path, headers=header, data=payload)\n\n    def cancel_notification(self, id: int) -> Response:\n        \"\"\"\n        Stop a scheduled or currently outgoing notification\n        https://documentation.onesignal.com/reference/cancel-notification\n        :param id: Notification id\n        :return: Response\n        \"\"\"\n        header = get_header(self.rest_api_key)\n        path = self._path(NOTIFICATION_PATH, id=id)\n        payload = {\"app_id\": self.app_id}\n        return requests.delete(path, headers=header, params=payload)\n\n    def view_apps(self) -> Response:\n        \"\"\"\n        View the details of all of your current OneSignal apps\n        https://documentation.onesignal.com/reference/view-apps-apps\n        :return: Response\n        \"\"\"\n        header = get_header(self.user_auth_key)\n        path = self._path(APPS_PATH)\n        return requests.get(path, headers=header)\n\n    def view_app(self, app_id: int) -> Response:\n        \"\"\"\n        View the details of a single OneSignal app\n        https://documentation.onesignal.com/reference/view-an-app\n        :param app_id: App id\n        :return: Response\n        \"\"\"\n        header = get_header(self.user_auth_key)\n        path = self._path(APP_PATH, app_id=app_id)\n        return requests.get(path, headers=header)\n\n    def create_app(self, body: Dict) -> Response:\n        \"\"\"\n        Creates a new OneSignal app\n        https://documentation.onesignal.com/reference/create-an-app\n        :param body: App parameters\n        :return: Response\n        \"\"\"\n        header = get_header(self.user_auth_key)\n        path = self._path(APPS_PATH)\n        payload = body\n        return requests.post(path, headers=header, data=payload)\n\n    def update_app(self, app_id: int, body: Dict) -> Response:\n        \"\"\"\n        Updates the name or configuration settings of an existing OneSignal app\n        https://documentation.onesignal.com/reference/update-an-app\n        :param app_id: App id\n        :param body: App parameters\n        :return: Response\n        \"\"\"\n        header = get_header(self.user_auth_key)\n        path = self._path(APP_PATH, app_id=app_id)\n        payload = body\n        return requests.post(path, headers=header, data=payload)\n\n    def view_devices(self, limit: int, offset: int) -> Response:\n        \"\"\"\n        View the details of multiple devices in one of your OneSignal apps\n        https://documentation.onesignal.com/reference/view-devices\n        :param limit: How many devices to return. Max is 300. Default is 300\n        :param offset: Result offset. Default is 0. Results are sorted by id;\n        :return: Response\n        \"\"\"\n        header = get_header(self.rest_api_key)\n        path = self._path(DEVICES_PATH)\n        payload = {\"app_id\": self.app_id, \"limit\": limit, \"offset\": offset}\n        return requests.get(path, headers=header, params=payload)\n\n    def view_device(self, id: int) -> Response:\n        \"\"\"\n        View the details of an existing device in one of your OneSignal apps\n        https://documentation.onesignal.com/reference/view-device\n        :param id: Player's OneSignal ID\n        :return: Response\n        \"\"\"\n        path = self._path(DEVICE_PATH, id=id)\n        payload = {\"app_id\": self.app_id}\n        return requests.get(path, headers=get_header(), params=payload)\n\n    def add_device(self, body: Dict) -> Response:\n        \"\"\"\n        Register a new device to one of your OneSignal apps\n        Warning: Don't use this.\n        This API endpoint is designed to be used from our open source Mobile and\n        Web Push SDKs. It is not designed for developers to use it directly,\n        unless instructed to do so by OneSignal support.\n        https://documentation.onesignal.com/reference/add-a-device\n        :param body: Device parameters\n        :return: Response\n        \"\"\"\n        path = self._path(DEVICES_PATH)\n        payload = body\n        payload[\"app_id\"] = self.app_id\n        return requests.post(path, headers=get_header(), data=payload)\n\n    def edit_device(self, id: int, body: Dict) -> Response:\n        \"\"\"\n        Update an existing device in one of your OneSignal apps\n        https://documentation.onesignal.com/reference/edit-device\n        :param id: Required - The device's OneSignal ID\n        :param body: Device parameters\n        :return: Response\n        \"\"\"\n        path = self._path(DEVICE_PATH, id=id)\n        payload = body\n        payload[\"app_id\"] = self.app_id\n        return requests.put(path, headers=get_header(), data=payload)\n\n    def edit_tags(self, user_id: int, body: Dict) -> Response:\n        \"\"\"\n        Update an existing device's tags in one of your OneSignal apps using the\n        External User ID.\n        https://documentation.onesignal.com/reference/edit-tags-with-external-user-id\n        :param user_id: Required: The External User ID mapped to the device\n        record in OneSignal. Must be actively set on the device to be updated.\n        :param body: Tags\n        :return: Response\n        \"\"\"\n        path = self._path(EDIT_TAGS_PATH, app_id=self.app_id, user_id=user_id)\n        return requests.put(path, headers=get_header(), data=body)\n\n    def new_session(self, id: int, body: Dict) -> Response:\n        \"\"\"\n        Update a device's session information\n        https://documentation.onesignal.com/reference/new-session\n        :param id: Player's OneSignal ID\n        :param body: Body parameters\n        \"\"\"\n        path = self._path(NEW_SESSION_PATH, id=id)\n        return requests.post(path, headers=get_header(), data=body)\n\n    def new_purchase(self, id: int, body: Dict) -> Response:\n        \"\"\"\n        Track a new purchase in your app\n        https://documentation.onesignal.com/reference/new-purchase\n        :param id: Player's OneSignal ID\n        :param body: Body parameters\n        \"\"\"\n        path = self._path(NEW_PURCHASE_PATH, id=id)\n        return requests.post(path, headers=get_header(), data=body)\n\n    def csv_export(self, body: Dict) -> Response:\n        \"\"\"\n        Generate a compressed CSV export of all of your current user data\n        https://documentation.onesignal.com/reference/csv-export\n        :param body: CSV Export parameters\n        \"\"\"\n        header = get_header(self.rest_api_key)\n        path = self._path(CSV_EXPORT_PATH)\n        params = {\"app_id\": self.app_id}\n        return requests.post(path, headers=header, params=params, data=body)\n\n    def view_notification(self, id: int) -> Response:\n        \"\"\"\n        View the details of a single notification and outcomes associated with it\n        https://documentation.onesignal.com/reference/view-notification\n        :param id: Required - Notification ID\n        \"\"\"\n        header = get_header(self.rest_api_key)\n        path = self._path(NOTIFICATION_PATH, id=id)\n        params = {\"app_id\": self.app_id}\n        return requests.get(path, headers=header, params=params)\n\n    def view_notifications(\n        self, limit: int = 50, offset: int = 0, kind: int = None\n    ) -> Response:\n        \"\"\"\n        View the details of multiple notifications\n        https://documentation.onesignal.com/reference/view-notifications\n        :param limit: Optional. How many notifications to return. Max is 50.\n        Default is 50\n        :param offset: Optional. Page offset. Default is 0. Results are sorted by\n        queued_at in descending order. queued_at is a representation of the time\n        that the notification was queued at.\n        :param kind: Optional. Kind of notifications returned. Default (not set)\n        is all notification types.\n        0 - Dashboard only\n        1 - API only\n        3 - Automated only\n        \"\"\"\n        header = get_header(self.rest_api_key)\n        path = self._path(NOTIFICATIONS_PATH)\n        params = {\"app_id\": self.app_id, \"limit\": limit, \"offset\": offset}\n        if kind:\n            params[\"kind\"] = kind\n        return requests.get(path, headers=header, params=params)\n\n    def view_notification_history(self, notification_id: int, body: Dict) -> Response:\n        \"\"\"\n        View the devices sent a message - OneSignal Paid Plan Required\n        https://documentation.onesignal.com/reference/notification-history\n        :param notification_id: The \"id\" of the message found in the creation\n        notification POST response, View Notifications GET response, or URL\n        within the Message Report.\n        :param body: Body params\n        \"\"\"\n        header = get_header(self.rest_api_key)\n        path = self._path(NOTIFICATION_HISTORY_PATH, id=notification_id)\n        payload = body\n        payload[\"app_id\"] = self.app_id\n        return requests.post(path, headers=header, data=payload)\n\n    def create_segments(self, body: Dict) -> Response:\n        \"\"\"\n        Create segments visible and usable in the dashboard and API - Required:\n        OneSignal Paid Plan\n        https://documentation.onesignal.com/reference/create-segments\n        :param body: Body params\n        \"\"\"\n        header = get_header(self.rest_api_key)\n        path = self._path(SEGMENTS_PATH, app_id=self.app_id)\n        return requests.post(path, headers=header, data=body)\n\n    def delete_segments(self, segment_id: int) -> Response:\n        \"\"\"\n        Delete segments (not user devices) - Required: OneSignal Paid Plan\n        https://documentation.onesignal.com/reference/delete-segments\n        :param segment_id: The segment_id can be found in the URL of the segment\n        when viewing it in the dashboard.\n        \"\"\"\n        header = get_header(self.rest_api_key)\n        path = self._path(SEGMENT_PATH, app_id=self.app_id, segment_id=segment_id)\n        return requests.delete(path, headers=header)\n\n    def view_outcomes(\n        self,\n        outcome_names: str,\n        outcome_names_array: str = None,\n        outcome_time_range: str = None,\n        outcome_platforms: str = None,\n        outcome_attribution: str = None,\n    ) -> Response:\n        \"\"\"\n        View the details of all the outcomes associated with your app\n        https://documentation.onesignal.com/reference/view-outcomes\n        :param outcome_names: Required\n        Comma-separated list of names and the value (sum/count) for the returned outcome data.\n        Note: Clicks only support count aggregation.\n\n        For out-of-the-box OneSignal outcomes such as click and session duration, please use the “os” prefix with two underscores. For other outcomes, please use the name specified by the user.\n\n        Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum\n        :param outcome_names_array: Optional\n        If outcome names contain any commas, then please specify only one value at a time.\n\n        Example: outcome_names[]=os__click.count&outcome_names[]=Sales, Purchase.count\n        where “Sales, Purchase” is the custom outcomes with a comma in the name.\n        :param outcome_time_range: Optional\n        Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data).\n\n        Default is 1h if the parameter is omitted.\n        :param outcome_platforms: Optional\n        Platform id. Refer device's platform ids for values.\n\n        Example:\n        outcome_platform=0 for iOS\n        outcome_platform=7,8 for Safari and Firefox\n\n        Default is data from all platforms if the parameter is omitted.\n        :param outcome_attribution: Optional\n        Attribution type for the outcomes. The values can be direct or influenced or unattributed.\n\n        Example: outcome_attribution=direct\n\n        Default is total (returns direct+influenced+unattributed) if the parameter is omitted.\n        \"\"\"\n        header = get_header(self.rest_api_key)\n        params = {\"outcome_names\": outcome_names}\n        if outcome_names_array:\n            params[\"outcome_names_array\"] = outcome_names_array\n        if outcome_time_range:\n            params[\"outcome_time_range\"] = outcome_time_range\n        if outcome_platforms:\n            params[\"outcome_platforms\"] = outcome_platforms\n        if outcome_attribution:\n            params[\"outcome_attribution\"] = outcome_attribution\n        path = self._path(VIEW_OUTCOMES_PATH, app_id=self.app_id)\n        return requests.get(path, headers=header, params=params)\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/push-notifications/constants.py": {
      "code": "# Requests config\nJSON_HEADER = {\"Content-Type\": \"application/json; charset=utf-8\"}\n\n\ndef get_header(auth_key: str = None) -> Dict:\n    header = JSON_HEADER\n    if auth_key:\n        header[\"Authorization\"] = f\"Basic {auth_key}\"\n    return header\n\n\n# Endpoints\nAPI_ROOT = \"https://onesignal.com/api/v1\"\nNOTIFICATIONS_PATH = \"/notifications\"\nNOTIFICATION_PATH = \"/notifications/{id}\"\nNOTIFICATION_HISTORY_PATH = \"/notifications/{id}/history\"\nDEVICES_PATH = \"/players\"\nDEVICE_PATH = \"/players/{id}\"\nEDIT_TAGS_PATH = \"/apps/{app_id}/users/{user_id}\"\nNEW_SESSION_PATH = \"/players/{id}/on_session\"\nNEW_PURCHASE_PATH = \"/players/{id}/on_purchase\"\nCSV_EXPORT_PATH = \"/players/csv_export\"\nSEGMENTS_PATH = \"/apps/{app_id}/segments\"\nSEGMENT_PATH = \"/apps/{app_id}/segments/{segment_id}\"\nVIEW_OUTCOMES_PATH = \"/apps/{app_id}/outcomes\"\nAPPS_PATH = \"/apps\"\nAPP_PATH = \"/apps/{app_id}\"\n",
      "parentDir": "/",
      "newFile": true
    }
  },
  "social-auth": {
    "backend/modules/social-auth/README.md": {
      "code": "# Crowdbotics Social Login Module - Backend\nThis module contains all needed resources and information to set up Social Login in your app backend.\n\n## Requirements\n- The project must have `django-allauth` with version 0.43.0 or higher in order to support Apple provider\n\n## Extra installation steps\nAfter adding this module to your project, you need to include the facebook authentication third party app in your `settings.py` file. To do that, open your project's settings.py file - it should be in the path `/<your_repo_name>/backend/<your_repo_name>/settings.py`, where <your_repo_name> is the name of your project's repository. For example, if my repository name is `social_login_1234`, my file should be located at `social_login_1234/backend/social_login_1234/settings.py`.\n\nOnce the file is opened, locate in the code a declaration for `THIRD_PARTY_APPS` and include `'allauth.socialaccount.providers.facebook',` and `'allauth.socialaccount.providers.apple',` at the end. Your app should already have `'allauth.socialaccount.providers.google'` added there, so you should verify; but if it is not there, then add it as well. Your code section should look roughly like this:\n\n```py\nTHIRD_PARTY_APPS = [\n    'rest_framework',\n    'rest_framework.authtoken',\n    'rest_auth',\n    'rest_auth.registration',\n    'allauth.socialaccount.providers.google',\n\n    # More apps added before here...\n\n    'allauth.socialaccount.providers.facebook', # add this line here\n    'allauth.socialaccount.providers.apple', # add this other line\n]\n```\n\nGo to the end of the file and add the following code:\n\n```js\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        \"rest_framework.authentication.TokenAuthentication\",\n        \"rest_framework.authentication.SessionAuthentication\",\n    ),\n}\n```\n\nYou should now deploy your app's backend in order to proceed to the next step.\n\n## Configuring Facebook\nYou need to setup Facebook SDK to get social login properly configured in your app. Ideally, these steps should be done by the project owner or with an project owner account, as it needs to be properly configured for app store release, but it can be done with debug configuration during the development phase. \n\n1. First, access Facebook for developers at https://developers.facebook.com and register for a developer account, if you do not already have one.\n\n2. After that, access the [your facebook apps page](https://developers.facebook.com/apps/) and choose to create a Facebook app. FOr the purpose of social login, you could choose the `build connected experiences` upon facing the question \"What do you need your app to do?\" and click continue (as shown below). In the next page, type in the name of your app, contact email and, if existing, business manager account for the app and click `Create App`:\n\n![facebook-create-app](https://crowdbotics-slack-dev.s3.amazonaws.com/media/resources/project/18906/15c9063c-6f5d-4afa-a77f-76f75c15e062.png)\n![](https://crowdbotics-slack-dev.s3.amazonaws.com/media/resources/project/18906/ff97ef37-8535-4f4b-958f-def310bf110d.png)\n\n3. After creation, go to your Facebook app's dashboard and look for an option to set up social login product to your app. The url should look like this: `https://developers.facebook.com/apps/<your_facebook_app_id>/fb-login/quickstart/`. There, choose the web option (to register a key to your backend).\n\n4. Then, you will be prompted to add your website url (point 1 in the image below) and save (point 2) - your website url is where your backend is being served - you can find this url by clicking on `View App` at crowdbotics dashboard `Settings` page. Check out our knowledge base for more information.\n\n5. After saving, navigate to Facebook dashboard at `Settings -> Basic` (as shown in point 3 of image below).\n![](https://crowdbotics-slack-dev.s3.amazonaws.com/media/resources/project/18906/596578e6-d64c-4d04-a4fa-712da80aa1f5.png)\n\nYou need to keep this page open and navigate to another browser tab, as you will need to copy both `App ID` and `App Secret` to paste on your own project admin page. \n\n6. Navigate to the Crowdbotics dashboard for your app and access your app's admin panel. If you do not know what this means, please, check out our [Knowledge Base Article](https://knowledge.crowdbotics.com/what-is-the-admin-panel).\n\nAt your app's admin page, try to find `Social Accounts` section and click on `Social Applications`: \n![](https://crowdbotics-slack-dev.s3.amazonaws.com/media/resources/project/18906/9babfe52-423f-40dc-afa0-a5d038782640.png)\n\n7. Then, click to `Add a social Application +` on the button at the right side of your screen. Fill out the form as follows and save:\n\n- Provider: Facebook\n- Name: Facebook (or any name you would like to give that helps you identify this facebook configuration)\n- Client id: Your `App ID` from facebook settings\n- Secret Key: The `App Secret` from facebook settings\n- Sites: your website url, just move it to the right panel. \n\nIt should end up as something like this:\n\n![](https://crowdbotics-slack-dev.s3.amazonaws.com/media/resources/project/18906/fc889f58-78a5-4828-abb2-4285acac560e.png)\n\nYour backend is now ready to accept facebook login. Redeploy your application so all changes are applied to the server.\n\n## Configuring Google\nSimilarly to Facebook, Google login should ideally be configured in the Google account that is going to manage everything related to this project (usually, the project owner). But for development purposes, it can temporarily be configured by anyone.\n\n1. Configure your Google Cloud account to access the [console](https://console.developers.google.com/), and to start a quick setup of an API project, visit https://developers.google.com/identity/sign-in/android/start#configure-a-google-api-project and click on `Configure a Project`. \n2. There, you will choose to create a new project (or your an existing one, if desired). Follow the instructions, filling out product name, choosing `Web Server` as your OAuth client and pasting your app's url as the Authorized redirect URIs and your app's url appended with `/accounts/google/login/callback/`.\nFor example, this tutorial app link is `https://social-login-1234.botics.co/` so you should provide both `https://social-login-1234.botics.co/` and `https://social-login-1234.botics.co/accounts/google/login/callback/`.\nFinish up and `Download Client Configuration` (you will need this information later).\n\n3. Navigate to Crowdbotics dashboard for your app and access your app's admin panel to add the Google API information. To do so, follow steps 6 and 7 from the Facebook configuration above, and input the form values as follows:\n\n- Provider: Google\n- Name: Google (or any name you would like to give that helps you identify this google configuration)\n- Client id: Your `Client ID` (`client_id`) from Google's credentials configuration\n- Secret Key: The `Client Secret` (`client_secret`) Google's credentials configuration\n- Sites: your website url, just move it to the right panel. \n\n## Configuring Apple\nTo be able to use Apple features, it is required that you have access to a developer account with access for creating [certificates, identifiers and keys](https://developer.apple.com/support/certificates/). If you already have a Service Identifier, make sure to update your identifier with `Signin with Apple` capability (point e-g below).\n\n1. First, create a app ID at `https://developer.apple.com/account/resources/certificates/list`. Go to `Identifiers`, click on the `+` sign beside Identifiers or click on this page: [Register new identifier](https://developer.apple.com/account/resources/identifiers/add/bundleId). \na) Choose App id and click Continue\nb) Choose App option and continue\nc) Add your app's name in the `description` field. Add your bundle ID ([bundle identifier](https://developer.apple.com/documentation/appstoreconnectapi/bundle_ids)) that can be found on the XCode page.\nd) Go to Capabilities and enable. \ne) Click in the edit button, select `Enable as a primary App ID` and save\nf) Click continue. Verify all the input information and if everything is correct, click `Register`\n\n2. Now, register for a Service ID.\na) Go to the same page as before, but now choose `Service IDs` option.\nb) Insert your desired description and create an identifier (it could be your bundle ID)\nc) Enable `Signin with apple` and on clicking `Configure`, choose your Primary App ID.\nd) There, you will be asked to select your primary App ID (select the one created earlier). Then, add your app's domain to the `Website Urls` section available. Your domain should be the same that you use to access your web app (as was described before). For this tutorial, we have `social-login-1234.botics.co`. Also add a url that looks like `<your_app_domain_url>/accounts/apple/login/callback/`. In the tutorial, we have `https://social-login-1234.botics.co/accounts/apple/login/callback/`.\ne) Save everything\nf) Verify if information is correct and click Register.\n\n3. Now go to `Keys` tab and click on `+` to add a new key (or navigate to [Register a New Key](https://developer.apple.com/account/resources/authkeys/add) page).\na) Add a name for your key (choose some unique name)\nb) Enable `Signin with Apple` and click in `Configure` button\nc) If asked about domains, insert the same values that you did for Service IDs website urls. \nd) Save everything and __download the generated certificate__.\n\n4. Now, open your projects' `settings.py` file, and at the end of the file, add the following, replacing the existing values with what you just created on Apple website above:\n\n```py\nSOCIALACCOUNT_PROVIDERS = {\n    \"apple\": {\n        \"APP\": {\n            # Your service identifier.\n            \"client_id\": \"com.crowdbotics.social-login-1234,\n\n            # The Key ID (visible in the \"View Key Details\" page).\n            \"secret\": \"sociallogintest1234\",\n\n             # Member ID/App ID Prefix -- you can find it below your name\n             # at the top right corner of the page, or it’s your App ID\n             # Prefix in your App ID.\n            \"key\": \"ABCDEFG\",\n\n            # The certificate you downloaded when generating the key.\n            \"certificate_key\": \"\"\"-----BEGIN PRIVATE KEY-----\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \n-----END PRIVATE KEY-----\n\"\"\"\n        }\n    }\n}\n```\n\n4. Save the settings.py file and commit everything to Github\n5. On your apps admin panel, go to Social applications and create a new application for apple, adding the following values:\n- Provider: Apple\n- Name: A custom name, you can add it as `Apple API`\n- Client ID: Your service ID created in previous steps (e.g. com.crowdbotics.social-login-1234)\n- Secret Key: The KEY ID created previously (e.g. sociallogintest1234)\n- Key: Your app ID prefix, usually your team ID (e.g. ABCDEFG)\n- Sites: your website links\n\n6. Save everything and redeploy your app. Your backend is now ready to receive Apple Authentication.\n\n## References and Helpful Links\n- [Django-allauth and Apple signin](https://github.com/pennersr/django-allauth/pull/2424#issuecomment-670597679)\n- [Facebook Login Official Docs](https://developers.facebook.com/docs/facebook-login/web/)\n- [Google Login Official Docs](https://developers.google.com/identity/sign-in/web/server-side-flow)\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/social-auth/__init__.py": {
      "code": "",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/social-auth/serializers.py": {
      "code": "from rest_auth.registration.serializers import SocialLoginSerializer, SocialConnectMixin\nfrom rest_framework import serializers\nfrom django.http import HttpRequest\nfrom django.contrib.auth import get_user_model\nfrom allauth.socialaccount.providers.oauth2.client import OAuth2Error\nfrom allauth.socialaccount.helpers import complete_social_login\nfrom allauth.account import app_settings as allauth_settings\n\n\nclass CustomAppleSocialLoginSerializer(SocialLoginSerializer):\n    access_token = serializers.CharField(required=False, allow_blank=True)\n    code = serializers.CharField(required=False, allow_blank=True)\n    id_token = serializers.CharField(required=False, allow_blank=True)\n\n    def _get_request(self):\n        request = self.context.get(\"request\")\n        if not isinstance(request, HttpRequest):\n            request = request._request\n        return request\n\n    def get_social_login(self, adapter, app, token, response):\n        \"\"\"\n        :param adapter: allauth.socialaccount Adapter subclass.\n            Usually OAuthAdapter or Auth2Adapter\n        :param app: `allauth.socialaccount.SocialApp` instance\n        :param token: `allauth.socialaccount.SocialToken` instance\n        :param response: Provider's response for OAuth1. Not used in the\n        :returns: A populated instance of the\n            `allauth.socialaccount.SocialLoginView` instance\n        \"\"\"\n        request = self._get_request()\n        social_login = adapter.complete_login(request, app, token, response=response)\n        social_login.token = token\n        return social_login\n\n    def validate(self, attrs):\n        view = self.context.get(\"view\")\n        request = self._get_request()\n\n        if not view:\n            raise serializers.ValidationError(\n                \"View is not defined, pass it as a context variable\"\n            )\n\n        adapter_class = getattr(view, \"adapter_class\", None)\n        if not adapter_class:\n            raise serializers.ValidationError(\"Define adapter_class in view\")\n\n        adapter = adapter_class(request)\n        app = adapter.get_provider().get_app(request)\n\n        # More info on code vs access_token\n        # http://stackoverflow.com/questions/8666316/facebook-oauth-2-0-code-and-token\n\n        # Case 1: We received the access_token\n        if attrs.get(\"access_token\"):\n            access_token = attrs.get(\"access_token\")\n            token = {\"access_token\": access_token}\n\n        # Case 2: We received the authorization code\n        elif attrs.get(\"code\"):\n            self.callback_url = getattr(view, \"callback_url\", None)\n            self.client_class = getattr(view, \"client_class\", None)\n\n            if not self.callback_url:\n                raise serializers.ValidationError(\"Define callback_url in view\")\n            if not self.client_class:\n                raise serializers.ValidationError(\"Define client_class in view\")\n\n            code = attrs.get(\"code\")\n\n            provider = adapter.get_provider()\n            scope = provider.get_scope(request)\n            client = self.client_class(\n                request,\n                app.client_id,\n                app.secret,\n                adapter.access_token_method,\n                adapter.access_token_url,\n                self.callback_url,\n                scope,\n                key=app.key,\n                cert=app.cert,\n            )\n            token = client.get_access_token(code)\n            access_token = token[\"access_token\"]\n\n        else:\n            raise serializers.ValidationError(\n                \"Incorrect input. access_token or code is required.\"\n            )\n\n        # Custom changes introduced to handle apple login on allauth\n        try:\n            social_token = adapter.parse_token(\n                {\n                    \"access_token\": access_token,\n                    \"id_token\": attrs.get(\"id_token\"),  # For apple login\n                }\n            )\n            social_token.app = app\n        except OAuth2Error as err:\n            raise serializers.ValidationError(str(err)) from err\n\n        try:\n            login = self.get_social_login(adapter, app, social_token, access_token)\n            complete_social_login(request, login)\n        except HTTPError:\n            raise serializers.ValidationError(\"Incorrect value\")\n\n        if not login.is_existing:\n            # We have an account already signed up in a different flow\n            # with the same email address: raise an exception, for security reasons.\n            # If you decide to follow up with this flow, checkout allauth implementation:\n            # add login.connect(request, email_address.user)\n            # https://github.com/pennersr/django-allauth/issues/1149\n            #\n            # if allauth_settings.UNIQUE_EMAIL:\n            #     # Do we have an account already with this email address?\n            #     if get_user_model().objects.filter(email=login.user.email).exists():\n            #         raise serializers.ValidationError(\n            #             'E-mail already registered using different signup method.')\n\n            login.lookup()\n            login.save(request, connect=True)\n\n        attrs[\"user\"] = login.account.user\n        return attrs\n\n\nclass CustomAppleConnectSerializer(\n    SocialConnectMixin, CustomAppleSocialLoginSerializer\n):\n    pass\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/social-auth/urls.py": {
      "code": "from django.urls import path, include\nfrom .views import (\n    FacebookLogin,\n    GoogleLogin,\n    AppleLogin,\n    FacebookConnect,\n    GoogleConnect,\n    AppleConnect,\n)\nfrom rest_auth.registration.views import (\n    SocialAccountListView,\n    SocialAccountDisconnectView,\n)\n\nurlpatterns = [\n    # login endpoints - used in social login\n    path(\"facebook/login/\", FacebookLogin.as_view(), name=\"social_facebook_login\"),\n    path(\"google/login/\", GoogleLogin.as_view(), name=\"social_google_login\"),\n    path(\"apple/login/\", AppleLogin.as_view(), name=\"social_apple_login\"),\n    # connect endpoints - can be used to implement connect to existing account\n    path(\"facebook/connect/\", FacebookLogin.as_view(), name=\"social_facebook_connect\"),\n    path(\"google/connect/\", GoogleLogin.as_view(), name=\"social_google_connect\"),\n    path(\"apple/connect/\", AppleLogin.as_view(), name=\"social_apple_connect\"),\n    path(\n        \"socialaccounts/\", SocialAccountListView.as_view(), name=\"social_account_list\"\n    ),\n    # Allows to disconnect social account\n    path(\n        \"socialaccounts/<int:pk>/disconnect/\",\n        SocialAccountDisconnectView.as_view(),\n        name=\"social_account_disconnect\",\n    ),\n]\n",
      "parentDir": "/",
      "newFile": true
    },
    "backend/modules/social-auth/views.py": {
      "code": "from rest_framework.permissions import AllowAny\nfrom allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter\nfrom allauth.socialaccount.providers.google.views import GoogleOAuth2Adapter\nfrom allauth.socialaccount.providers.oauth2.client import OAuth2Client\nfrom allauth.socialaccount.providers.apple.views import AppleOAuth2Adapter\nfrom allauth.socialaccount.providers.apple.client import AppleOAuth2Client\nfrom rest_auth.registration.views import SocialLoginView, SocialConnectView\nfrom .serializers import CustomAppleSocialLoginSerializer, CustomAppleConnectSerializer\nfrom django.contrib.sites.models import Site\n\ntry:\n    APP_DOMAIN = Site.objects.get(id=1).domain\nexcept Site.DoesNotExist:\n    APP_DOMAIN = \"\"\n\n\nclass FacebookLogin(SocialLoginView):\n    permission_classes = (AllowAny,)\n    adapter_class = FacebookOAuth2Adapter\n\n\nclass GoogleLogin(SocialLoginView):\n    permission_classes = (AllowAny,)\n    adapter_class = GoogleOAuth2Adapter\n    client_class = OAuth2Client\n\n\nclass AppleLogin(SocialLoginView):\n    adapter_class = AppleOAuth2Adapter\n    client_class = AppleOAuth2Client\n    serializer_class = CustomAppleSocialLoginSerializer\n    callback_url = f\"https://{APP_DOMAIN}/accounts/apple/login/callback/\"\n\n\nclass FacebookConnect(SocialConnectView):\n    permission_classes = (AllowAny,)\n    adapter_class = FacebookOAuth2Adapter\n\n\nclass GoogleConnect(SocialConnectView):\n    permission_classes = (AllowAny,)\n    adapter_class = GoogleOAuth2Adapter\n    client_class = OAuth2Client\n\n\nclass AppleConnect(SocialConnectView):\n    adapter_class = AppleOAuth2Adapter\n    client_class = AppleOAuth2Client\n    serializer_class = CustomAppleConnectSerializer\n",
      "parentDir": "/",
      "newFile": true
    }
  }
}